/* Generated By: fun.jjt,v 1.97 2015/06/24 02&JJTree&JavaCC: Do not edit this line. FunParserConstants.java */
package fun.parser;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface FunParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int SINGLE_LINE_COMMENT = 8;
  /** RegularExpression Id. */
  int CONTAINER = 17;
  /** RegularExpression Id. */
  int COUNT = 18;
  /** RegularExpression Id. */
  int DEF = 19;
  /** RegularExpression Id. */
  int KEYS = 20;
  /** RegularExpression Id. */
  int MY = 21;
  /** RegularExpression Id. */
  int NEXT = 22;
  /** RegularExpression Id. */
  int OWNER = 23;
  /** RegularExpression Id. */
  int SOURCE = 24;
  /** RegularExpression Id. */
  int SUB = 25;
  /** RegularExpression Id. */
  int SUPER = 26;
  /** RegularExpression Id. */
  int THIS = 27;
  /** RegularExpression Id. */
  int CORE = 28;
  /** RegularExpression Id. */
  int DEFAULT_KEYWORD = 29;
  /** RegularExpression Id. */
  int SITE = 30;
  /** RegularExpression Id. */
  int ADOPT = 31;
  /** RegularExpression Id. */
  int AND = 32;
  /** RegularExpression Id. */
  int AS = 33;
  /** RegularExpression Id. */
  int BREAK = 34;
  /** RegularExpression Id. */
  int BY = 35;
  /** RegularExpression Id. */
  int CATCH = 36;
  /** RegularExpression Id. */
  int CONTINUE = 37;
  /** RegularExpression Id. */
  int CREATE = 38;
  /** RegularExpression Id. */
  int DYNAMIC = 39;
  /** RegularExpression Id. */
  int ELSE = 40;
  /** RegularExpression Id. */
  int EXTERN = 41;
  /** RegularExpression Id. */
  int FINAL = 42;
  /** RegularExpression Id. */
  int FOR = 43;
  /** RegularExpression Id. */
  int FROM = 44;
  /** RegularExpression Id. */
  int GLOBAL = 45;
  /** RegularExpression Id. */
  int HERE = 46;
  /** RegularExpression Id. */
  int IF = 47;
  /** RegularExpression Id. */
  int IN = 48;
  /** RegularExpression Id. */
  int KEEP = 49;
  /** RegularExpression Id. */
  int LOCAL = 50;
  /** RegularExpression Id. */
  int ON = 51;
  /** RegularExpression Id. */
  int OR = 52;
  /** RegularExpression Id. */
  int PUBLIC = 53;
  /** RegularExpression Id. */
  int REDIRECT = 54;
  /** RegularExpression Id. */
  int STATIC = 55;
  /** RegularExpression Id. */
  int THROUGH = 56;
  /** RegularExpression Id. */
  int TO = 57;
  /** RegularExpression Id. */
  int TYPE = 58;
  /** RegularExpression Id. */
  int UNTIL = 59;
  /** RegularExpression Id. */
  int WHERE = 60;
  /** RegularExpression Id. */
  int WITH = 61;
  /** RegularExpression Id. */
  int WITHOUT = 62;
  /** RegularExpression Id. */
  int ISA = 63;
  /** RegularExpression Id. */
  int BOOLEAN = 64;
  /** RegularExpression Id. */
  int BYTE = 65;
  /** RegularExpression Id. */
  int CHAR = 66;
  /** RegularExpression Id. */
  int DOUBLE = 67;
  /** RegularExpression Id. */
  int FLOAT = 68;
  /** RegularExpression Id. */
  int INT = 69;
  /** RegularExpression Id. */
  int LONG = 70;
  /** RegularExpression Id. */
  int NUMBER = 71;
  /** RegularExpression Id. */
  int SHORT = 72;
  /** RegularExpression Id. */
  int STRING = 73;
  /** RegularExpression Id. */
  int VOID = 74;
  /** RegularExpression Id. */
  int FALSE = 75;
  /** RegularExpression Id. */
  int NULL = 76;
  /** RegularExpression Id. */
  int TRUE = 77;
  /** RegularExpression Id. */
  int INTEGER_LITERAL = 78;
  /** RegularExpression Id. */
  int DECIMAL_LITERAL = 79;
  /** RegularExpression Id. */
  int HEX_LITERAL = 80;
  /** RegularExpression Id. */
  int OCTAL_LITERAL = 81;
  /** RegularExpression Id. */
  int FLOATING_POINT_LITERAL = 82;
  /** RegularExpression Id. */
  int EXPONENT = 83;
  /** RegularExpression Id. */
  int CHAR_LITERAL = 84;
  /** RegularExpression Id. */
  int SQ_STRING_LITERAL = 85;
  /** RegularExpression Id. */
  int DQ_STRING_LITERAL = 86;
  /** RegularExpression Id. */
  int IDENTIFIER = 87;
  /** RegularExpression Id. */
  int BQ_STRING_LITERAL = 88;
  /** RegularExpression Id. */
  int LETTER = 89;
  /** RegularExpression Id. */
  int DIGIT = 90;
  /** RegularExpression Id. */
  int LSTATIC = 91;
  /** RegularExpression Id. */
  int RSTATIC = 92;
  /** RegularExpression Id. */
  int LSTATICW = 93;
  /** RegularExpression Id. */
  int RSTATICW = 94;
  /** RegularExpression Id. */
  int LLITERAL = 95;
  /** RegularExpression Id. */
  int RLITERAL = 96;
  /** RegularExpression Id. */
  int LCODE = 97;
  /** RegularExpression Id. */
  int RCODE = 98;
  /** RegularExpression Id. */
  int LEMBEDCODE = 99;
  /** RegularExpression Id. */
  int REMBEDCODE = 100;
  /** RegularExpression Id. */
  int LCONCURRENT = 101;
  /** RegularExpression Id. */
  int RCONCURRENT = 102;
  /** RegularExpression Id. */
  int LPAREN = 103;
  /** RegularExpression Id. */
  int RPAREN = 104;
  /** RegularExpression Id. */
  int LDYNAMICPAREN = 105;
  /** RegularExpression Id. */
  int RDYNAMICPAREN = 106;
  /** RegularExpression Id. */
  int LCONCURRENTPAREN = 107;
  /** RegularExpression Id. */
  int RCONCURRENTPAREN = 108;
  /** RegularExpression Id. */
  int LBRACKET = 109;
  /** RegularExpression Id. */
  int RBRACKET = 110;
  /** RegularExpression Id. */
  int SEMICOLON = 111;
  /** RegularExpression Id. */
  int COMMA = 112;
  /** RegularExpression Id. */
  int DOT = 113;
  /** RegularExpression Id. */
  int HASH = 114;
  /** RegularExpression Id. */
  int ASSIGN = 115;
  /** RegularExpression Id. */
  int GT = 116;
  /** RegularExpression Id. */
  int LT = 117;
  /** RegularExpression Id. */
  int THPPPT_DING = 118;
  /** RegularExpression Id. */
  int TILDE = 119;
  /** RegularExpression Id. */
  int QMARK = 120;
  /** RegularExpression Id. */
  int QQMARK = 121;
  /** RegularExpression Id. */
  int COLON = 122;
  /** RegularExpression Id. */
  int EQ = 123;
  /** RegularExpression Id. */
  int LE = 124;
  /** RegularExpression Id. */
  int GE = 125;
  /** RegularExpression Id. */
  int NE = 126;
  /** RegularExpression Id. */
  int EQ_IGNORE_CASE = 127;
  /** RegularExpression Id. */
  int LE_IGNORE_CASE = 128;
  /** RegularExpression Id. */
  int LT_IGNORE_CASE = 129;
  /** RegularExpression Id. */
  int GE_IGNORE_CASE = 130;
  /** RegularExpression Id. */
  int GT_IGNORE_CASE = 131;
  /** RegularExpression Id. */
  int NE_IGNORE_CASE = 132;
  /** RegularExpression Id. */
  int LOGICAL_AND = 133;
  /** RegularExpression Id. */
  int LOGICAL_OR = 134;
  /** RegularExpression Id. */
  int PLUS = 135;
  /** RegularExpression Id. */
  int MINUS = 136;
  /** RegularExpression Id. */
  int TIMES = 137;
  /** RegularExpression Id. */
  int DIVIDED_BY = 138;
  /** RegularExpression Id. */
  int BITWISE_AND = 139;
  /** RegularExpression Id. */
  int BITWISE_OR = 140;
  /** RegularExpression Id. */
  int CARET = 141;
  /** RegularExpression Id. */
  int MOD = 142;
  /** RegularExpression Id. */
  int LSHIFT = 143;
  /** RegularExpression Id. */
  int RSIGNEDSHIFT = 144;
  /** RegularExpression Id. */
  int RUNSIGNEDSHIFT = 145;
  /** RegularExpression Id. */
  int NULL_BLOCK = 146;
  /** RegularExpression Id. */
  int ABSTRACT_NULL = 147;
  /** RegularExpression Id. */
  int EXTERNAL_BLOCK = 148;
  /** RegularExpression Id. */
  int ELLIPSIS = 149;
  /** RegularExpression Id. */
  int INDEFINITE_NAMERANGE = 150;
  /** RegularExpression Id. */
  int CONTEXT = 151;
  /** RegularExpression Id. */
  int STATIC_0 = 153;
  /** RegularExpression Id. */
  int STATIC_1 = 154;
  /** RegularExpression Id. */
  int STATIC_2 = 155;
  /** RegularExpression Id. */
  int STATIC_3 = 156;
  /** RegularExpression Id. */
  int STATIC_4 = 157;
  /** RegularExpression Id. */
  int STATIC_5 = 158;
  /** RegularExpression Id. */
  int LITERAL_1 = 160;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int IN_COMMENT = 1;
  /** Lexical state. */
  int IN_DOC_COMMENT = 2;
  /** Lexical state. */
  int IN_STATIC_TEXT = 3;
  /** Lexical state. */
  int IN_LITERAL_TEXT = 4;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\n\"",
    "\"\\r\"",
    "\"\\t\"",
    "\"\\f\"",
    "\"/--\"",
    "\"/*\"",
    "<SINGLE_LINE_COMMENT>",
    "<token of kind 9>",
    "\"--/\"",
    "\"/--\"",
    "\"/*\"",
    "<token of kind 13>",
    "\"*/\"",
    "\"/*\"",
    "\"/--\"",
    "\"container\"",
    "\"count\"",
    "\"def\"",
    "\"keys\"",
    "\"my\"",
    "\"next\"",
    "\"owner\"",
    "\"source\"",
    "\"sub\"",
    "\"super\"",
    "\"this\"",
    "\"core\"",
    "\"default\"",
    "\"site\"",
    "\"adopt\"",
    "\"and\"",
    "\"as\"",
    "\"break\"",
    "\"by\"",
    "\"catch\"",
    "\"continue\"",
    "\"create\"",
    "\"dynamic\"",
    "\"else\"",
    "\"extern\"",
    "\"final\"",
    "\"for\"",
    "\"from\"",
    "\"global\"",
    "\"here\"",
    "\"if\"",
    "\"in\"",
    "\"keep\"",
    "\"local\"",
    "\"on\"",
    "\"or\"",
    "\"public\"",
    "\"redirect\"",
    "\"static\"",
    "\"through\"",
    "\"to\"",
    "\"type\"",
    "\"until\"",
    "\"where\"",
    "\"with\"",
    "\"without\"",
    "\"isa\"",
    "\"boolean\"",
    "\"byte\"",
    "\"char\"",
    "\"double\"",
    "\"float\"",
    "\"int\"",
    "\"long\"",
    "\"number\"",
    "\"short\"",
    "\"string\"",
    "\"void\"",
    "\"false\"",
    "\"null\"",
    "\"true\"",
    "<INTEGER_LITERAL>",
    "<DECIMAL_LITERAL>",
    "<HEX_LITERAL>",
    "<OCTAL_LITERAL>",
    "<FLOATING_POINT_LITERAL>",
    "<EXPONENT>",
    "<CHAR_LITERAL>",
    "<SQ_STRING_LITERAL>",
    "<DQ_STRING_LITERAL>",
    "<IDENTIFIER>",
    "<BQ_STRING_LITERAL>",
    "<LETTER>",
    "<DIGIT>",
    "\"[/\"",
    "\"/]\"",
    "\"[|\"",
    "\"|]\"",
    "\"[``\"",
    "\"``]\"",
    "\"{\"",
    "\"}\"",
    "\"{=\"",
    "\"=}\"",
    "\"{+\"",
    "\"+}\"",
    "\"(\"",
    "\")\"",
    "\"(:\"",
    "\":)\"",
    "\"(+\"",
    "\"+)\"",
    "\"[\"",
    "\"]\"",
    "\";\"",
    "\",\"",
    "\".\"",
    "\"#\"",
    "\"=\"",
    "\">\"",
    "\"<\"",
    "\"!\"",
    "\"~\"",
    "\"?\"",
    "\"??\"",
    "\":\"",
    "\"==\"",
    "\"<=\"",
    "\">=\"",
    "\"!=\"",
    "\"~==\"",
    "\"~<=\"",
    "\"~<\"",
    "\"~>=\"",
    "\"~>\"",
    "\"~!=\"",
    "\"&&\"",
    "\"||\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"&\"",
    "\"|\"",
    "\"^\"",
    "\"%\"",
    "\"<<\"",
    "\">>\"",
    "\">>>\"",
    "\"[/]\"",
    "\"[?]\"",
    "\"[&]\"",
    "\"...\"",
    "\"**\"",
    "\"@\"",
    "<token of kind 152>",
    "\"[``\"",
    "\"[/\"",
    "\"{=\"",
    "\"/]\"",
    "\"[|\"",
    "\"|]\"",
    "<token of kind 159>",
    "\"``]\"",
    "\"[=\"",
    "\"++\"",
    "\"|>\"",
  };

}
