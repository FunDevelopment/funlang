/* Generated By: fun.jjt,v 1.97 2015/06/24 02&JJTree&JavaCC: Do not edit this line. FunParser.java */
package fun.parser;

import java.io.*;
import java.util.*;
import fun.lang.*;

public class FunParser/*@bgen(jjtree)*/implements FunParserTreeConstants, FunParserConstants {/*@bgen(jjtree)*/
  protected JJTFunParserState jjtree = new JJTFunParserState();
    public static void parseFile(File file) throws FileNotFoundException, ParseException {
        FunParser parser;
        String filename = file.getName();
        long initTime = 0;
        long parseTime = 0;
        long startTime = 0;
        long stopTime = 0;

        startTime = System.currentTimeMillis();
        parser = new FunParser(new java.io.FileInputStream(file));
        stopTime = System.currentTimeMillis();
        initTime = stopTime - startTime;
        startTime = System.currentTimeMillis();
        parser.parse(filename);
        stopTime = System.currentTimeMillis();
        parseTime = stopTime - startTime;
        System.out.println("   Fun document " + filename + " parsed successfully in " + (initTime + parseTime) + " milliseconds.");
        System.out.println("      parser initialization time was " + initTime + " ms.");
        System.out.println("      parser parse time was " + parseTime + " ms.");
    }

    public static void main(String args[]) {
        FunParser parser;

        if (args.length == 0) {
            System.out.println("Reading Fun from standard input.\u005cn\u005cn {");
            parser = new FunParser(System.in);
        } else if (args.length == 1) {
            String filename = args[0];
            try {
                System.out.println("Fun Parser Version $version$");
                parseFile(new File(filename));
            } catch (FileNotFoundException e) {
                System.out.println("Fun document " + filename + " not found.");
            } catch (ParseException e) {
                System.out.println("Error parsing Fun document " + filename + ": " + e);
            }

        } else {
            System.out.println("Usage:\u005cn");
            System.out.println("     java fun.parser.FunParser < funfile");
            System.out.println("  or java fun.parser.FunParser funfile");
        }
    }

    void jjtreeOpenNodeScope(Node n) {
        ((AbstractNode) n).setFirstToken(getToken(1));
    }

    void jjtreeCloseNodeScope(Node n) {
        ((AbstractNode) n).setLastToken(getToken(0));
    }

//<IN_LITERAL_TEXT>
//TOKEN :
//{
//    <PURE_LITERAL_TEXT: ( ~[ "|"] | "|" ~[ "|" ] | "||" ~[ "]" ] )>
//}

// overall document structure
  final public Node parse(String filename) throws ParseException {
 /*@bgen(jjtree) Root */
    ParsedRoot jjtn000 = new ParsedRoot(JJTROOT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);fun.runtime.SiteBuilder.log("Parsing " + filename + "...");
    try {
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SITE:
          SiteStatement();
          break;
        case CORE:
          CoreStatement();
          break;
        default:
          jj_la1[0] = jj_gen;
          if (jj_2_1(2147483647)) {
            DomainStatement();
          } else {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case LCODE:
            case LEMBEDCODE:
              DefaultStatement();
              break;
            default:
              jj_la1[1] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CORE:
        case SITE:
        case IDENTIFIER:
        case LCODE:
        case LEMBEDCODE:
          ;
          break;
        default:
          jj_la1[2] = jj_gen;
          break label_1;
        }
      }
      jj_consume_token(0);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
        fun.runtime.SiteBuilder.log("Parsing completed.");
        {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

// pure static text is all the text up to but not including the next box delimiter
  final public Node StaticText() throws ParseException {
 /*@bgen(jjtree) StaticText */
  ParsedStaticText jjtn000 = new ParsedStaticText(JJTSTATICTEXT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
  String str;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STATIC_1:
      case STATIC_2:
      case STATIC_3:
      case STATIC_4:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case STATIC_1:
          t = jj_consume_token(STATIC_1);
          break;
        case STATIC_2:
          t = jj_consume_token(STATIC_2);
          break;
        case STATIC_3:
          t = jj_consume_token(STATIC_3);
          break;
        case STATIC_4:
          t = jj_consume_token(STATIC_4);
          break;
        default:
          jj_la1[3] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
            // chop off box delimiter which is part of the token due to the
            // lex logic (see <IN_STATIC_TEXT>)
            str = t.image.substring(0, t.image.length() - 2);
            jjtn000.setText(str);
        break;
      case STATIC_5:
        t = jj_consume_token(STATIC_5);
            // we have a |], which means preserve trailing whitespace 
            str = t.image.substring(0, t.image.length() - 2);
            jjtn000.setText(str);
            jjtn000.setPreserveTrailing(true);
        break;
      case STATIC_0:
        t = jj_consume_token(STATIC_0);
            str = t.image.substring(0, t.image.length() - 3);
            jjtn000.setText(str);
            jjtn000.setPreserveLeading(true);
            jjtn000.setPreserveTrailing(true);
        break;
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
        {if (true) return jjtn000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

// leading static text is static text with leading whitespace preserved
  final public void LeadingStaticText() throws ParseException {
 /*@bgen(jjtree) StaticText */
  ParsedStaticText jjtn000 = new ParsedStaticText(JJTSTATICTEXT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
  String str;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STATIC_1:
      case STATIC_2:
      case STATIC_3:
      case STATIC_4:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case STATIC_1:
          t = jj_consume_token(STATIC_1);
          break;
        case STATIC_2:
          t = jj_consume_token(STATIC_2);
          break;
        case STATIC_3:
          t = jj_consume_token(STATIC_3);
          break;
        case STATIC_4:
          t = jj_consume_token(STATIC_4);
          break;
        default:
          jj_la1[5] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
                                                                          jjtree.closeNodeScope(jjtn000, true);
                                                                          jjtc000 = false;
            // chop off box delimiter which is part of the token due to the
            // lex logic (see <IN_STATIC_TEXT>)
            str = t.image.substring(0, t.image.length() - 2);
            jjtn000.setText(str);
            jjtn000.setPreserveLeading(true);
        break;
      case STATIC_5:
        t = jj_consume_token(STATIC_5);
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
            // we have a |], which means preserve trailing whitespace 
            str = t.image.substring(0, t.image.length() - 2);
            jjtn000.setText(str);
            jjtn000.setPreserveLeading(true);
            jjtn000.setPreserveTrailing(true);
        break;
      case STATIC_0:
        t = jj_consume_token(STATIC_0);
                        jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
            str = t.image.substring(0, t.image.length() - 3);
            jjtn000.setText(str);
            jjtn000.setPreserveLeading(true);
        break;
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

// literal static text is all the text up to but not including the closing literal text delimiter
  final public void LiteralText() throws ParseException {
 /*@bgen(jjtree) LiteralText */
  ParsedLiteralText jjtn000 = new ParsedLiteralText(JJTLITERALTEXT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(LITERAL_1);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
        // chop off box delimiter which is part of the token due to the
        // lex logic (see <IN_LITERAL_TEXT>)
        String str = t.image.substring(0, t.image.length() - 3);
        jjtn000.setText(str);
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void SiteStatement() throws ParseException {
 /*@bgen(jjtree) SiteStatement */
  ParsedSiteStatement jjtn000 = new ParsedSiteStatement(JJTSITESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(SITE);
      Name();
      SiteBlock();
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void CoreStatement() throws ParseException {
 /*@bgen(jjtree) CoreStatement */
  ParsedCoreStatement jjtn000 = new ParsedCoreStatement(JJTCORESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(CORE);
      SiteBlock();
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void DomainStatement() throws ParseException {
 /*@bgen(jjtree) SiteStatement */
  ParsedSiteStatement jjtn000 = new ParsedSiteStatement(JJTSITESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Name();
      Name();
      SiteBlock();
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void DefaultStatement() throws ParseException {
 /*@bgen(jjtree) DefaultStatement */
  ParsedDefaultStatement jjtn000 = new ParsedDefaultStatement(JJTDEFAULTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      SiteBlock();
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

//
// Site level directives, which can only appear at the start of site and core blocks
//
  final public void Directive() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EXTERN:
      ExternStatement();
      break;
    case ADOPT:
      AdoptStatement();
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void ExternStatement() throws ParseException {
 /*@bgen(jjtree) ExternStatement */
  ParsedExternStatement jjtn000 = new ParsedExternStatement(JJTEXTERNSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t = null;
    try {
      jj_consume_token(EXTERN);
      t = jj_consume_token(IDENTIFIER);
                                 jjtn000.setBinding(t.image);
      NameRange();
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void AdoptStatement() throws ParseException {
 /*@bgen(jjtree) AdoptStatement */
  ParsedAdoptStatement jjtn000 = new ParsedAdoptStatement(JJTADOPTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(ADOPT);
      NameRange();
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public KeepStatement KeepPrefix() throws ParseException {
 /*@bgen(jjtree) KeepStatement */
  ParsedKeepStatement jjtn000 = new ParsedKeepStatement(JJTKEEPSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(KEEP);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AS:
      case BY:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case AS:
          jj_consume_token(AS);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case IDENTIFIER:
            TypeName();
                            jjtn000.setHasAs(true);
            break;
          case THIS:
            jj_consume_token(THIS);
                                                                 jjtn000.setHasAsThis(true);
            break;
          default:
            jj_la1[8] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        case BY:
          jj_consume_token(BY);
          TypeName();
                          jjtn000.setHasBy(true);
          break;
        default:
          jj_la1[9] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[10] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IN:
        jj_consume_token(IN);
        InstanceExpression();
        break;
      default:
        jj_la1[11] = jj_gen;
        ;
      }
      jj_consume_token(COLON);
          jjtn000.setIsPrefix(true);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
        jjtn000.setPersist(true);
        {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public void RedirectStatement() throws ParseException {
 /*@bgen(jjtree) RedirectStatement */
  ParsedRedirectStatement jjtn000 = new ParsedRedirectStatement(JJTREDIRECTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(REDIRECT);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
        jj_consume_token(LPAREN);
        ValueInstanceExpression();
        jj_consume_token(RPAREN);
                                             jjtn000.setDynamic(true);
        break;
      default:
        jj_la1[12] = jj_gen;
        if (jj_2_2(2147483647)) {
          Instance();
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case CONTAINER:
          case COUNT:
          case DEF:
          case KEYS:
          case NEXT:
          case OWNER:
          case SOURCE:
          case SUB:
          case SUPER:
          case THIS:
          case CORE:
          case SITE:
          case HERE:
          case TYPE:
          case IDENTIFIER:
            ComplexName();
            break;
          default:
            jj_la1[13] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SEMICOLON:
        jj_consume_token(SEMICOLON);
        break;
      default:
        jj_la1[14] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void ContinueStatement() throws ParseException {
 /*@bgen(jjtree) ContinueStatement */
  ParsedContinueStatement jjtn000 = new ParsedContinueStatement(JJTCONTINUESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(CONTINUE);
      InstanceExpression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SEMICOLON:
        jj_consume_token(SEMICOLON);
        break;
      default:
        jj_la1[15] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

// two kinds of blocks, static and code, with special notation for null blocks
  final public void Block() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LSTATIC:
    case LSTATICW:
    case LLITERAL:
      StaticBlock();
      break;
    case LCODE:
    case LEMBEDCODE:
    case LCONCURRENT:
      CodeBlock();
      break;
    case NULL_BLOCK:
    case ABSTRACT_NULL:
      NullBlock();
      break;
    default:
      jj_la1[16] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

// code blocks can be normal, concurrent or dynamically generated
  final public void CodeBlock() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LCODE:
    case LEMBEDCODE:
      FunBlock();
      break;
    case LCONCURRENT:
      ConcurrentFunBlock();
      break;
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

// static blocks can have embedded blocks
  final public Block StaticBlock() throws ParseException {
 /*@bgen(jjtree) StaticBlock */
    ParsedStaticBlock jjtn000 = new ParsedStaticBlock(JJTSTATICBLOCK);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Block catchBlock;
    try {
      if (jj_2_3(2)) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LSTATIC:
          jj_consume_token(LSTATIC);
          break;
        case LSTATICW:
          jj_consume_token(LSTATICW);
          break;
        default:
          jj_la1[18] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case RSTATIC:
          jj_consume_token(RSTATIC);
          break;
        case RSTATICW:
          jj_consume_token(RSTATICW);
          break;
        default:
          jj_la1[19] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LSTATIC:
          jj_consume_token(LSTATIC);
          label_2:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case STATIC_0:
            case STATIC_1:
            case STATIC_2:
            case STATIC_3:
            case STATIC_4:
            case STATIC_5:
              StaticText();
              break;
            case LSTATIC:
            case LSTATICW:
            case LLITERAL:
            case LCODE:
            case LEMBEDCODE:
            case LCONCURRENT:
            case NULL_BLOCK:
            case ABSTRACT_NULL:
              Block();
              break;
            default:
              jj_la1[20] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case LSTATIC:
            case LSTATICW:
            case LLITERAL:
            case LCODE:
            case LEMBEDCODE:
            case LCONCURRENT:
            case NULL_BLOCK:
            case ABSTRACT_NULL:
            case STATIC_0:
            case STATIC_1:
            case STATIC_2:
            case STATIC_3:
            case STATIC_4:
            case STATIC_5:
              ;
              break;
            default:
              jj_la1[21] = jj_gen;
              break label_2;
            }
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case RSTATIC:
            jj_consume_token(RSTATIC);
            break;
          case RSTATICW:
            jj_consume_token(RSTATICW);
            break;
          default:
            jj_la1[22] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case CATCH:
            catchBlock = CatchBlock();
                                                                                   jjtn000.setCatch(catchBlock);
            break;
          default:
            jj_la1[23] = jj_gen;
            ;
          }
          break;
        case LSTATICW:
          jj_consume_token(LSTATICW);
          LeadingStaticText();
          label_3:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case LSTATIC:
            case LSTATICW:
            case LLITERAL:
            case LCODE:
            case LEMBEDCODE:
            case LCONCURRENT:
            case NULL_BLOCK:
            case ABSTRACT_NULL:
            case STATIC_0:
            case STATIC_1:
            case STATIC_2:
            case STATIC_3:
            case STATIC_4:
            case STATIC_5:
              ;
              break;
            default:
              jj_la1[24] = jj_gen;
              break label_3;
            }
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case STATIC_0:
            case STATIC_1:
            case STATIC_2:
            case STATIC_3:
            case STATIC_4:
            case STATIC_5:
              StaticText();
              break;
            case LSTATIC:
            case LSTATICW:
            case LLITERAL:
            case LCODE:
            case LEMBEDCODE:
            case LCONCURRENT:
            case NULL_BLOCK:
            case ABSTRACT_NULL:
              Block();
              break;
            default:
              jj_la1[25] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case RSTATIC:
            jj_consume_token(RSTATIC);
            break;
          case RSTATICW:
            jj_consume_token(RSTATICW);
            break;
          default:
            jj_la1[26] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case CATCH:
            catchBlock = CatchBlock();
                                                                                                        jjtn000.setCatch(catchBlock);
            break;
          default:
            jj_la1[27] = jj_gen;
            ;
          }
          break;
        case LLITERAL:
          jj_consume_token(LLITERAL);
          LiteralText();
          jj_consume_token(RLITERAL);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case CATCH:
            catchBlock = CatchBlock();
                                                              jjtn000.setCatch(catchBlock);
            break;
          default:
            jj_la1[28] = jj_gen;
            ;
          }
          break;
        default:
          jj_la1[29] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
        {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public Block FunBlock() throws ParseException {
 /*@bgen(jjtree) FunBlock */
    ParsedFunBlock jjtn000 = new ParsedFunBlock(JJTFUNBLOCK);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Block catchBlock;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LCODE:
        jj_consume_token(LCODE);
        label_4:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case CONTAINER:
          case COUNT:
          case DEF:
          case KEYS:
          case NEXT:
          case OWNER:
          case SOURCE:
          case SUB:
          case SUPER:
          case THIS:
          case CORE:
          case SITE:
          case CONTINUE:
          case DYNAMIC:
          case FOR:
          case GLOBAL:
          case HERE:
          case IF:
          case KEEP:
          case LOCAL:
          case PUBLIC:
          case REDIRECT:
          case STATIC:
          case TYPE:
          case WITH:
          case WITHOUT:
          case BOOLEAN:
          case BYTE:
          case CHAR:
          case DOUBLE:
          case FLOAT:
          case INT:
          case LONG:
          case NUMBER:
          case SHORT:
          case STRING:
          case VOID:
          case FALSE:
          case NULL:
          case TRUE:
          case INTEGER_LITERAL:
          case FLOATING_POINT_LITERAL:
          case CHAR_LITERAL:
          case SQ_STRING_LITERAL:
          case DQ_STRING_LITERAL:
          case IDENTIFIER:
          case LSTATIC:
          case LSTATICW:
          case LLITERAL:
          case LCODE:
          case LEMBEDCODE:
          case LCONCURRENT:
          case LPAREN:
          case NULL_BLOCK:
          case ABSTRACT_NULL:
          case CONTEXT:
            ;
            break;
          default:
            jj_la1[30] = jj_gen;
            break label_4;
          }
          DeepStatement();
        }
        jj_consume_token(RCODE);
        break;
      case LEMBEDCODE:
        jj_consume_token(LEMBEDCODE);
        label_5:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case CONTAINER:
          case COUNT:
          case DEF:
          case KEYS:
          case NEXT:
          case OWNER:
          case SOURCE:
          case SUB:
          case SUPER:
          case THIS:
          case CORE:
          case SITE:
          case CONTINUE:
          case DYNAMIC:
          case FOR:
          case GLOBAL:
          case HERE:
          case IF:
          case KEEP:
          case LOCAL:
          case PUBLIC:
          case REDIRECT:
          case STATIC:
          case TYPE:
          case WITH:
          case WITHOUT:
          case BOOLEAN:
          case BYTE:
          case CHAR:
          case DOUBLE:
          case FLOAT:
          case INT:
          case LONG:
          case NUMBER:
          case SHORT:
          case STRING:
          case VOID:
          case FALSE:
          case NULL:
          case TRUE:
          case INTEGER_LITERAL:
          case FLOATING_POINT_LITERAL:
          case CHAR_LITERAL:
          case SQ_STRING_LITERAL:
          case DQ_STRING_LITERAL:
          case IDENTIFIER:
          case LSTATIC:
          case LSTATICW:
          case LLITERAL:
          case LCODE:
          case LEMBEDCODE:
          case LCONCURRENT:
          case LPAREN:
          case NULL_BLOCK:
          case ABSTRACT_NULL:
          case CONTEXT:
            ;
            break;
          default:
            jj_la1[31] = jj_gen;
            break label_5;
          }
          DeepStatement();
        }
        jj_consume_token(REMBEDCODE);
        break;
      default:
        jj_la1[32] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CATCH:
        catchBlock = CatchBlock();
                                  jjtn000.setCatch(catchBlock);
        break;
      default:
        jj_la1[33] = jj_gen;
        ;
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
        {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public Block EmbeddedFunBlock() throws ParseException {
 /*@bgen(jjtree) FunBlock */
    ParsedFunBlock jjtn000 = new ParsedFunBlock(JJTFUNBLOCK);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Block catchBlock;
    try {
      jj_consume_token(LEMBEDCODE);
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CONTAINER:
        case COUNT:
        case DEF:
        case KEYS:
        case NEXT:
        case OWNER:
        case SOURCE:
        case SUB:
        case SUPER:
        case THIS:
        case CORE:
        case SITE:
        case CONTINUE:
        case DYNAMIC:
        case FOR:
        case GLOBAL:
        case HERE:
        case IF:
        case KEEP:
        case LOCAL:
        case PUBLIC:
        case REDIRECT:
        case STATIC:
        case TYPE:
        case WITH:
        case WITHOUT:
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case DOUBLE:
        case FLOAT:
        case INT:
        case LONG:
        case NUMBER:
        case SHORT:
        case STRING:
        case VOID:
        case FALSE:
        case NULL:
        case TRUE:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHAR_LITERAL:
        case SQ_STRING_LITERAL:
        case DQ_STRING_LITERAL:
        case IDENTIFIER:
        case LSTATIC:
        case LSTATICW:
        case LLITERAL:
        case LCODE:
        case LEMBEDCODE:
        case LCONCURRENT:
        case LPAREN:
        case NULL_BLOCK:
        case ABSTRACT_NULL:
        case CONTEXT:
          ;
          break;
        default:
          jj_la1[34] = jj_gen;
          break label_6;
        }
        DeepStatement();
      }
      jj_consume_token(REMBEDCODE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CATCH:
        catchBlock = CatchBlock();
                                  jjtn000.setCatch(catchBlock);
        break;
      default:
        jj_la1[35] = jj_gen;
        ;
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
        {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public FunBlock generateFunBlock() throws ParseException {
 /*@bgen(jjtree) FunBlock */
  ParsedFunBlock jjtn000 = new ParsedFunBlock(JJTFUNBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CONTAINER:
        case COUNT:
        case DEF:
        case KEYS:
        case NEXT:
        case OWNER:
        case SOURCE:
        case SUB:
        case SUPER:
        case THIS:
        case CORE:
        case SITE:
        case CONTINUE:
        case DYNAMIC:
        case FOR:
        case GLOBAL:
        case HERE:
        case IF:
        case KEEP:
        case LOCAL:
        case PUBLIC:
        case REDIRECT:
        case STATIC:
        case TYPE:
        case WITH:
        case WITHOUT:
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case DOUBLE:
        case FLOAT:
        case INT:
        case LONG:
        case NUMBER:
        case SHORT:
        case STRING:
        case VOID:
        case FALSE:
        case NULL:
        case TRUE:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHAR_LITERAL:
        case SQ_STRING_LITERAL:
        case DQ_STRING_LITERAL:
        case IDENTIFIER:
        case LSTATIC:
        case LSTATICW:
        case LLITERAL:
        case LCODE:
        case LEMBEDCODE:
        case LCONCURRENT:
        case LPAREN:
        case NULL_BLOCK:
        case ABSTRACT_NULL:
        case CONTEXT:
          ;
          break;
        default:
          jj_la1[36] = jj_gen;
          break label_7;
        }
        DeepStatement();
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
        {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public Block CatchBlock() throws ParseException {
    Block block = null;
    Name redirName = null;
    jj_consume_token(CATCH);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CONTAINER:
    case COUNT:
    case DEF:
    case KEYS:
    case NEXT:
    case OWNER:
    case SOURCE:
    case SUB:
    case SUPER:
    case THIS:
    case CORE:
    case SITE:
    case HERE:
    case TYPE:
    case IDENTIFIER:
      redirName = parseComplexName();
      break;
    default:
      jj_la1[37] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LSTATIC:
    case LSTATICW:
    case LLITERAL:
      block = StaticBlock();
      break;
    case LCODE:
    case LEMBEDCODE:
      block = FunBlock();
      break;
    case NULL_BLOCK:
    case ABSTRACT_NULL:
      NullBlock();
      break;
    default:
      jj_la1[38] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
        if (redirName != null) {
            block.setCatchIdentifier(redirName);
        }
        {if (true) return block;}
    throw new Error("Missing return statement in function");
  }

  final public Block ConcurrentFunBlock() throws ParseException {
 /*@bgen(jjtree) ConcurrentFunBlock */
    ParsedConcurrentFunBlock jjtn000 = new ParsedConcurrentFunBlock(JJTCONCURRENTFUNBLOCK);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Block catchBlock;
    try {
      jj_consume_token(LCONCURRENT);
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CONTAINER:
        case COUNT:
        case DEF:
        case KEYS:
        case NEXT:
        case OWNER:
        case SOURCE:
        case SUB:
        case SUPER:
        case THIS:
        case CORE:
        case SITE:
        case CONTINUE:
        case DYNAMIC:
        case FOR:
        case GLOBAL:
        case HERE:
        case IF:
        case KEEP:
        case LOCAL:
        case PUBLIC:
        case REDIRECT:
        case STATIC:
        case TYPE:
        case WITH:
        case WITHOUT:
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case DOUBLE:
        case FLOAT:
        case INT:
        case LONG:
        case NUMBER:
        case SHORT:
        case STRING:
        case VOID:
        case FALSE:
        case NULL:
        case TRUE:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHAR_LITERAL:
        case SQ_STRING_LITERAL:
        case DQ_STRING_LITERAL:
        case IDENTIFIER:
        case LSTATIC:
        case LSTATICW:
        case LLITERAL:
        case LCODE:
        case LEMBEDCODE:
        case LCONCURRENT:
        case LPAREN:
        case NULL_BLOCK:
        case ABSTRACT_NULL:
        case CONTEXT:
          ;
          break;
        default:
          jj_la1[39] = jj_gen;
          break label_8;
        }
        DeepStatement();
      }
      jj_consume_token(RCONCURRENT);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CATCH:
        catchBlock = CatchBlock();
                                                                  jjtn000.setCatch(catchBlock);
        break;
      default:
        jj_la1[40] = jj_gen;
        ;
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
        {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

// site blocks are fun blocks in site or core statements; they allow directives
  final public void SiteBlock() throws ParseException {
 /*@bgen(jjtree) FunBlock */
  ParsedFunBlock jjtn000 = new ParsedFunBlock(JJTFUNBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LCODE:
        jj_consume_token(LCODE);
        label_9:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ADOPT:
          case EXTERN:
            ;
            break;
          default:
            jj_la1[41] = jj_gen;
            break label_9;
          }
          Directive();
        }
        label_10:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case THIS:
          case SITE:
          case DYNAMIC:
          case GLOBAL:
          case KEEP:
          case LOCAL:
          case PUBLIC:
          case STATIC:
          case BOOLEAN:
          case BYTE:
          case CHAR:
          case DOUBLE:
          case FLOAT:
          case INT:
          case LONG:
          case NUMBER:
          case SHORT:
          case STRING:
          case VOID:
          case IDENTIFIER:
          case CONTEXT:
            ;
            break;
          default:
            jj_la1[42] = jj_gen;
            break label_10;
          }
          SiteLevelStatement();
        }
        jj_consume_token(RCODE);
        break;
      case LEMBEDCODE:
        jj_consume_token(LEMBEDCODE);
        label_11:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ADOPT:
          case EXTERN:
            ;
            break;
          default:
            jj_la1[43] = jj_gen;
            break label_11;
          }
          Directive();
        }
        label_12:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case THIS:
          case SITE:
          case DYNAMIC:
          case GLOBAL:
          case KEEP:
          case LOCAL:
          case PUBLIC:
          case STATIC:
          case BOOLEAN:
          case BYTE:
          case CHAR:
          case DOUBLE:
          case FLOAT:
          case INT:
          case LONG:
          case NUMBER:
          case SHORT:
          case STRING:
          case VOID:
          case IDENTIFIER:
          case CONTEXT:
            ;
            break;
          default:
            jj_la1[44] = jj_gen;
            break label_12;
          }
          SiteLevelStatement();
        }
        jj_consume_token(REMBEDCODE);
        break;
      default:
        jj_la1[45] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

// SiteLevelStatements are statements which may appear at the site level, including
// definitions, which may also appear below the site level, as well as extern and adopt
// directives, which can only appear at the site level.
  final public void SiteLevelStatement() throws ParseException {
    if (jj_2_4(2147483647)) {
      KeepPrefixedDefinition();
    } else if (jj_2_5(2147483647)) {
      SiteStatement();
    } else if (jj_2_6(2147483647)) {
      ModifiedExternalDefinition();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DYNAMIC:
      case GLOBAL:
      case LOCAL:
      case PUBLIC:
      case STATIC:
        ModifiedDefinition();
        break;
      default:
        jj_la1[46] = jj_gen;
        if (jj_2_7(2147483647)) {
          TypedOrNamedExternalDefinition(-1, -1);
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case THIS:
          case BOOLEAN:
          case BYTE:
          case CHAR:
          case DOUBLE:
          case FLOAT:
          case INT:
          case LONG:
          case NUMBER:
          case SHORT:
          case STRING:
          case VOID:
          case IDENTIFIER:
          case CONTEXT:
            TypedOrNamedDefinition();
            break;
          default:
            jj_la1[47] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    }
  }

  final public void KeepPrefixedDefinition() throws ParseException {
    KeepStatement keep;
    Scoped def;
    keep = KeepPrefix();
    if (jj_2_8(2147483647)) {
      def = ModifiedExternalDefinition();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DYNAMIC:
      case GLOBAL:
      case LOCAL:
      case PUBLIC:
      case STATIC:
        def = ModifiedDefinition();
        break;
      default:
        jj_la1[48] = jj_gen;
        if (jj_2_9(2147483647)) {
          def = TypedOrNamedExternalDefinition(-1, -1);
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case THIS:
          case BOOLEAN:
          case BYTE:
          case CHAR:
          case DOUBLE:
          case FLOAT:
          case INT:
          case LONG:
          case NUMBER:
          case SHORT:
          case STRING:
          case VOID:
          case IDENTIFIER:
          case CONTEXT:
            def = TypedOrNamedDefinition();
            break;
          default:
            jj_la1[49] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    }
        keep.setDefName(def.getDefName());
  }

// DeepStatements are statements which may appear below the site level, including
// directives and definitions, which may appear at the site level as well, and
// constructions and logic, which can only appear below the site level.
  final public void DeepStatement() throws ParseException {
    if (jj_2_10(2147483647)) {
      KeepPrefixedDefinition();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CONTINUE:
      case FOR:
      case IF:
      case REDIRECT:
      case WITH:
      case WITHOUT:
        FunExpression();
        break;
      default:
        jj_la1[50] = jj_gen;
        if (jj_2_11(2147483647)) {
          ModifiedExternalDefinition();
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case DYNAMIC:
          case GLOBAL:
          case LOCAL:
          case PUBLIC:
          case STATIC:
            ModifiedDefinition();
            break;
          case FALSE:
          case NULL:
          case TRUE:
          case INTEGER_LITERAL:
          case FLOATING_POINT_LITERAL:
          case CHAR_LITERAL:
          case SQ_STRING_LITERAL:
          case DQ_STRING_LITERAL:
          case LSTATIC:
          case LSTATICW:
          case LLITERAL:
          case LCODE:
          case LEMBEDCODE:
          case LCONCURRENT:
          case LPAREN:
          case NULL_BLOCK:
          case ABSTRACT_NULL:
            AnonymousConstruction();
            break;
          default:
            jj_la1[51] = jj_gen;
            if (jj_2_12(2147483647)) {
              SubConstruction();
            } else if (jj_2_13(2147483647)) {
              SuperConstruction();
            } else if (jj_2_14(2147483647)) {
              NextConstruction();
            } else {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case CONTAINER:
              case COUNT:
              case DEF:
              case KEYS:
              case NEXT:
              case OWNER:
              case SOURCE:
              case SUB:
              case SUPER:
              case THIS:
              case CORE:
              case SITE:
              case HERE:
              case TYPE:
              case BOOLEAN:
              case BYTE:
              case CHAR:
              case DOUBLE:
              case FLOAT:
              case INT:
              case LONG:
              case NUMBER:
              case SHORT:
              case STRING:
              case VOID:
              case IDENTIFIER:
              case CONTEXT:
                NamedExpression();
                break;
              default:
                jj_la1[52] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
              }
            }
          }
        }
      }
    }
  }

  final public void NamedExpression() throws ParseException {
    if (jj_2_15(2147483647)) {
      TypedOrNamedExternalDefinition(-1, -1);
    } else if (jj_2_16(2147483647)) {
      TypedDefinition();
    } else if (jj_2_17(2147483647)) {
      NamedDefinition();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CONTAINER:
      case COUNT:
      case DEF:
      case KEYS:
      case NEXT:
      case OWNER:
      case SOURCE:
      case SUB:
      case SUPER:
      case THIS:
      case CORE:
      case SITE:
      case HERE:
      case TYPE:
      case IDENTIFIER:
        NamedConstruction();
        break;
      default:
        jj_la1[53] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

//
// Definitions
//
  final public void Definition() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LSTATIC:
    case LSTATICW:
    case LLITERAL:
    case LCODE:
    case LEMBEDCODE:
    case LCONCURRENT:
    case LPAREN:
    case NULL_BLOCK:
    case ABSTRACT_NULL:
      AnonymousDefinition();
      break;
    default:
      jj_la1[54] = jj_gen;
      if (jj_2_18(2147483647)) {
        TypedDefinition();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
          NamedDefinition();
          break;
        default:
          jj_la1[55] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
  }

  final public Scoped ModifiedDefinition() throws ParseException {
  Scoped def;
  int access = Definition.SITE_ACCESS;
  int dur = Definition.IN_CONTEXT;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LOCAL:
    case PUBLIC:
      access = AccessModifier();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DYNAMIC:
      case GLOBAL:
      case STATIC:
        dur = DurabilityModifier();
        break;
      default:
        jj_la1[56] = jj_gen;
        ;
      }
      def = TypedOrNamedDefinition();
      break;
    case DYNAMIC:
    case GLOBAL:
    case STATIC:
      dur = DurabilityModifier();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LOCAL:
      case PUBLIC:
        access = AccessModifier();
        break;
      default:
        jj_la1[57] = jj_gen;
        ;
      }
      def = TypedOrNamedDefinition();
      break;
    default:
      jj_la1[58] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
        def.setModifiers(access, dur);
        {if (true) return def;}
    throw new Error("Missing return statement in function");
  }

  final public Scoped TypedOrNamedDefinition() throws ParseException {
  Scoped def;
    if (jj_2_19(2147483647)) {
      def = TypedDefinition();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        def = NamedDefinition();
        break;
      default:
        jj_la1[59] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
      {if (true) return def;}
    throw new Error("Missing return statement in function");
  }

  final public Scoped ModifiedExternalDefinition() throws ParseException {
  Scoped def;
  int access = Definition.SITE_ACCESS;
  int dur = Definition.IN_CONTEXT;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LOCAL:
    case PUBLIC:
      access = AccessModifier();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DYNAMIC:
      case GLOBAL:
      case STATIC:
        dur = DurabilityModifier();
        break;
      default:
        jj_la1[60] = jj_gen;
        ;
      }
      def = TypedOrNamedExternalDefinition(access, dur);
      break;
    case DYNAMIC:
    case GLOBAL:
    case STATIC:
      dur = DurabilityModifier();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LOCAL:
      case PUBLIC:
        access = AccessModifier();
        break;
      default:
        jj_la1[61] = jj_gen;
        ;
      }
      def = TypedOrNamedExternalDefinition(access, dur);
      break;
    default:
      jj_la1[62] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
        def.setModifiers(access, dur);
        {if (true) return def;}
    throw new Error("Missing return statement in function");
  }

  final public void TypedOrNamedExternalDefinitionLookahead() throws ParseException {
    if (jj_2_20(2147483647)) {
      NameComponent();
    } else if (jj_2_21(2147483647)) {
      NameComponent();
    } else if (jj_2_22(2147483647)) {
      NameComponent();
    } else if (jj_2_23(2147483647)) {
      NameComponent();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public Scoped TypedOrNamedExternalDefinition(int access, int dur) throws ParseException {
  Scoped def;
    if (jj_2_24(2147483647)) {
      def = ExternalDefinition(access, dur);
    } else if (jj_2_25(2147483647)) {
      def = ExternalTypedCollectionDefinition(access, dur);
    } else if (jj_2_26(2147483647)) {
      def = ExternalTypedDefinition(access, dur);
    } else if (jj_2_27(2147483647)) {
      def = ExternalCollectionDefinition(access, dur);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
        {if (true) return def;}
    throw new Error("Missing return statement in function");
  }

  final public Scoped ExternalCollectionDefinition(int access, int dur) throws ParseException {
 /*@bgen(jjtree) ExternalCollectionDefinition */
  ParsedExternalCollectionDefinition jjtn000 = new ParsedExternalCollectionDefinition(JJTEXTERNALCOLLECTIONDEFINITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
        if (access >= 0) {
            jjtn000.setModifiers(access, dur);
        }
      DefCollectionName();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASSIGN:
        jj_consume_token(ASSIGN);
        break;
      default:
        jj_la1[63] = jj_gen;
        ;
      }
      jj_consume_token(EXTERNAL_BLOCK);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
        {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public Scoped ExternalDefinition(int access, int dur) throws ParseException {
 /*@bgen(jjtree) ExternalDefinition */
  ParsedExternalDefinition jjtn000 = new ParsedExternalDefinition(JJTEXTERNALDEFINITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
        if (access >= 0) {
            jjtn000.setModifiers(access, dur);
        }
      DefTypeName();
      jj_consume_token(EXTERNAL_BLOCK);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
        {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public Scoped ExternalTypedCollectionDefinition(int access, int dur) throws ParseException {
 /*@bgen(jjtree) ExternalCollectionDefinition */
  ParsedExternalCollectionDefinition jjtn000 = new ParsedExternalCollectionDefinition(JJTEXTERNALCOLLECTIONDEFINITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
        if (access >= 0) {
            jjtn000.setModifiers(access, dur);
        }
      if (jj_2_28(2147483647)) {
        CollectionType();
        DefTypeName();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case THIS:
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case DOUBLE:
        case FLOAT:
        case INT:
        case LONG:
        case NUMBER:
        case SHORT:
        case STRING:
        case VOID:
        case IDENTIFIER:
        case CONTEXT:
          StandardType();
          DefCollectionName();
          break;
        default:
          jj_la1[64] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASSIGN:
        jj_consume_token(ASSIGN);
        break;
      default:
        jj_la1[65] = jj_gen;
        ;
      }
      jj_consume_token(EXTERNAL_BLOCK);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
        {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public Scoped ExternalTypedDefinition(int access, int dur) throws ParseException {
 /*@bgen(jjtree) ExternalDefinition */
  ParsedExternalDefinition jjtn000 = new ParsedExternalDefinition(JJTEXTERNALDEFINITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
        if (access >= 0) {
            jjtn000.setModifiers(access, dur);
        }
      SuperType();
      DefTypeName();
      jj_consume_token(EXTERNAL_BLOCK);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
        {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public void AnonymousDefinition() throws ParseException {
 /*@bgen(jjtree) AnonymousDefinition */
  ParsedAnonymousDefinition jjtn000 = new ParsedAnonymousDefinition(JJTANONYMOUSDEFINITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
        ParameterList();
        label_13:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[66] = jj_gen;
            break label_13;
          }
          jj_consume_token(COMMA);
          ParameterList();
        }
        break;
      default:
        jj_la1[67] = jj_gen;
        ;
      }
      Block();
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public Scoped NamedDefinition() throws ParseException {
  Scoped def;
    if (jj_2_29(2147483647)) {
      def = CollectionDefinition();
    } else if (jj_2_30(2147483647)) {
      def = ElementDefinition();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        def = ComplexDefinition();
        break;
      default:
        jj_la1[68] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
        {if (true) return def;}
    throw new Error("Missing return statement in function");
  }

  final public void TypedDefinitionLookahead() throws ParseException {
    if (jj_2_31(2147483647)) {
      NameComponent();
    } else if (jj_2_32(2147483647)) {
      NameComponent();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public Scoped TypedDefinition() throws ParseException {
  Scoped def;
    if (jj_2_33(2147483647)) {
      def = TypedCollectionDefinition();
    } else if (jj_2_34(2147483647)) {
      def = TypedElementDefinition();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case THIS:
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FLOAT:
      case INT:
      case LONG:
      case NUMBER:
      case SHORT:
      case STRING:
      case VOID:
      case IDENTIFIER:
      case CONTEXT:
        def = TypedComplexDefinition();
        break;
      default:
        jj_la1[69] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
        {if (true) return def;}
    throw new Error("Missing return statement in function");
  }

  final public Scoped CollectionDefinition() throws ParseException {
 /*@bgen(jjtree) CollectionDefinition */
  ParsedCollectionDefinition jjtn000 = new ParsedCollectionDefinition(JJTCOLLECTIONDEFINITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_35(2147483647)) {
        DefCollectionName();
        jj_consume_token(ASSIGN);
        ArrayInitExpression();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SEMICOLON:
          jj_consume_token(SEMICOLON);
          break;
        default:
          jj_la1[70] = jj_gen;
          ;
        }
                                                              jjtn000.setIsTable(false);
      } else if (jj_2_36(2147483647)) {
        DefCollectionName();
        jj_consume_token(ASSIGN);
        TableInitExpression();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SEMICOLON:
          jj_consume_token(SEMICOLON);
          break;
        default:
          jj_la1[71] = jj_gen;
          ;
        }
                                                              jjtn000.setIsTable(true);
      } else if (jj_2_37(2147483647)) {
        DefTypeName();
        jj_consume_token(ASSIGN);
        ArrayInitExpression();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SEMICOLON:
          jj_consume_token(SEMICOLON);
          break;
        default:
          jj_la1[72] = jj_gen;
          ;
        }
                                                        jjtn000.setIsTable(false);
      } else if (jj_2_38(2147483647)) {
        DefTypeName();
        jj_consume_token(ASSIGN);
        TableInitExpression();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SEMICOLON:
          jj_consume_token(SEMICOLON);
          break;
        default:
          jj_la1[73] = jj_gen;
          ;
        }
                                                        jjtn000.setIsTable(true);
      } else if (jj_2_39(2147483647)) {
        DefTypeName();
        label_14:
        while (true) {
          IndefiniteDim();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ARRAYTYPE:
          case TABLETYPE:
            ;
            break;
          default:
            jj_la1[74] = jj_gen;
            break label_14;
          }
        }
        jj_consume_token(ASSIGN);
        ValueInstanceExpression();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SEMICOLON:
          jj_consume_token(SEMICOLON);
          break;
        default:
          jj_la1[75] = jj_gen;
          ;
        }
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
        {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public Scoped ComplexDefinition() throws ParseException {
 /*@bgen(jjtree) ComplexDefinition */
  ParsedComplexDefinition jjtn000 = new ParsedComplexDefinition(JJTCOMPLEXDEFINITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_40(2)) {
        DefElementName();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
          DefTypeName();
          break;
        default:
          jj_la1[76] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      Block();
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
        {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public Scoped ElementDefinition() throws ParseException {
 /*@bgen(jjtree) ElementDefinition */
  ParsedElementDefinition jjtn000 = new ParsedElementDefinition(JJTELEMENTDEFINITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_41(2147483647)) {
        DefElementName();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
          DefTypeName();
          break;
        default:
          jj_la1[77] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jj_consume_token(ASSIGN);
      ElementExpression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SEMICOLON:
        jj_consume_token(SEMICOLON);
        break;
      default:
        jj_la1[78] = jj_gen;
        ;
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
        {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public Scoped TypedCollectionDefinition() throws ParseException {
 /*@bgen(jjtree) CollectionDefinition */
  ParsedCollectionDefinition jjtn000 = new ParsedCollectionDefinition(JJTCOLLECTIONDEFINITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_42(2147483647)) {
        CollectionType();
        DefCollectionName();
        jj_consume_token(ASSIGN);
        ArrayInitExpression();
                                                                       jjtn000.setIsTable(false);
      } else if (jj_2_43(2147483647)) {
        CollectionType();
        DefCollectionName();
        jj_consume_token(ASSIGN);
        TableInitExpression();
                                                                       jjtn000.setIsTable(true);
      } else if (jj_2_44(2147483647)) {
        IndefiniteCollectionType();
        DefTypeName();
        jj_consume_token(ASSIGN);
        ValueInstanceExpression();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SEMICOLON:
          jj_consume_token(SEMICOLON);
          break;
        default:
          jj_la1[79] = jj_gen;
          ;
        }
      } else if (jj_2_45(2147483647)) {
        IndefiniteCollectionType();
        DefTypeName();
        Block();
      } else if (jj_2_46(2147483647)) {
        CollectionType();
        DefTypeName();
        jj_consume_token(ASSIGN);
        ArrayInitExpression();
                                                                 jjtn000.setIsTable(false);
      } else if (jj_2_47(2147483647)) {
        CollectionType();
        DefTypeName();
        jj_consume_token(ASSIGN);
        TableInitExpression();
                                                                 jjtn000.setIsTable(true);
      } else if (jj_2_48(2147483647)) {
        SuperType();
        DefCollectionName();
        jj_consume_token(ASSIGN);
        ArrayInitExpression();
                                                                  jjtn000.setIsTable(false);
      } else if (jj_2_49(2147483647)) {
        SuperType();
        DefCollectionName();
        jj_consume_token(ASSIGN);
        TableInitExpression();
                                                                  jjtn000.setIsTable(true);
      } else if (jj_2_50(2147483647)) {
        SuperType();
        DefTypeName();
        jj_consume_token(ASSIGN);
        ArrayInitExpression();
                                                            jjtn000.setIsTable(false);
      } else if (jj_2_51(2147483647)) {
        SuperType();
        DefTypeName();
        jj_consume_token(ASSIGN);
        TableInitExpression();
                                                            jjtn000.setIsTable(true);
      } else if (jj_2_52(2147483647)) {
        SuperType();
        DefTypeName();
        label_15:
        while (true) {
          IndefiniteDim();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ARRAYTYPE:
          case TABLETYPE:
            ;
            break;
          default:
            jj_la1[80] = jj_gen;
            break label_15;
          }
        }
        jj_consume_token(ASSIGN);
        ValueInstanceExpression();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SEMICOLON:
          jj_consume_token(SEMICOLON);
          break;
        default:
          jj_la1[81] = jj_gen;
          ;
        }
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
        {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public void ArrayInitExpression() throws ParseException {
 /*@bgen(jjtree) #Arguments(> 0) */
  ParsedArguments jjtn000 = new ParsedArguments(JJTARGUMENTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ARRAYTYPE:
        jj_consume_token(ARRAYTYPE);
        break;
      default:
        jj_la1[85] = jj_gen;
        if (jj_2_57(2)) {
          jj_consume_token(LBRACKET);
          Ellipsis();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            jj_consume_token(COMMA);
            break;
          default:
            jj_la1[82] = jj_gen;
            ;
          }
          ArrayElementExpression();
          label_16:
          while (true) {
            if (jj_2_53(2)) {
              ;
            } else {
              break label_16;
            }
            jj_consume_token(COMMA);
            ArrayElementExpression();
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            jj_consume_token(COMMA);
            break;
          default:
            jj_la1[83] = jj_gen;
            ;
          }
          jj_consume_token(RBRACKET);
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LBRACKET:
            jj_consume_token(LBRACKET);
            ArrayElementExpression();
            label_17:
            while (true) {
              if (jj_2_54(2)) {
                ;
              } else {
                break label_17;
              }
              jj_consume_token(COMMA);
              ArrayElementExpression();
            }
            if (jj_2_56(2)) {
              jj_consume_token(COMMA);
              Ellipsis();
              label_18:
              while (true) {
                if (jj_2_55(2)) {
                  ;
                } else {
                  break label_18;
                }
                jj_consume_token(COMMA);
                ArrayElementExpression();
              }
            } else {
              ;
            }
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case COMMA:
              jj_consume_token(COMMA);
              break;
            default:
              jj_la1[84] = jj_gen;
              ;
            }
            jj_consume_token(RBRACKET);
            break;
          default:
            jj_la1[86] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
     jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 0);
     jjtc000 = false;
       jjtn000.setArray();
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 0);
     }
    }
  }

/** An ellipsis works like a super statement, except that it refers to a collection 
 *  rather than a definition.  When a collection is extended, by default the additional
 *  elements are added to the end of the collection.  But they can also be added before
 *  collection, or partially before and partially after, by including an ellipsis in 
 *  the definition of the extension.  When the collection is instantiated, the base
 *  collection is spliced into the extended collection at the ellipsis.  
 **/
  final public void Ellipsis() throws ParseException {
 /*@bgen(jjtree) Ellipsis */
  ParsedEllipsis jjtn000 = new ParsedEllipsis(JJTELLIPSIS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(ELLIPSIS);
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public AbstractNode AnonymousArray() throws ParseException {
 /*@bgen(jjtree) AnonymousArray */
  ParsedAnonymousArray jjtn000 = new ParsedAnonymousArray(JJTANONYMOUSARRAY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ARRAYTYPE:
        jj_consume_token(ARRAYTYPE);
        break;
      case LBRACKET:
        jj_consume_token(LBRACKET);
        ArrayElementExpression();
        label_19:
        while (true) {
          if (jj_2_58(2)) {
            ;
          } else {
            break label_19;
          }
          jj_consume_token(COMMA);
          ArrayElementExpression();
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          jj_consume_token(COMMA);
          break;
        default:
          jj_la1[87] = jj_gen;
          ;
        }
        jj_consume_token(RBRACKET);
        break;
      default:
        jj_la1[88] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
     jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
       {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
    throw new Error("Missing return statement in function");
  }

  final public void TableInitExpression() throws ParseException {
 /*@bgen(jjtree) #Arguments(> 0) */
  ParsedArguments jjtn000 = new ParsedArguments(JJTARGUMENTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TABLETYPE:
        jj_consume_token(TABLETYPE);
        break;
      case LCODE:
        jj_consume_token(LCODE);
        TableElementExpression();
        label_20:
        while (true) {
          if (jj_2_59(2)) {
            ;
          } else {
            break label_20;
          }
          jj_consume_token(COMMA);
          TableElementExpression();
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          jj_consume_token(COMMA);
          break;
        default:
          jj_la1[89] = jj_gen;
          ;
        }
        jj_consume_token(RCODE);
        break;
      default:
        jj_la1[90] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
     jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 0);
     jjtc000 = false;
       jjtn000.setTable();
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 0);
     }
    }
  }

  final public AbstractNode AnonymousTable() throws ParseException {
 /*@bgen(jjtree) AnonymousTable */
  ParsedAnonymousTable jjtn000 = new ParsedAnonymousTable(JJTANONYMOUSTABLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TABLETYPE:
        jj_consume_token(TABLETYPE);
        break;
      case LCODE:
        jj_consume_token(LCODE);
        TableElementExpression();
        label_21:
        while (true) {
          if (jj_2_60(2)) {
            ;
          } else {
            break label_21;
          }
          jj_consume_token(COMMA);
          TableElementExpression();
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          jj_consume_token(COMMA);
          break;
        default:
          jj_la1[91] = jj_gen;
          ;
        }
        jj_consume_token(RCODE);
        break;
      default:
        jj_la1[92] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
        {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public Scoped TypedElementDefinition() throws ParseException {
 /*@bgen(jjtree) ElementDefinition */
  ParsedElementDefinition jjtn000 = new ParsedElementDefinition(JJTELEMENTDEFINITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      SuperType();
      if (jj_2_61(2147483647)) {
        DefElementName();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
          DefTypeName();
          break;
        default:
          jj_la1[93] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jj_consume_token(ASSIGN);
      ElementExpression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SEMICOLON:
        jj_consume_token(SEMICOLON);
        break;
      default:
        jj_la1[94] = jj_gen;
        ;
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
        {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public Scoped TypedComplexDefinition() throws ParseException {
 /*@bgen(jjtree) ComplexDefinition */
  ParsedComplexDefinition jjtn000 = new ParsedComplexDefinition(JJTCOMPLEXDEFINITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      SuperType();
      if (jj_2_62(2)) {
        DefElementName();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
          DefTypeName();
          break;
        default:
          jj_la1[95] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      Block();
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
        {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public void ArrayElementExpression() throws ParseException {
    if (jj_2_63(2147483647)) {
      ArrayInitBlock();
    } else if (jj_2_64(2147483647)) {
      ArrayDynamicInitExpression();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CONTAINER:
      case COUNT:
      case DEF:
      case KEYS:
      case NEXT:
      case OWNER:
      case SOURCE:
      case SUB:
      case SUPER:
      case THIS:
      case CORE:
      case SITE:
      case FOR:
      case HERE:
      case IF:
      case TYPE:
      case WITH:
      case FALSE:
      case NULL:
      case TRUE:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHAR_LITERAL:
      case SQ_STRING_LITERAL:
      case DQ_STRING_LITERAL:
      case IDENTIFIER:
      case LSTATIC:
      case LSTATICW:
      case LLITERAL:
      case LCODE:
      case LEMBEDCODE:
      case ARRAYTYPE:
      case TABLETYPE:
      case LPAREN:
      case LBRACKET:
      case THPPPT_DING:
      case TILDE:
      case PLUS:
      case MINUS:
      case NULL_BLOCK:
      case ABSTRACT_NULL:
        ElementExpression();
        break;
      default:
        jj_la1[96] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void ElementExpression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LSTATIC:
    case LSTATICW:
    case LLITERAL:
      StaticBlock();
      break;
    case LEMBEDCODE:
      EmbeddedFunBlock();
      break;
    case NULL_BLOCK:
    case ABSTRACT_NULL:
      NullBlock();
      break;
    case CONTAINER:
    case COUNT:
    case DEF:
    case KEYS:
    case NEXT:
    case OWNER:
    case SOURCE:
    case SUB:
    case SUPER:
    case THIS:
    case CORE:
    case SITE:
    case FOR:
    case HERE:
    case IF:
    case TYPE:
    case WITH:
    case FALSE:
    case NULL:
    case TRUE:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHAR_LITERAL:
    case SQ_STRING_LITERAL:
    case DQ_STRING_LITERAL:
    case IDENTIFIER:
    case LPAREN:
    case THPPPT_DING:
    case TILDE:
    case PLUS:
    case MINUS:
      ValueExpression();
      break;
    case LCODE:
    case TABLETYPE:
      AnonymousTable();
      break;
    case ARRAYTYPE:
    case LBRACKET:
      AnonymousArray();
      break;
    default:
      jj_la1[97] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public AbstractNode generateElementExpression() throws ParseException {
  AbstractNode node;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LSTATIC:
    case LSTATICW:
    case LLITERAL:
      node = StaticBlock();
      break;
    case LEMBEDCODE:
      node = EmbeddedFunBlock();
      break;
    case NULL_BLOCK:
    case ABSTRACT_NULL:
      node = NullBlock();
      break;
    case CONTAINER:
    case COUNT:
    case DEF:
    case KEYS:
    case NEXT:
    case OWNER:
    case SOURCE:
    case SUB:
    case SUPER:
    case THIS:
    case CORE:
    case SITE:
    case FOR:
    case HERE:
    case IF:
    case TYPE:
    case WITH:
    case FALSE:
    case NULL:
    case TRUE:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHAR_LITERAL:
    case SQ_STRING_LITERAL:
    case DQ_STRING_LITERAL:
    case IDENTIFIER:
    case LPAREN:
    case THPPPT_DING:
    case TILDE:
    case PLUS:
    case MINUS:
      node = ValueExpression();
      break;
    case LCODE:
    case TABLETYPE:
      node = AnonymousTable();
      break;
    case ARRAYTYPE:
    case LBRACKET:
      node = AnonymousArray();
      break;
    default:
      jj_la1[98] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
        {if (true) return node;}
    throw new Error("Missing return statement in function");
  }

  final public void TableElementExpression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FOR:
    case IF:
    case WITH:
    case LCODE:
    case LEMBEDCODE:
      TableDynamicInitExpression();
      break;
    case CHAR_LITERAL:
    case SQ_STRING_LITERAL:
    case DQ_STRING_LITERAL:
    case IDENTIFIER:
    case LPAREN:
      TableElement();
      break;
    default:
      jj_la1[99] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void TableDynamicElementExpression() throws ParseException {
    if (jj_2_65(2147483647)) {
      TableDynamicInitExpression();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CONTAINER:
      case COUNT:
      case DEF:
      case KEYS:
      case NEXT:
      case OWNER:
      case SOURCE:
      case SUB:
      case SUPER:
      case THIS:
      case CORE:
      case SITE:
      case FOR:
      case HERE:
      case IF:
      case TYPE:
      case WITH:
      case FALSE:
      case NULL:
      case TRUE:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHAR_LITERAL:
      case SQ_STRING_LITERAL:
      case DQ_STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case THPPPT_DING:
      case TILDE:
      case PLUS:
      case MINUS:
        TableDynamicElement();
        break;
      default:
        jj_la1[100] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void TableElement() throws ParseException {
 /*@bgen(jjtree) TableElement */
  ParsedTableElement jjtn000 = new ParsedTableElement(JJTTABLEELEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        PureComplexName();
        break;
      case CHAR_LITERAL:
        CharLiteral();
        break;
      case SQ_STRING_LITERAL:
        SingleQuoteStringLiteral();
        break;
      case DQ_STRING_LITERAL:
        DoubleQuoteStringLiteral();
        break;
      case LPAREN:
        jj_consume_token(LPAREN);
        ValueExpression();
        jj_consume_token(RPAREN);
        break;
      default:
        jj_la1[101] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(COLON);
      ElementExpression();
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void TableDynamicElement() throws ParseException {
 /*@bgen(jjtree) TableElement */
  ParsedTableElement jjtn000 = new ParsedTableElement(JJTTABLEELEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      ValueExpression();
      jj_consume_token(COLON);
      ElementExpression();
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public int AccessModifier() throws ParseException {
  int modifier = Definition.SITE_ACCESS;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LOCAL:
      jj_consume_token(LOCAL);
                modifier = Definition.LOCAL_ACCESS;
      break;
    case PUBLIC:
      jj_consume_token(PUBLIC);
                 modifier = Definition.PUBLIC_ACCESS;
      break;
    default:
      jj_la1[102] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
        {if (true) return modifier;}
    throw new Error("Missing return statement in function");
  }

  final public int DurabilityModifier() throws ParseException {
  int modifier;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STATIC:
      jj_consume_token(STATIC);
                 modifier = Definition.STATIC;
      break;
    case GLOBAL:
      jj_consume_token(GLOBAL);
                 modifier = Definition.GLOBAL;
      break;
    case DYNAMIC:
      jj_consume_token(DYNAMIC);
                  modifier = Definition.DYNAMIC;
      break;
    default:
      jj_la1[103] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
        {if (true) return modifier;}
    throw new Error("Missing return statement in function");
  }

  final public void SimpleType() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FLOAT:
    case INT:
    case LONG:
    case NUMBER:
    case SHORT:
    case STRING:
    case VOID:
    case CONTEXT:
      PrimitiveType();
      break;
    case IDENTIFIER:
      Type();
      break;
    default:
      jj_la1[104] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void StandardType() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FLOAT:
    case INT:
    case LONG:
    case NUMBER:
    case SHORT:
    case STRING:
    case VOID:
    case CONTEXT:
      PrimitiveType();
      break;
    case IDENTIFIER:
      Type();
      break;
    case THIS:
      CorrespondingSuperType();
      break;
    default:
      jj_la1[105] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void SuperType() throws ParseException {
 /*@bgen(jjtree) #TypeList(> 1) */
  ParsedTypeList jjtn000 = new ParsedTypeList(JJTTYPELIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case THIS:
        CorrespondingSuperType();
        break;
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FLOAT:
      case INT:
      case LONG:
      case NUMBER:
      case SHORT:
      case STRING:
      case VOID:
      case CONTEXT:
        PrimitiveType();
        break;
      default:
        jj_la1[106] = jj_gen;
        if (jj_2_66(2147483647)) {
          TypeWithArguments();
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case IDENTIFIER:
            Type();
            break;
          default:
            jj_la1[107] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
      label_22:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[108] = jj_gen;
          break label_22;
        }
        jj_consume_token(COMMA);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case THIS:
          CorrespondingSuperType();
          break;
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case DOUBLE:
        case FLOAT:
        case INT:
        case LONG:
        case NUMBER:
        case SHORT:
        case STRING:
        case VOID:
        case CONTEXT:
          PrimitiveType();
          break;
        default:
          jj_la1[109] = jj_gen;
          if (jj_2_67(2147483647)) {
            TypeWithArguments();
          } else {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case IDENTIFIER:
              Type();
              break;
            default:
              jj_la1[110] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
        }
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
      }
    }
  }

  final public void CorrespondingSuperType() throws ParseException {
 /*@bgen(jjtree) Type */
  ParsedType jjtn000 = new ParsedType(JJTTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      CorrespondingSuperName();
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void CorrespondingSuperName() throws ParseException {
 /*@bgen(jjtree) Name */
  ParsedName jjtn000 = new ParsedName(JJTNAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(THIS);
               jjtree.closeNodeScope(jjtn000, true);
               jjtc000 = false;
               jjtn000.setName(Name.THIS);
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void TypeWithArguments() throws ParseException {
 /*@bgen(jjtree) Type */
  ParsedType jjtn000 = new ParsedType(JJTTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      TypeName();
      if (jj_2_68(2147483647)) {
        jj_consume_token(LPAREN);
        Any();
        jj_consume_token(RPAREN);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LPAREN:
        case LDYNAMICPAREN:
          Arguments();
          break;
        default:
          jj_la1[111] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void Type() throws ParseException {
 /*@bgen(jjtree) Type */
  ParsedType jjtn000 = new ParsedType(JJTTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      TypeName();
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void CollectionType() throws ParseException {
 /*@bgen(jjtree) Type */
  ParsedType jjtn000 = new ParsedType(JJTTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FLOAT:
      case INT:
      case LONG:
      case NUMBER:
      case SHORT:
      case STRING:
      case VOID:
      case CONTEXT:
        PrimitiveType();
        break;
      default:
        jj_la1[112] = jj_gen;
        if (jj_2_69(2147483647)) {
          TypeWithArguments();
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case IDENTIFIER:
            TypeName();
            break;
          default:
            jj_la1[113] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
      label_23:
      while (true) {
        Dim();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ARRAYTYPE:
        case STREAMTYPE:
        case APPENDTYPE:
        case TABLETYPE:
        case LBRACKET:
          ;
          break;
        default:
          jj_la1[114] = jj_gen;
          break label_23;
        }
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void IndefiniteCollectionType() throws ParseException {
 /*@bgen(jjtree) Type */
  ParsedType jjtn000 = new ParsedType(JJTTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FLOAT:
      case INT:
      case LONG:
      case NUMBER:
      case SHORT:
      case STRING:
      case VOID:
      case CONTEXT:
        PrimitiveType();
        break;
      default:
        jj_la1[115] = jj_gen;
        if (jj_2_70(2147483647)) {
          TypeWithArguments();
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case IDENTIFIER:
            TypeName();
            break;
          default:
            jj_la1[116] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
      label_24:
      while (true) {
        IndefiniteDim();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ARRAYTYPE:
        case TABLETYPE:
          ;
          break;
        default:
          jj_la1[117] = jj_gen;
          break label_24;
        }
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void Dim() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ARRAYTYPE:
    case STREAMTYPE:
    case APPENDTYPE:
    case LBRACKET:
      ArrayDim();
      break;
    case TABLETYPE:
      TableDim();
      break;
    default:
      jj_la1[118] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void ArrayDim() throws ParseException {
 /*@bgen(jjtree) Dim */
  ParsedDim jjtn000 = new ParsedDim(JJTDIM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ARRAYTYPE:
        jj_consume_token(ARRAYTYPE);
                             jjtree.closeNodeScope(jjtn000, true);
                             jjtc000 = false;
                             jjtn000.setDimType(Dim.TYPE.INDEFINITE);
        break;
      case APPENDTYPE:
        jj_consume_token(APPENDTYPE);
                             jjtree.closeNodeScope(jjtn000, true);
                             jjtc000 = false;
                             jjtn000.setDimType(Dim.TYPE.APPEND);
        break;
      case STREAMTYPE:
        jj_consume_token(STREAMTYPE);
                             jjtree.closeNodeScope(jjtn000, true);
                             jjtc000 = false;
                             jjtn000.setDimType(Dim.TYPE.STREAM);
        break;
      case LBRACKET:
        jj_consume_token(LBRACKET);
        ValueExpression();
        jj_consume_token(RBRACKET);
                                   jjtree.closeNodeScope(jjtn000, true);
                                   jjtc000 = false;
                                   jjtn000.setDimType(Dim.TYPE.DEFINITE);
        break;
      default:
        jj_la1[119] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void DefiniteDim() throws ParseException {
 /*@bgen(jjtree) Dim */
  ParsedDim jjtn000 = new ParsedDim(JJTDIM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jjtn000.setDimType(Dim.TYPE.DEFINITE);
      jj_consume_token(LBRACKET);
      ValueExpression();
      jj_consume_token(RBRACKET);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void IndefiniteDim() throws ParseException {
 /*@bgen(jjtree) Dim */
  ParsedDim jjtn000 = new ParsedDim(JJTDIM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jjtn000.setDimType(Dim.TYPE.INDEFINITE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ARRAYTYPE:
        jj_consume_token(ARRAYTYPE);
        break;
      case TABLETYPE:
        jj_consume_token(TABLETYPE);
             jjtree.closeNodeScope(jjtn000, true);
             jjtc000 = false;
             jjtn000.setTable(true);
        break;
      default:
        jj_la1[120] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void TableDim() throws ParseException {
 /*@bgen(jjtree) Dim */
  ParsedDim jjtn000 = new ParsedDim(JJTDIM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jjtn000.setTable(true);
      jjtn000.setDimType(Dim.TYPE.INDEFINITE);
      jj_consume_token(TABLETYPE);
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

//
// Names
//
  final public void TypeName() throws ParseException {
    Name();
    label_25:
    while (true) {
      if (jj_2_71(2)) {
        ;
      } else {
        break label_25;
      }
      jj_consume_token(DOT);
      Name();
    }
  }

  final public void DefCollectionName() throws ParseException {
 /*@bgen(jjtree) DefCollectionName */
  ParsedDefCollectionName jjtn000 = new ParsedDefCollectionName(JJTDEFCOLLECTIONNAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(IDENTIFIER);
                           jjtn000.setName(t.image);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
        ParameterList();
        label_26:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[121] = jj_gen;
            break label_26;
          }
          jj_consume_token(COMMA);
          ParameterList();
        }
        break;
      default:
        jj_la1[122] = jj_gen;
        ;
      }
      label_27:
      while (true) {
        Dim();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ARRAYTYPE:
        case STREAMTYPE:
        case APPENDTYPE:
        case TABLETYPE:
        case LBRACKET:
          ;
          break;
        default:
          jj_la1[123] = jj_gen;
          break label_27;
        }
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void DefCollectionParamName() throws ParseException {
 /*@bgen(jjtree) DefCollectionName */
  ParsedDefCollectionName jjtn000 = new ParsedDefCollectionName(JJTDEFCOLLECTIONNAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(IDENTIFIER);
                           jjtn000.setName(t.image);
      label_28:
      while (true) {
        IndefiniteDim();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ARRAYTYPE:
        case TABLETYPE:
          ;
          break;
        default:
          jj_la1[124] = jj_gen;
          break label_28;
        }
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void DefTypeName() throws ParseException {
 /*@bgen(jjtree) DefTypeName */
  ParsedDefTypeName jjtn000 = new ParsedDefTypeName(JJTDEFTYPENAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(IDENTIFIER);
                       jjtn000.setName(t.image);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
        ParameterList();
        label_29:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[125] = jj_gen;
            break label_29;
          }
          jj_consume_token(COMMA);
          ParameterList();
        }
        break;
      default:
        jj_la1[126] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void DefElementName() throws ParseException {
 /*@bgen(jjtree) DefElementName */
  ParsedDefElementName jjtn000 = new ParsedDefElementName(JJTDEFELEMENTNAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(IDENTIFIER);
                       jjtn000.setName(t.image);
      label_30:
      while (true) {
        DefiniteDim();
        if (jj_2_72(2147483647)) {
          ;
        } else {
          break label_30;
        }
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void ParameterList() throws ParseException {
 /*@bgen(jjtree) ParameterList */
  ParsedParameterList jjtn000 = new ParsedParameterList(JJTPARAMETERLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(LPAREN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FLOAT:
      case INT:
      case LONG:
      case NUMBER:
      case SHORT:
      case STRING:
      case VOID:
      case IDENTIFIER:
      case TIMES:
      case CONTEXT:
        DefParameter();
        label_31:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[127] = jj_gen;
            break label_31;
          }
          jj_consume_token(COMMA);
          DefParameter();
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ELLIPSIS:
          Ellipsis();
          break;
        default:
          jj_la1[128] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[129] = jj_gen;
        ;
      }
      jj_consume_token(RPAREN);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void DefParameter() throws ParseException {
 /*@bgen(jjtree) DefParameter */
  ParsedDefParameter jjtn000 = new ParsedDefParameter(JJTDEFPARAMETER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_73(2147483647)) {
        SimpleType();
        DefCollectionParamName();
      } else if (jj_2_74(2147483647)) {
        SimpleType();
        Name();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LPAREN:
          ParameterList();
          break;
        default:
          jj_la1[130] = jj_gen;
          ;
        }
      } else if (jj_2_75(2147483647)) {
        IndefiniteCollectionType();
        Name();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LPAREN:
          ParameterList();
          break;
        default:
          jj_la1[131] = jj_gen;
          ;
        }
      } else if (jj_2_76(2147483647)) {
        DefCollectionParamName();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
          Name();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LPAREN:
            ParameterList();
            break;
          default:
            jj_la1[132] = jj_gen;
            ;
          }
          break;
        case TIMES:
          jj_consume_token(TIMES);
          break;
        default:
          jj_la1[133] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

//
// Fun Expressions (other than SiteExpresssion, defined above)
//
  final public void FunExpression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IF:
    case WITH:
    case WITHOUT:
      ConditionalExpression();
      break;
    case FOR:
      ForExpression();
      break;
    case REDIRECT:
      RedirectStatement();
      break;
    case CONTINUE:
      ContinueStatement();
      break;
    default:
      jj_la1[134] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

// syntax of names specified in adopt and extern statements
  final public void NameRange() throws ParseException {
    Name();
    label_32:
    while (true) {
      if (jj_2_77(2)) {
        ;
      } else {
        break label_32;
      }
      jj_consume_token(DOT);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        Name();
        break;
      case TIMES:
        RegExp();
        break;
      default:
        jj_la1[135] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOT:
      jj_consume_token(DOT);
      AnyAny();
      break;
    default:
      jj_la1[136] = jj_gen;
      ;
    }
  }

  final public void RegExp() throws ParseException {
    Any();
  }

  final public void Any() throws ParseException {
 /*@bgen(jjtree) Any */
  ParsedAny jjtn000 = new ParsedAny(JJTANY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(TIMES);
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void AnyAny() throws ParseException {
 /*@bgen(jjtree) AnyAny */
  ParsedAnyAny jjtn000 = new ParsedAnyAny(JJTANYANY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(INDEFINITE_NAMERANGE);
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void PrimitiveType() throws ParseException {
 /*@bgen(jjtree) PrimitiveType */
  ParsedPrimitiveType jjtn000 = new ParsedPrimitiveType(JJTPRIMITIVETYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
        jj_consume_token(BOOLEAN);
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                   jjtn000.makeBoolean();
        break;
      case CHAR:
        jj_consume_token(CHAR);
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
                jjtn000.makeChar();
        break;
      case BYTE:
        jj_consume_token(BYTE);
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
                jjtn000.makeByte();
        break;
      case SHORT:
        jj_consume_token(SHORT);
                 jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
                 jjtn000.makeShort();
        break;
      case INT:
        jj_consume_token(INT);
               jjtree.closeNodeScope(jjtn000, true);
               jjtc000 = false;
               jjtn000.makeInt();
        break;
      case LONG:
        jj_consume_token(LONG);
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
                jjtn000.makeLong();
        break;
      case FLOAT:
        jj_consume_token(FLOAT);
                 jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
                 jjtn000.makeFloat();
        break;
      case DOUBLE:
        jj_consume_token(DOUBLE);
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                  jjtn000.makeDouble();
        break;
      case STRING:
        jj_consume_token(STRING);
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                  jjtn000.makeString();
        break;
      case NUMBER:
        jj_consume_token(NUMBER);
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                  jjtn000.makeNumber();
        break;
      case CONTEXT:
        jj_consume_token(CONTEXT);
             jjtree.closeNodeScope(jjtn000, true);
             jjtc000 = false;
             jjtn000.makeContinuation();
        break;
      case VOID:
        jj_consume_token(VOID);
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
                jjtn000.makeVoid();
        break;
      default:
        jj_la1[137] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
        if (jjtc000) {
          jjtree.closeNodeScope(jjtn000, true);
        }
    }
  }

//
// Constructions
//
  final public void ConditionalExpression() throws ParseException {
 /*@bgen(jjtree) ConditionalExpression */
  ParsedConditionalExpression jjtn000 = new ParsedConditionalExpression(JJTCONDITIONALEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IF:
        IfExpression();
        break;
      case WITH:
      case WITHOUT:
        WithExpression();
        break;
      default:
        jj_la1[138] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      label_33:
      while (true) {
        if (jj_2_78(2)) {
          ;
        } else {
          break label_33;
        }
        ElseIfOrWithExpression();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ELSE:
        ElseExpression();
        break;
      default:
        jj_la1[139] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void IfExpression() throws ParseException {
    jj_consume_token(IF);
    ValueExpression();
    Block();
  }

  final public void WithExpression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case WITH:
      jj_consume_token(WITH);
      WithPredicateExpression();
      break;
    case WITHOUT:
      jj_consume_token(WITHOUT);
      WithoutPredicateExpression();
      break;
    default:
      jj_la1[140] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    Block();
  }

  final public void WithPredicateExpression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
      jj_consume_token(LPAREN);
      WithPredicateExpression();
      jj_consume_token(RPAREN);
      break;
    case IDENTIFIER:
      WithPredicate();
      break;
    default:
      jj_la1[141] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void WithPredicate() throws ParseException {
 /*@bgen(jjtree) WithPredicate */
  ParsedWithPredicate jjtn000 = new ParsedWithPredicate(JJTWITHPREDICATE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_79(2147483647)) {
        NameWithIndexes();
                                              jjtree.closeNodeScope(jjtn000, true);
                                              jjtc000 = false;
                                              jjtn000.setElementPresent(true);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
          Name();
          break;
        default:
          jj_la1[142] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void WithoutPredicateExpression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
      jj_consume_token(LPAREN);
      WithoutPredicateExpression();
      jj_consume_token(RPAREN);
      break;
    case IDENTIFIER:
      WithoutPredicate();
      break;
    default:
      jj_la1[143] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void WithoutPredicate() throws ParseException {
 /*@bgen(jjtree) WithoutPredicate */
  ParsedWithoutPredicate jjtn000 = new ParsedWithoutPredicate(JJTWITHOUTPREDICATE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_80(2147483647)) {
        NameWithIndexes();
                                              jjtree.closeNodeScope(jjtn000, true);
                                              jjtc000 = false;
                                              jjtn000.setElementPresent(true);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
          Name();
          break;
        default:
          jj_la1[144] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void ElseIfOrWithExpression() throws ParseException {
    jj_consume_token(ELSE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IF:
      jj_consume_token(IF);
      ValueExpression();
      break;
    case WITH:
      jj_consume_token(WITH);
      WithPredicateExpression();
      break;
    default:
      jj_la1[145] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    Block();
  }

  final public void ElseExpression() throws ParseException {
    jj_consume_token(ELSE);
    Block();
  }

  final public void ForExpression() throws ParseException {
 /*@bgen(jjtree) ForExpression */
  ParsedForExpression jjtn000 = new ParsedForExpression(JJTFOREXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(FOR);
      Iterator(false);
      label_34:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case AND:
        case OR:
          ;
          break;
        default:
          jj_la1[146] = jj_gen;
          break label_34;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case AND:
          jj_consume_token(AND);
          Iterator(false);
          break;
        case OR:
          jj_consume_token(OR);
          Iterator(true);
          break;
        default:
          jj_la1[147] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      Block();
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void Iterator(boolean optional) throws ParseException {
 /*@bgen(jjtree) IteratorValues */
  ParsedIteratorValues jjtn000 = new ParsedIteratorValues(JJTITERATORVALUES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jjtn000.setOptional(optional);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FLOAT:
      case INT:
      case LONG:
      case NUMBER:
      case SHORT:
      case STRING:
      case VOID:
      case IDENTIFIER:
      case LPAREN:
      case TIMES:
      case CONTEXT:
        DefExpression();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IN:
        case COLON:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case IN:
            jj_consume_token(IN);
            break;
          case COLON:
            jj_consume_token(COLON);
            break;
          default:
            jj_la1[148] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          InstanceExpression();
                                             jjtn000.setIn(true);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case BY:
            jj_consume_token(BY);
            InstanceExpression();
                                           jjtn000.setBy(true);
            break;
          default:
            jj_la1[149] = jj_gen;
            ;
          }
          break;
        case FROM:
        case ASSIGN:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case FROM:
            jj_consume_token(FROM);
            break;
          case ASSIGN:
            jj_consume_token(ASSIGN);
            break;
          default:
            jj_la1[150] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          ValueExpression();
                                             jjtn000.setFrom(true);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case THROUGH:
          case TO:
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case TO:
              jj_consume_token(TO);
                       jjtn000.setTo(true);
              break;
            case THROUGH:
              jj_consume_token(THROUGH);
                                                            jjtn000.setThrough(true);
              break;
            default:
              jj_la1[151] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            ValueExpression();
            break;
          default:
            jj_la1[152] = jj_gen;
            ;
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case BY:
            jj_consume_token(BY);
            ValueExpression();
                                       jjtn000.setBy(true);
            break;
          default:
            jj_la1[153] = jj_gen;
            ;
          }
          break;
        default:
          jj_la1[154] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case WHERE:
          jj_consume_token(WHERE);
          ValueExpression();
                                    jjtn000.setWhere(true);
          break;
        default:
          jj_la1[155] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case UNTIL:
          jj_consume_token(UNTIL);
          ValueExpression();
                                    jjtn000.setUntil(true);
          break;
        default:
          jj_la1[156] = jj_gen;
          ;
        }
        break;
      case UNTIL:
        jj_consume_token(UNTIL);
                jjtn000.setUntil(true);
        ValueExpression();
        break;
      default:
        jj_la1[157] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void ArrayDynamicInitExpression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IF:
    case WITH:
      ArrayInitConditionalExpression();
      break;
    case FOR:
      ArrayInitForExpression();
      break;
    case LCODE:
    case LEMBEDCODE:
      ArrayInitBlock();
      break;
    default:
      jj_la1[158] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void ArrayInitConditionalExpression() throws ParseException {
 /*@bgen(jjtree) ConditionalExpression */
  ParsedConditionalExpression jjtn000 = new ParsedConditionalExpression(JJTCONDITIONALEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IF:
        ArrayInitIfExpression();
        break;
      case WITH:
        ArrayInitWithExpression();
        break;
      default:
        jj_la1[159] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      label_35:
      while (true) {
        if (jj_2_81(2)) {
          ;
        } else {
          break label_35;
        }
        ArrayInitElseIfOrWithExpression();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ELSE:
        ArrayInitElseExpression();
        break;
      default:
        jj_la1[160] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void ArrayInitIfExpression() throws ParseException {
    jj_consume_token(IF);
    ValueExpression();
    ArrayInitBlock();
  }

  final public void ArrayInitWithExpression() throws ParseException {
    jj_consume_token(WITH);
    WithPredicateExpression();
    ArrayInitBlock();
  }

  final public void ArrayInitElseIfOrWithExpression() throws ParseException {
    jj_consume_token(ELSE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IF:
      jj_consume_token(IF);
      ValueExpression();
      break;
    case WITH:
      jj_consume_token(WITH);
      WithPredicateExpression();
      break;
    default:
      jj_la1[161] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    ArrayInitBlock();
  }

  final public void ArrayInitElseExpression() throws ParseException {
    jj_consume_token(ELSE);
    ArrayInitBlock();
  }

  final public void ArrayInitForExpression() throws ParseException {
 /*@bgen(jjtree) ForExpression */
  ParsedForExpression jjtn000 = new ParsedForExpression(JJTFOREXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(FOR);
      Iterator(false);
      label_36:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case AND:
        case OR:
          ;
          break;
        default:
          jj_la1[162] = jj_gen;
          break label_36;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case AND:
          jj_consume_token(AND);
          Iterator(false);
          break;
        case OR:
          jj_consume_token(OR);
          Iterator(true);
          break;
        default:
          jj_la1[163] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      ArrayInitBlock();
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public Block ArrayInitBlock() throws ParseException {
 /*@bgen(jjtree) DynamicElementBlock */
    ParsedDynamicElementBlock jjtn000 = new ParsedDynamicElementBlock(JJTDYNAMICELEMENTBLOCK);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Block catchBlock;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LEMBEDCODE:
        jj_consume_token(LEMBEDCODE);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CONTAINER:
        case COUNT:
        case DEF:
        case KEYS:
        case NEXT:
        case OWNER:
        case SOURCE:
        case SUB:
        case SUPER:
        case THIS:
        case CORE:
        case SITE:
        case FOR:
        case HERE:
        case IF:
        case TYPE:
        case WITH:
        case FALSE:
        case NULL:
        case TRUE:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHAR_LITERAL:
        case SQ_STRING_LITERAL:
        case DQ_STRING_LITERAL:
        case IDENTIFIER:
        case LSTATIC:
        case LSTATICW:
        case LLITERAL:
        case LCODE:
        case LEMBEDCODE:
        case ARRAYTYPE:
        case TABLETYPE:
        case LPAREN:
        case LBRACKET:
        case THPPPT_DING:
        case TILDE:
        case PLUS:
        case MINUS:
        case NULL_BLOCK:
        case ABSTRACT_NULL:
          ArrayElementExpression();
          label_37:
          while (true) {
            if (jj_2_82(2)) {
              ;
            } else {
              break label_37;
            }
            jj_consume_token(COMMA);
            ArrayElementExpression();
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            jj_consume_token(COMMA);
            break;
          default:
            jj_la1[164] = jj_gen;
            ;
          }
          break;
        default:
          jj_la1[165] = jj_gen;
          ;
        }
        jj_consume_token(REMBEDCODE);
        break;
      case LCODE:
        jj_consume_token(LCODE);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CONTAINER:
        case COUNT:
        case DEF:
        case KEYS:
        case NEXT:
        case OWNER:
        case SOURCE:
        case SUB:
        case SUPER:
        case THIS:
        case CORE:
        case SITE:
        case FOR:
        case HERE:
        case IF:
        case TYPE:
        case WITH:
        case FALSE:
        case NULL:
        case TRUE:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHAR_LITERAL:
        case SQ_STRING_LITERAL:
        case DQ_STRING_LITERAL:
        case IDENTIFIER:
        case LSTATIC:
        case LSTATICW:
        case LLITERAL:
        case LCODE:
        case LEMBEDCODE:
        case ARRAYTYPE:
        case TABLETYPE:
        case LPAREN:
        case LBRACKET:
        case THPPPT_DING:
        case TILDE:
        case PLUS:
        case MINUS:
        case NULL_BLOCK:
        case ABSTRACT_NULL:
          ArrayElementExpression();
          label_38:
          while (true) {
            if (jj_2_83(2)) {
              ;
            } else {
              break label_38;
            }
            jj_consume_token(COMMA);
            ArrayElementExpression();
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            jj_consume_token(COMMA);
            break;
          default:
            jj_la1[166] = jj_gen;
            ;
          }
          break;
        default:
          jj_la1[167] = jj_gen;
          ;
        }
        jj_consume_token(RCODE);
        break;
      default:
        jj_la1[168] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CATCH:
        catchBlock = ArrayInitCatchBlock();
                                           jjtn000.setCatch(catchBlock);
        break;
      default:
        jj_la1[169] = jj_gen;
        ;
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
        {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public Block ArrayInitCatchBlock() throws ParseException {
    Block block = null;
    jj_consume_token(CATCH);
    block = ArrayInitBlock();
        {if (true) return block;}
    throw new Error("Missing return statement in function");
  }

  final public void TableDynamicInitExpression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IF:
    case WITH:
      TableInitConditionalExpression();
      break;
    case FOR:
      TableInitForExpression();
      break;
    case LCODE:
    case LEMBEDCODE:
      TableInitBlock();
      break;
    default:
      jj_la1[170] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void TableInitConditionalExpression() throws ParseException {
 /*@bgen(jjtree) ConditionalExpression */
  ParsedConditionalExpression jjtn000 = new ParsedConditionalExpression(JJTCONDITIONALEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IF:
        TableInitIfExpression();
        break;
      case WITH:
        TableInitWithExpression();
        break;
      default:
        jj_la1[171] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      label_39:
      while (true) {
        if (jj_2_84(2)) {
          ;
        } else {
          break label_39;
        }
        TableInitElseIfOrWithExpression();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ELSE:
        TableInitElseExpression();
        break;
      default:
        jj_la1[172] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void TableInitIfExpression() throws ParseException {
    jj_consume_token(IF);
    ValueExpression();
    TableInitBlock();
  }

  final public void TableInitWithExpression() throws ParseException {
    jj_consume_token(WITH);
    WithPredicateExpression();
    TableInitBlock();
  }

  final public void TableInitElseIfOrWithExpression() throws ParseException {
    jj_consume_token(ELSE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IF:
      jj_consume_token(IF);
      ValueExpression();
      break;
    case WITH:
      jj_consume_token(WITH);
      WithPredicateExpression();
      break;
    default:
      jj_la1[173] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    TableInitBlock();
  }

  final public void TableInitElseExpression() throws ParseException {
    jj_consume_token(ELSE);
    TableInitBlock();
  }

  final public void TableInitForExpression() throws ParseException {
 /*@bgen(jjtree) ForExpression */
  ParsedForExpression jjtn000 = new ParsedForExpression(JJTFOREXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(FOR);
      Iterator(false);
      label_40:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case AND:
        case OR:
          ;
          break;
        default:
          jj_la1[174] = jj_gen;
          break label_40;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case AND:
          jj_consume_token(AND);
          Iterator(false);
          break;
        case OR:
          jj_consume_token(OR);
          Iterator(true);
          break;
        default:
          jj_la1[175] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      TableInitBlock();
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public Block TableInitBlock() throws ParseException {
 /*@bgen(jjtree) DynamicElementBlock */
    ParsedDynamicElementBlock jjtn000 = new ParsedDynamicElementBlock(JJTDYNAMICELEMENTBLOCK);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Block catchBlock;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LEMBEDCODE:
        jj_consume_token(LEMBEDCODE);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CONTAINER:
        case COUNT:
        case DEF:
        case KEYS:
        case NEXT:
        case OWNER:
        case SOURCE:
        case SUB:
        case SUPER:
        case THIS:
        case CORE:
        case SITE:
        case FOR:
        case HERE:
        case IF:
        case TYPE:
        case WITH:
        case FALSE:
        case NULL:
        case TRUE:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHAR_LITERAL:
        case SQ_STRING_LITERAL:
        case DQ_STRING_LITERAL:
        case IDENTIFIER:
        case LCODE:
        case LEMBEDCODE:
        case LPAREN:
        case THPPPT_DING:
        case TILDE:
        case PLUS:
        case MINUS:
          TableDynamicElementExpression();
          label_41:
          while (true) {
            if (jj_2_85(2)) {
              ;
            } else {
              break label_41;
            }
            jj_consume_token(COMMA);
            TableDynamicElementExpression();
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            jj_consume_token(COMMA);
            break;
          default:
            jj_la1[176] = jj_gen;
            ;
          }
          break;
        default:
          jj_la1[177] = jj_gen;
          ;
        }
        jj_consume_token(REMBEDCODE);
        break;
      case LCODE:
        jj_consume_token(LCODE);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CONTAINER:
        case COUNT:
        case DEF:
        case KEYS:
        case NEXT:
        case OWNER:
        case SOURCE:
        case SUB:
        case SUPER:
        case THIS:
        case CORE:
        case SITE:
        case FOR:
        case HERE:
        case IF:
        case TYPE:
        case WITH:
        case FALSE:
        case NULL:
        case TRUE:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHAR_LITERAL:
        case SQ_STRING_LITERAL:
        case DQ_STRING_LITERAL:
        case IDENTIFIER:
        case LCODE:
        case LEMBEDCODE:
        case LPAREN:
        case THPPPT_DING:
        case TILDE:
        case PLUS:
        case MINUS:
          TableDynamicElementExpression();
          label_42:
          while (true) {
            if (jj_2_86(2)) {
              ;
            } else {
              break label_42;
            }
            jj_consume_token(COMMA);
            TableDynamicElementExpression();
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            jj_consume_token(COMMA);
            break;
          default:
            jj_la1[178] = jj_gen;
            ;
          }
          break;
        default:
          jj_la1[179] = jj_gen;
          ;
        }
        jj_consume_token(RCODE);
        break;
      default:
        jj_la1[180] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CATCH:
        catchBlock = TableInitCatchBlock();
                                           jjtn000.setCatch(catchBlock);
        break;
      default:
        jj_la1[181] = jj_gen;
        ;
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
        {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public Block TableInitCatchBlock() throws ParseException {
    Block block = null;
    jj_consume_token(CATCH);
    block = TableInitBlock();
        {if (true) return block;}
    throw new Error("Missing return statement in function");
  }

  final public void DefExpression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
      jj_consume_token(LPAREN);
      DefExpression();
      jj_consume_token(RPAREN);
      break;
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FLOAT:
    case INT:
    case LONG:
    case NUMBER:
    case SHORT:
    case STRING:
    case VOID:
    case IDENTIFIER:
    case TIMES:
    case CONTEXT:
      DefParameter();
      break;
    default:
      jj_la1[182] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void InstanceExpression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
      jj_consume_token(LPAREN);
      ValueInstanceExpression();
      jj_consume_token(RPAREN);
      break;
    case CONTAINER:
    case COUNT:
    case DEF:
    case KEYS:
    case NEXT:
    case OWNER:
    case SOURCE:
    case SUB:
    case SUPER:
    case THIS:
    case CORE:
    case SITE:
    case HERE:
    case TYPE:
    case IDENTIFIER:
      Instance();
      break;
    default:
      jj_la1[183] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void ValueInstanceExpression() throws ParseException {
 /*@bgen(jjtree) #ValueExpression(> 1) */
  ParsedValueExpression jjtn000 = new ParsedValueExpression(JJTVALUEEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      ChoiceInstanceExpression();
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
      }
    }
  }

  final public void ChoiceInstanceExpression() throws ParseException {
 /*@bgen(jjtree) #ChoiceExpression(> 1) */
  ParsedChoiceExpression jjtn000 = new ParsedChoiceExpression(JJTCHOICEEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_87(2147483647)) {
        LogicalOrExpression();
        jj_consume_token(QMARK);
        ChoiceInstanceExpression();
        jj_consume_token(COLON);
        ChoiceInstanceExpression();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CONTAINER:
        case COUNT:
        case DEF:
        case KEYS:
        case NEXT:
        case OWNER:
        case SOURCE:
        case SUB:
        case SUPER:
        case THIS:
        case CORE:
        case SITE:
        case HERE:
        case TYPE:
        case IDENTIFIER:
        case LPAREN:
        case TILDE:
          AdditiveInstanceExpression();
          break;
        default:
          jj_la1[184] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
          }
    }
  }

  final public void AdditiveInstanceExpression() throws ParseException {
 /*@bgen(jjtree) #BinaryExpression(> 1) */
  ParsedBinaryExpression jjtn000 = new ParsedBinaryExpression(JJTBINARYEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      OrInstanceExpression();
      label_43:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS:
          ;
          break;
        default:
          jj_la1[185] = jj_gen;
          break label_43;
        }
        AddOperator();
        OrInstanceExpression();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
    }
    }
  }

  final public void OrInstanceExpression() throws ParseException {
 /*@bgen(jjtree) #BinaryExpression(> 1) */
  ParsedBinaryExpression jjtn000 = new ParsedBinaryExpression(JJTBINARYEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      XorInstanceExpression();
      label_44:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BITWISE_OR:
          ;
          break;
        default:
          jj_la1[186] = jj_gen;
          break label_44;
        }
        OrOperator();
        XorInstanceExpression();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
    }
    }
  }

  final public void XorInstanceExpression() throws ParseException {
 /*@bgen(jjtree) #BinaryExpression(> 1) */
  ParsedBinaryExpression jjtn000 = new ParsedBinaryExpression(JJTBINARYEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      AndInstanceExpression();
      label_45:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CARET:
          ;
          break;
        default:
          jj_la1[187] = jj_gen;
          break label_45;
        }
        XorOperator();
        AndInstanceExpression();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
    }
    }
  }

  final public void AndInstanceExpression() throws ParseException {
 /*@bgen(jjtree) #BinaryExpression(> 1) */
  ParsedBinaryExpression jjtn000 = new ParsedBinaryExpression(JJTBINARYEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      UnaryInstanceExpression();
      label_46:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BITWISE_AND:
          ;
          break;
        default:
          jj_la1[188] = jj_gen;
          break label_46;
        }
        AndOperator();
        UnaryInstanceExpression();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
    }
    }
  }

  final public void UnaryInstanceExpression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TILDE:
      BitflipInstanceExpression();
      break;
    case CONTAINER:
    case COUNT:
    case DEF:
    case KEYS:
    case NEXT:
    case OWNER:
    case SOURCE:
    case SUB:
    case SUPER:
    case THIS:
    case CORE:
    case SITE:
    case HERE:
    case TYPE:
    case IDENTIFIER:
    case LPAREN:
      InstanceExpression();
      break;
    default:
      jj_la1[189] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void BitflipInstanceExpression() throws ParseException {
 /*@bgen(jjtree) UnaryExpression */
  ParsedUnaryExpression jjtn000 = new ParsedUnaryExpression(JJTUNARYEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      BitflipOperator();
      UnaryInstanceExpression();
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public Instantiation parseInstance() throws ParseException {
 /*@bgen(jjtree) Construction */
  ParsedConstruction jjtn000 = new ParsedConstruction(JJTCONSTRUCTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      ComplexName();
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
        {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public void Instance() throws ParseException {
 /*@bgen(jjtree) Construction */
  ParsedConstruction jjtn000 = new ParsedConstruction(JJTCONSTRUCTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      ComplexName();
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void BreakStatement() throws ParseException {
 /*@bgen(jjtree) BreakStatement */
  ParsedBreakStatement jjtn000 = new ParsedBreakStatement(JJTBREAKSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(BREAK);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SEMICOLON:
        jj_consume_token(SEMICOLON);
        break;
      default:
        jj_la1[190] = jj_gen;
        ;
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void NextConstruction() throws ParseException {
 /*@bgen(jjtree) NextConstruction */
  ParsedNextConstruction jjtn000 = new ParsedNextConstruction(JJTNEXTCONSTRUCTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(NEXT);
      jj_consume_token(SEMICOLON);
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void SubConstruction() throws ParseException {
 /*@bgen(jjtree) SubConstruction */
  ParsedSubConstruction jjtn000 = new ParsedSubConstruction(JJTSUBCONSTRUCTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(SUB);
      jj_consume_token(SEMICOLON);
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void SuperConstruction() throws ParseException {
 /*@bgen(jjtree) SuperConstruction */
  ParsedSuperConstruction jjtn000 = new ParsedSuperConstruction(JJTSUPERCONSTRUCTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(SUPER);
      jj_consume_token(SEMICOLON);
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void AnonymousConstruction() throws ParseException {
 /*@bgen(jjtree) Construction */
  ParsedConstruction jjtn000 = new ParsedConstruction(JJTCONSTRUCTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_88(2147483647)) {
        jj_consume_token(LPAREN);
        ValueExpression();
        jj_consume_token(RPAREN);
        jj_consume_token(SEMICOLON);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 165:
          jj_consume_token(165);
                                             jjtn000.setConcurrent();
          break;
        default:
          jj_la1[191] = jj_gen;
          ;
        }
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LSTATIC:
        case LSTATICW:
        case LLITERAL:
        case LCODE:
        case LEMBEDCODE:
        case LCONCURRENT:
        case LPAREN:
        case NULL_BLOCK:
        case ABSTRACT_NULL:
          AnonymousDefinition();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case SEMICOLON:
            jj_consume_token(SEMICOLON);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case 165:
              jj_consume_token(165);
                                           jjtn000.setConcurrent();
              break;
            default:
              jj_la1[192] = jj_gen;
              ;
            }
            break;
          default:
            jj_la1[193] = jj_gen;
            ;
          }
          break;
        case FALSE:
        case NULL:
        case TRUE:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHAR_LITERAL:
        case SQ_STRING_LITERAL:
        case DQ_STRING_LITERAL:
          Literal();
          jj_consume_token(SEMICOLON);
          break;
        default:
          jj_la1[194] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.setAnonymous();
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void NamedConstruction() throws ParseException {
 /*@bgen(jjtree) Construction */
  ParsedConstruction jjtn000 = new ParsedConstruction(JJTCONSTRUCTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      ComplexName();
      jj_consume_token(SEMICOLON);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 165:
        jj_consume_token(165);
                               jjtn000.setConcurrent();
        break;
      default:
        jj_la1[195] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void ComplexName() throws ParseException {
 /*@bgen(jjtree) #ComplexName(> 1) */
  ParsedComplexName jjtn000 = new ParsedComplexName(JJTCOMPLEXNAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_47:
      while (true) {
        if (jj_2_89(2147483647)) {
          ;
        } else {
          break label_47;
        }
        NameComponent();
        jj_consume_token(DOT);
      }
      NameComponent();
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
      }
    }
  }

  final public void PureComplexName() throws ParseException {
 /*@bgen(jjtree) #ComplexName(> 1) */
  ParsedComplexName jjtn000 = new ParsedComplexName(JJTCOMPLEXNAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_91(2147483647)) {
        label_48:
        while (true) {
          Name();
          jj_consume_token(DOT);
          if (jj_2_90(2147483647)) {
            ;
          } else {
            break label_48;
          }
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
          Name();
          break;
        case KEEP:
          jj_consume_token(KEEP);
          break;
        default:
          jj_la1[196] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
          Name();
          break;
        default:
          jj_la1[197] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
      }
    }
  }

  final public ComplexName parseComplexName() throws ParseException {
 /*@bgen(jjtree) ComplexName */
  ParsedComplexName jjtn000 = new ParsedComplexName(JJTCOMPLEXNAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_49:
      while (true) {
        if (jj_2_92(2147483647)) {
          ;
        } else {
          break label_49;
        }
        NameComponent();
        jj_consume_token(DOT);
      }
      NameComponent();
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
        {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public void NameComponent() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CONTAINER:
    case COUNT:
    case DEF:
    case KEYS:
    case NEXT:
    case OWNER:
    case SOURCE:
    case SUB:
    case SUPER:
    case THIS:
    case CORE:
    case SITE:
    case HERE:
    case TYPE:
      SpecialName();
      break;
    default:
      jj_la1[198] = jj_gen;
      if (jj_2_93(2147483647)) {
        NameWithIndexes();
      } else if (jj_2_94(2147483647)) {
        NameWithIndexes();
      } else if (jj_2_95(2147483647)) {
        NameWithArguments();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
          Name();
          break;
        default:
          jj_la1[199] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
  }

  final public void SpecialName() throws ParseException {
 /*@bgen(jjtree) SpecialName */
  ParsedSpecialName jjtn000 = new ParsedSpecialName(JJTSPECIALNAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CONTAINER:
        jj_consume_token(CONTAINER);
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                    jjtn000.setName(Name.CONTAINER);
        break;
      case CORE:
        jj_consume_token(CORE);
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                    jjtn000.setName(Name.CORE);
        break;
      case COUNT:
        jj_consume_token(COUNT);
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                    jjtn000.setName(Name.COUNT);
        break;
      case DEF:
        jj_consume_token(DEF);
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                    jjtn000.setName(Name.DEF);
        break;
      case KEYS:
        jj_consume_token(KEYS);
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                    jjtn000.setName(Name.KEYS);
        break;
      case HERE:
        jj_consume_token(HERE);
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                    jjtn000.setName(Name.HERE);
        break;
      case NEXT:
        jj_consume_token(NEXT);
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                    jjtn000.setName(Name.NEXT);
        break;
      case OWNER:
        jj_consume_token(OWNER);
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                    jjtn000.setName(Name.OWNER);
        break;
      case SITE:
        jj_consume_token(SITE);
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                    jjtn000.setName(Name.SITE);
        break;
      case SOURCE:
        jj_consume_token(SOURCE);
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                    jjtn000.setName(Name.SOURCE);
        break;
      case SUB:
        jj_consume_token(SUB);
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                    jjtn000.setName(Name.SUB);
        break;
      case SUPER:
        jj_consume_token(SUPER);
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                    jjtn000.setName(Name.SUPER);
        break;
      case THIS:
        jj_consume_token(THIS);
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                    jjtn000.setName(Name.THIS);
        break;
      case TYPE:
        jj_consume_token(TYPE);
        if (jj_2_96(2147483647)) {
          Arguments();
        } else {
          ;
        }
                                              jjtree.closeNodeScope(jjtn000, true);
                                              jjtc000 = false;
                                              jjtn000.setName(Name.TYPE);
        break;
      default:
        jj_la1[200] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void NameWithArguments() throws ParseException {
 /*@bgen(jjtree) NameWithArguments */
  ParsedNameWithArguments jjtn000 = new ParsedNameWithArguments(JJTNAMEWITHARGUMENTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(IDENTIFIER);
                       jjtn000.setName(t.image);
      Arguments();
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void NameWithIndexes() throws ParseException {
 /*@bgen(jjtree) NameWithIndexes */
  ParsedNameWithIndexes jjtn000 = new ParsedNameWithIndexes(JJTNAMEWITHINDEXES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(IDENTIFIER);
                       jjtn000.setName(t.image);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
      case LDYNAMICPAREN:
        Arguments();
        break;
      default:
        jj_la1[201] = jj_gen;
        ;
      }
      label_50:
      while (true) {
        Index();
        if (jj_2_97(2147483647)) {
          ;
        } else {
          break label_50;
        }
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void Name() throws ParseException {
 /*@bgen(jjtree) Name */
  ParsedName jjtn000 = new ParsedName(JJTNAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(IDENTIFIER);
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
                       jjtn000.setName(t.image);
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void Index() throws ParseException {
 /*@bgen(jjtree) Index */
  ParsedIndex jjtn000 = new ParsedIndex(JJTINDEX);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(LBRACKET);
      ValueExpression();
      jj_consume_token(RBRACKET);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void Arguments() throws ParseException {
 /*@bgen(jjtree) Arguments */
  ParsedArguments jjtn000 = new ParsedArguments(JJTARGUMENTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LDYNAMICPAREN:
        jj_consume_token(LDYNAMICPAREN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CONTAINER:
        case COUNT:
        case DEF:
        case KEYS:
        case NEXT:
        case OWNER:
        case SOURCE:
        case SUB:
        case SUPER:
        case THIS:
        case CORE:
        case SITE:
        case FOR:
        case HERE:
        case IF:
        case TYPE:
        case WITH:
        case FALSE:
        case NULL:
        case TRUE:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHAR_LITERAL:
        case SQ_STRING_LITERAL:
        case DQ_STRING_LITERAL:
        case IDENTIFIER:
        case LSTATIC:
        case LSTATICW:
        case LLITERAL:
        case LCODE:
        case LEMBEDCODE:
        case ARRAYTYPE:
        case TABLETYPE:
        case LPAREN:
        case LBRACKET:
        case THPPPT_DING:
        case TILDE:
        case PLUS:
        case MINUS:
        case NULL_BLOCK:
        case ABSTRACT_NULL:
          ElementExpression();
          label_51:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case COMMA:
              ;
              break;
            default:
              jj_la1[202] = jj_gen;
              break label_51;
            }
            jj_consume_token(COMMA);
            ElementExpression();
          }
          break;
        default:
          jj_la1[203] = jj_gen;
          ;
        }
        jj_consume_token(RDYNAMICPAREN);
                                                                       jjtree.closeNodeScope(jjtn000, true);
                                                                       jjtc000 = false;
                                                                       jjtn000.setDynamic();
        break;
      case LPAREN:
        jj_consume_token(LPAREN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CONTAINER:
        case COUNT:
        case DEF:
        case KEYS:
        case NEXT:
        case OWNER:
        case SOURCE:
        case SUB:
        case SUPER:
        case THIS:
        case CORE:
        case SITE:
        case FOR:
        case HERE:
        case IF:
        case TYPE:
        case WITH:
        case FALSE:
        case NULL:
        case TRUE:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHAR_LITERAL:
        case SQ_STRING_LITERAL:
        case DQ_STRING_LITERAL:
        case IDENTIFIER:
        case LSTATIC:
        case LSTATICW:
        case LLITERAL:
        case LCODE:
        case LEMBEDCODE:
        case ARRAYTYPE:
        case TABLETYPE:
        case LPAREN:
        case LBRACKET:
        case THPPPT_DING:
        case TILDE:
        case PLUS:
        case MINUS:
        case NULL_BLOCK:
        case ABSTRACT_NULL:
          ElementExpression();
          label_52:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case COMMA:
              ;
              break;
            default:
              jj_la1[204] = jj_gen;
              break label_52;
            }
            jj_consume_token(COMMA);
            ElementExpression();
          }
          break;
        default:
          jj_la1[205] = jj_gen;
          ;
        }
        jj_consume_token(RPAREN);
        break;
      default:
        jj_la1[206] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

//
// Values and Expressions
//
  final public ValueExpression parseValueExpression() throws ParseException {
 /*@bgen(jjtree) ValueExpression */
  ParsedValueExpression jjtn000 = new ParsedValueExpression(JJTVALUEEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      ValueExpression();
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
        {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public AbstractNode ValueExpression() throws ParseException {
 /*@bgen(jjtree) #ValueExpression(> 1) */
  ParsedValueExpression jjtn000 = new ParsedValueExpression(JJTVALUEEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      ChoiceExpression();
      jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
      jjtc000 = false;
        {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public void ChoiceExpression() throws ParseException {
 /*@bgen(jjtree) #ChoiceExpression(> 1) */
  ParsedChoiceExpression jjtn000 = new ParsedChoiceExpression(JJTCHOICEEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_98(2147483647)) {
        WithPredicate();
        jj_consume_token(QQMARK);
        ValueExpression();
        jj_consume_token(COLON);
        ValueExpression();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CONTAINER:
        case COUNT:
        case DEF:
        case KEYS:
        case NEXT:
        case OWNER:
        case SOURCE:
        case SUB:
        case SUPER:
        case THIS:
        case CORE:
        case SITE:
        case FOR:
        case HERE:
        case IF:
        case TYPE:
        case WITH:
        case FALSE:
        case NULL:
        case TRUE:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHAR_LITERAL:
        case SQ_STRING_LITERAL:
        case DQ_STRING_LITERAL:
        case IDENTIFIER:
        case LPAREN:
        case THPPPT_DING:
        case TILDE:
        case PLUS:
        case MINUS:
          LogicalOrExpression();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case QMARK:
            jj_consume_token(QMARK);
            ValueExpression();
            jj_consume_token(COLON);
            ValueExpression();
            break;
          default:
            jj_la1[207] = jj_gen;
            ;
          }
          break;
        default:
          jj_la1[208] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
      }
    }
  }

  final public void LogicalOrExpression() throws ParseException {
 /*@bgen(jjtree) #BinaryExpression(> 1) */
  ParsedBinaryExpression jjtn000 = new ParsedBinaryExpression(JJTBINARYEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      LogicalAndExpression();
      label_53:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LOGICAL_OR:
          ;
          break;
        default:
          jj_la1[209] = jj_gen;
          break label_53;
        }
        LogicalOrOperator();
        LogicalAndExpression();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
    }
    }
  }

  final public void LogicalOrOperator() throws ParseException {
 /*@bgen(jjtree) LogicalOrOperator */
  ParsedLogicalOrOperator jjtn000 = new ParsedLogicalOrOperator(JJTLOGICALOROPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(LOGICAL_OR);
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void LogicalAndExpression() throws ParseException {
 /*@bgen(jjtree) #BinaryExpression(> 1) */
  ParsedBinaryExpression jjtn000 = new ParsedBinaryExpression(JJTBINARYEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      EqualityExpression();
      label_54:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LOGICAL_AND:
          ;
          break;
        default:
          jj_la1[210] = jj_gen;
          break label_54;
        }
        LogicalAndOperator();
        EqualityExpression();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
    }
    }
  }

  final public void LogicalAndOperator() throws ParseException {
 /*@bgen(jjtree) LogicalAndOperator */
  ParsedLogicalAndOperator jjtn000 = new ParsedLogicalAndOperator(JJTLOGICALANDOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(LOGICAL_AND);
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void EqualityExpression() throws ParseException {
 /*@bgen(jjtree) #BinaryExpression(> 1) */
  ParsedBinaryExpression jjtn000 = new ParsedBinaryExpression(JJTBINARYEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      RelationalExpression();
      label_55:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EQ:
        case NE:
        case EQ_IGNORE_CASE:
        case NE_IGNORE_CASE:
          ;
          break;
        default:
          jj_la1[211] = jj_gen;
          break label_55;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EQ:
          EqualsOperator();
          break;
        case EQ_IGNORE_CASE:
          EqualsIgnoreCaseOperator();
          break;
        case NE:
          NotEqualsOperator();
          break;
        case NE_IGNORE_CASE:
          NotEqualsIgnoreCaseOperator();
          break;
        default:
          jj_la1[212] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        RelationalExpression();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
    }
    }
  }

  final public void EqualsOperator() throws ParseException {
 /*@bgen(jjtree) EqualsOperator */
  ParsedEqualsOperator jjtn000 = new ParsedEqualsOperator(JJTEQUALSOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(EQ);
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void EqualsIgnoreCaseOperator() throws ParseException {
 /*@bgen(jjtree) EqualsOperator */
  ParsedEqualsOperator jjtn000 = new ParsedEqualsOperator(JJTEQUALSOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(EQ_IGNORE_CASE);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtn000.setIgnoreCase();
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void NotEqualsOperator() throws ParseException {
 /*@bgen(jjtree) NotEqualsOperator */
  ParsedNotEqualsOperator jjtn000 = new ParsedNotEqualsOperator(JJTNOTEQUALSOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(NE);
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void NotEqualsIgnoreCaseOperator() throws ParseException {
 /*@bgen(jjtree) NotEqualsOperator */
  ParsedNotEqualsOperator jjtn000 = new ParsedNotEqualsOperator(JJTNOTEQUALSOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(NE_IGNORE_CASE);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtn000.setIgnoreCase();
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void RelationalExpression() throws ParseException {
 /*@bgen(jjtree) #BinaryExpression(> 1) */
  ParsedBinaryExpression jjtn000 = new ParsedBinaryExpression(JJTBINARYEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      InExpression();
      label_56:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case GT:
        case LT:
        case LE:
        case GE:
        case LE_IGNORE_CASE:
        case LT_IGNORE_CASE:
        case GE_IGNORE_CASE:
        case GT_IGNORE_CASE:
          ;
          break;
        default:
          jj_la1[213] = jj_gen;
          break label_56;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LT:
          LessThanOperator();
          break;
        case LT_IGNORE_CASE:
          LTIgnoreCaseOperator();
          break;
        case GT:
          GreaterThanOperator();
          break;
        case GT_IGNORE_CASE:
          GTIgnoreCaseOperator();
          break;
        case LE:
          LessThanOrEqualOperator();
          break;
        case LE_IGNORE_CASE:
          LEIgnoreCaseOperator();
          break;
        case GE:
          GreaterThanOrEqualOperator();
          break;
        case GE_IGNORE_CASE:
          GEIgnoreCaseOperator();
          break;
        default:
          jj_la1[214] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        InExpression();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
    }
    }
  }

  final public void LessThanOperator() throws ParseException {
 /*@bgen(jjtree) LessThanOperator */
  ParsedLessThanOperator jjtn000 = new ParsedLessThanOperator(JJTLESSTHANOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(LT);
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void LTIgnoreCaseOperator() throws ParseException {
 /*@bgen(jjtree) LessThanOperator */
  ParsedLessThanOperator jjtn000 = new ParsedLessThanOperator(JJTLESSTHANOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(LT_IGNORE_CASE);
           jjtree.closeNodeScope(jjtn000, true);
           jjtc000 = false;
           jjtn000.setIgnoreCase();
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void GreaterThanOperator() throws ParseException {
 /*@bgen(jjtree) GreaterThanOperator */
  ParsedGreaterThanOperator jjtn000 = new ParsedGreaterThanOperator(JJTGREATERTHANOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(GT);
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void GTIgnoreCaseOperator() throws ParseException {
 /*@bgen(jjtree) GreaterThanOperator */
  ParsedGreaterThanOperator jjtn000 = new ParsedGreaterThanOperator(JJTGREATERTHANOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(GT_IGNORE_CASE);
           jjtree.closeNodeScope(jjtn000, true);
           jjtc000 = false;
           jjtn000.setIgnoreCase();
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void LessThanOrEqualOperator() throws ParseException {
 /*@bgen(jjtree) LessThanOrEqualOperator */
  ParsedLessThanOrEqualOperator jjtn000 = new ParsedLessThanOrEqualOperator(JJTLESSTHANOREQUALOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(LE);
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void LEIgnoreCaseOperator() throws ParseException {
 /*@bgen(jjtree) LessThanOrEqualOperator */
  ParsedLessThanOrEqualOperator jjtn000 = new ParsedLessThanOrEqualOperator(JJTLESSTHANOREQUALOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(LE_IGNORE_CASE);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtn000.setIgnoreCase();
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void GreaterThanOrEqualOperator() throws ParseException {
 /*@bgen(jjtree) GreaterThanOrEqualOperator */
  ParsedGreaterThanOrEqualOperator jjtn000 = new ParsedGreaterThanOrEqualOperator(JJTGREATERTHANOREQUALOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(GE);
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void GEIgnoreCaseOperator() throws ParseException {
 /*@bgen(jjtree) GreaterThanOrEqualOperator */
  ParsedGreaterThanOrEqualOperator jjtn000 = new ParsedGreaterThanOrEqualOperator(JJTGREATERTHANOREQUALOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(GE_IGNORE_CASE);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtn000.setIgnoreCase();
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void InExpression() throws ParseException {
 /*@bgen(jjtree) #BinaryExpression(> 1) */
  ParsedBinaryExpression jjtn000 = new ParsedBinaryExpression(JJTBINARYEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      ShiftExpression();
      label_57:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IN:
          ;
          break;
        default:
          jj_la1[215] = jj_gen;
          break label_57;
        }
        InOperator();
        ShiftExpression();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
    }
    }
  }

  final public void InOperator() throws ParseException {
 /*@bgen(jjtree) InOperator */
  ParsedInOperator jjtn000 = new ParsedInOperator(JJTINOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(IN);
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void ShiftExpression() throws ParseException {
 /*@bgen(jjtree) #BinaryExpression(> 1) */
  ParsedBinaryExpression jjtn000 = new ParsedBinaryExpression(JJTBINARYEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      AdditiveExpression();
      label_58:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LSHIFT:
        case RSIGNEDSHIFT:
        case RUNSIGNEDSHIFT:
          ;
          break;
        default:
          jj_la1[216] = jj_gen;
          break label_58;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LSHIFT:
          LeftShiftOperator();
          break;
        case RSIGNEDSHIFT:
          RightShiftOperator();
          break;
        case RUNSIGNEDSHIFT:
          RightUnsignedShiftOperator();
          break;
        default:
          jj_la1[217] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        AdditiveExpression();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
    }
    }
  }

  final public void LeftShiftOperator() throws ParseException {
 /*@bgen(jjtree) LeftShiftOperator */
  ParsedLeftShiftOperator jjtn000 = new ParsedLeftShiftOperator(JJTLEFTSHIFTOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(LSHIFT);
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void RightShiftOperator() throws ParseException {
 /*@bgen(jjtree) RightShiftOperator */
  ParsedRightShiftOperator jjtn000 = new ParsedRightShiftOperator(JJTRIGHTSHIFTOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(RSIGNEDSHIFT);
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void RightUnsignedShiftOperator() throws ParseException {
 /*@bgen(jjtree) RightUnsignedShiftOperator */
  ParsedRightUnsignedShiftOperator jjtn000 = new ParsedRightUnsignedShiftOperator(JJTRIGHTUNSIGNEDSHIFTOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(RUNSIGNEDSHIFT);
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void AdditiveExpression() throws ParseException {
 /*@bgen(jjtree) #BinaryExpression(> 1) */
  ParsedBinaryExpression jjtn000 = new ParsedBinaryExpression(JJTBINARYEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      MultiplicativeExpression();
      label_59:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS:
        case MINUS:
          ;
          break;
        default:
          jj_la1[218] = jj_gen;
          break label_59;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS:
          AddOperator();
          break;
        case MINUS:
          SubtractOperator();
          break;
        default:
          jj_la1[219] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        MultiplicativeExpression();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
    }
    }
  }

  final public void AddOperator() throws ParseException {
 /*@bgen(jjtree) AddOperator */
  ParsedAddOperator jjtn000 = new ParsedAddOperator(JJTADDOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(PLUS);
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void SubtractOperator() throws ParseException {
 /*@bgen(jjtree) SubtractOperator */
  ParsedSubtractOperator jjtn000 = new ParsedSubtractOperator(JJTSUBTRACTOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(MINUS);
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void MultiplicativeExpression() throws ParseException {
 /*@bgen(jjtree) #BinaryExpression(> 1) */
  ParsedBinaryExpression jjtn000 = new ParsedBinaryExpression(JJTBINARYEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      OrExpression();
      label_60:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TIMES:
        case DIVIDED_BY:
        case MOD:
          ;
          break;
        default:
          jj_la1[220] = jj_gen;
          break label_60;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TIMES:
          MultiplyOperator();
          break;
        case DIVIDED_BY:
          DivideByOperator();
          break;
        case MOD:
          ModOperator();
          break;
        default:
          jj_la1[221] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        OrExpression();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
      }
    }
  }

  final public void MultiplyOperator() throws ParseException {
 /*@bgen(jjtree) MultiplyOperator */
  ParsedMultiplyOperator jjtn000 = new ParsedMultiplyOperator(JJTMULTIPLYOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(TIMES);
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void DivideByOperator() throws ParseException {
 /*@bgen(jjtree) DivideByOperator */
  ParsedDivideByOperator jjtn000 = new ParsedDivideByOperator(JJTDIVIDEBYOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(DIVIDED_BY);
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void ModOperator() throws ParseException {
 /*@bgen(jjtree) ModOperator */
  ParsedModOperator jjtn000 = new ParsedModOperator(JJTMODOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(MOD);
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void OrExpression() throws ParseException {
 /*@bgen(jjtree) #BinaryExpression(> 1) */
  ParsedBinaryExpression jjtn000 = new ParsedBinaryExpression(JJTBINARYEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      XorExpression();
      label_61:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BITWISE_OR:
          ;
          break;
        default:
          jj_la1[222] = jj_gen;
          break label_61;
        }
        OrOperator();
        XorExpression();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
    }
    }
  }

  final public void OrOperator() throws ParseException {
 /*@bgen(jjtree) OrOperator */
  ParsedOrOperator jjtn000 = new ParsedOrOperator(JJTOROPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(BITWISE_OR);
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void XorExpression() throws ParseException {
 /*@bgen(jjtree) #BinaryExpression(> 1) */
  ParsedBinaryExpression jjtn000 = new ParsedBinaryExpression(JJTBINARYEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      AndExpression();
      label_62:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CARET:
          ;
          break;
        default:
          jj_la1[223] = jj_gen;
          break label_62;
        }
        XorOperator();
        AndExpression();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
    }
    }
  }

  final public void XorOperator() throws ParseException {
 /*@bgen(jjtree) XorOperator */
  ParsedXorOperator jjtn000 = new ParsedXorOperator(JJTXOROPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(CARET);
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void AndExpression() throws ParseException {
 /*@bgen(jjtree) #BinaryExpression(> 1) */
  ParsedBinaryExpression jjtn000 = new ParsedBinaryExpression(JJTBINARYEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      UnaryExpression();
      label_63:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BITWISE_AND:
          ;
          break;
        default:
          jj_la1[224] = jj_gen;
          break label_63;
        }
        AndOperator();
        UnaryExpression();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
    }
    }
  }

  final public void AndOperator() throws ParseException {
 /*@bgen(jjtree) AndOperator */
  ParsedAndOperator jjtn000 = new ParsedAndOperator(JJTANDOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(BITWISE_AND);
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void UnaryExpression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
      PositiveExpression();
      break;
    case MINUS:
      NegativeExpression();
      break;
    case TILDE:
      BitflipExpression();
      break;
    case THPPPT_DING:
      LogicalNotExpression();
      break;
    default:
      jj_la1[225] = jj_gen;
      if (jj_2_99(2147483647)) {
        CastExpression();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CONTAINER:
        case COUNT:
        case DEF:
        case KEYS:
        case NEXT:
        case OWNER:
        case SOURCE:
        case SUB:
        case SUPER:
        case THIS:
        case CORE:
        case SITE:
        case HERE:
        case TYPE:
        case FALSE:
        case NULL:
        case TRUE:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHAR_LITERAL:
        case SQ_STRING_LITERAL:
        case DQ_STRING_LITERAL:
        case IDENTIFIER:
        case LPAREN:
          IsaExpression();
          break;
        case FOR:
        case IF:
        case WITH:
          ExpressionComprehension();
          break;
        default:
          jj_la1[226] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
  }

  final public void ExpressionComprehension() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FOR:
      ComprehensionForExpression();
      break;
    case IF:
    case WITH:
      ComprehensionConditionalExpression();
      break;
    default:
      jj_la1[227] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void ComprehensionConditionalExpression() throws ParseException {
 /*@bgen(jjtree) ConditionalExpression */
  ParsedConditionalExpression jjtn000 = new ParsedConditionalExpression(JJTCONDITIONALEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IF:
        ComprehensionIfExpression();
        break;
      case WITH:
        ComprehensionWithExpression();
        break;
      default:
        jj_la1[228] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      label_64:
      while (true) {
        if (jj_2_100(2)) {
          ;
        } else {
          break label_64;
        }
        ComprehensionElseIfOrWithExpression();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ELSE:
        ComprehensionElseExpression();
        break;
      default:
        jj_la1[229] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void ComprehensionIfExpression() throws ParseException {
    jj_consume_token(IF);
    ValueExpression();
    ComprehensionBlock();
  }

  final public void ComprehensionWithExpression() throws ParseException {
    jj_consume_token(WITH);
    WithPredicateExpression();
    ComprehensionBlock();
  }

  final public void ComprehensionElseIfOrWithExpression() throws ParseException {
    jj_consume_token(ELSE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IF:
      jj_consume_token(IF);
      ValueExpression();
      break;
    case WITH:
      jj_consume_token(WITH);
      WithPredicateExpression();
      break;
    default:
      jj_la1[230] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    ComprehensionBlock();
  }

  final public void ComprehensionElseExpression() throws ParseException {
    jj_consume_token(ELSE);
    ComprehensionBlock();
  }

  final public void ComprehensionForExpression() throws ParseException {
 /*@bgen(jjtree) ForExpression */
  ParsedForExpression jjtn000 = new ParsedForExpression(JJTFOREXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(FOR);
      Iterator(false);
      label_65:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case AND:
        case OR:
          ;
          break;
        default:
          jj_la1[231] = jj_gen;
          break label_65;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case AND:
          jj_consume_token(AND);
          Iterator(false);
          break;
        case OR:
          jj_consume_token(OR);
          Iterator(true);
          break;
        default:
          jj_la1[232] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      ComprehensionBlock();
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public Block ComprehensionBlock() throws ParseException {
 /*@bgen(jjtree) FunBlock */
    ParsedFunBlock jjtn000 = new ParsedFunBlock(JJTFUNBLOCK);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Block catchBlock;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LEMBEDCODE:
        jj_consume_token(LEMBEDCODE);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CONTAINER:
        case COUNT:
        case DEF:
        case KEYS:
        case NEXT:
        case OWNER:
        case SOURCE:
        case SUB:
        case SUPER:
        case THIS:
        case CORE:
        case SITE:
        case FOR:
        case HERE:
        case IF:
        case TYPE:
        case WITH:
        case FALSE:
        case NULL:
        case TRUE:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHAR_LITERAL:
        case SQ_STRING_LITERAL:
        case DQ_STRING_LITERAL:
        case IDENTIFIER:
        case LSTATIC:
        case LSTATICW:
        case LLITERAL:
        case LCODE:
        case LEMBEDCODE:
        case ARRAYTYPE:
        case TABLETYPE:
        case LPAREN:
        case LBRACKET:
        case THPPPT_DING:
        case TILDE:
        case PLUS:
        case MINUS:
        case NULL_BLOCK:
        case ABSTRACT_NULL:
          ArrayElementExpression();
          label_66:
          while (true) {
            if (jj_2_101(2)) {
              ;
            } else {
              break label_66;
            }
            jj_consume_token(COMMA);
            ArrayElementExpression();
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            jj_consume_token(COMMA);
            break;
          default:
            jj_la1[233] = jj_gen;
            ;
          }
          break;
        default:
          jj_la1[234] = jj_gen;
          ;
        }
        jj_consume_token(REMBEDCODE);
        break;
      case LCODE:
        jj_consume_token(LCODE);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CONTAINER:
        case COUNT:
        case DEF:
        case KEYS:
        case NEXT:
        case OWNER:
        case SOURCE:
        case SUB:
        case SUPER:
        case THIS:
        case CORE:
        case SITE:
        case FOR:
        case HERE:
        case IF:
        case TYPE:
        case WITH:
        case FALSE:
        case NULL:
        case TRUE:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHAR_LITERAL:
        case SQ_STRING_LITERAL:
        case DQ_STRING_LITERAL:
        case IDENTIFIER:
        case LSTATIC:
        case LSTATICW:
        case LLITERAL:
        case LCODE:
        case LEMBEDCODE:
        case ARRAYTYPE:
        case TABLETYPE:
        case LPAREN:
        case LBRACKET:
        case THPPPT_DING:
        case TILDE:
        case PLUS:
        case MINUS:
        case NULL_BLOCK:
        case ABSTRACT_NULL:
          ArrayElementExpression();
          label_67:
          while (true) {
            if (jj_2_102(2)) {
              ;
            } else {
              break label_67;
            }
            jj_consume_token(COMMA);
            ArrayElementExpression();
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            jj_consume_token(COMMA);
            break;
          default:
            jj_la1[235] = jj_gen;
            ;
          }
          break;
        default:
          jj_la1[236] = jj_gen;
          ;
        }
        jj_consume_token(RCODE);
        break;
      default:
        jj_la1[237] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CATCH:
        catchBlock = ComprehensionCatchBlock();
                                               jjtn000.setCatch(catchBlock);
        break;
      default:
        jj_la1[238] = jj_gen;
        ;
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
        {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public Block ComprehensionCatchBlock() throws ParseException {
    Block block = null;
    jj_consume_token(CATCH);
    block = ComprehensionBlock();
        {if (true) return block;}
    throw new Error("Missing return statement in function");
  }

  final public void PositiveExpression() throws ParseException {
    jj_consume_token(PLUS);
    UnaryExpression();
  }

  final public void NegativeExpression() throws ParseException {
 /*@bgen(jjtree) UnaryExpression */
  ParsedUnaryExpression jjtn000 = new ParsedUnaryExpression(JJTUNARYEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      NegateOperator();
      UnaryExpression();
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void NegateOperator() throws ParseException {
 /*@bgen(jjtree) NegateOperator */
  ParsedNegateOperator jjtn000 = new ParsedNegateOperator(JJTNEGATEOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(MINUS);
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void BitflipExpression() throws ParseException {
 /*@bgen(jjtree) UnaryExpression */
  ParsedUnaryExpression jjtn000 = new ParsedUnaryExpression(JJTUNARYEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      BitflipOperator();
      UnaryExpression();
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void BitflipOperator() throws ParseException {
 /*@bgen(jjtree) BitflipOperator */
  ParsedBitflipOperator jjtn000 = new ParsedBitflipOperator(JJTBITFLIPOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(TILDE);
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void LogicalNotExpression() throws ParseException {
 /*@bgen(jjtree) UnaryExpression */
  ParsedUnaryExpression jjtn000 = new ParsedUnaryExpression(JJTUNARYEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      LogicalNotOperator();
      UnaryExpression();
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void LogicalNotOperator() throws ParseException {
 /*@bgen(jjtree) LogicalNotOperator */
  ParsedLogicalNotOperator jjtn000 = new ParsedLogicalNotOperator(JJTLOGICALNOTOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(THPPPT_DING);
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

// This production is to determine lookahead only.  The LOOKAHEAD specifications
// below are not used, but they are there just to indicate that we know about
// this.
  final public void CastLookahead() throws ParseException {
    if (jj_2_103(2)) {
      jj_consume_token(LPAREN);
      PrimitiveType();
    } else if (jj_2_104(2147483647)) {
      jj_consume_token(LPAREN);
      TypeName();
      jj_consume_token(ARRAYTYPE);
    } else if (jj_2_105(2147483647)) {
      jj_consume_token(LPAREN);
      TypeName();
      jj_consume_token(TABLETYPE);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
        jj_consume_token(LPAREN);
        TypeName();
        jj_consume_token(RPAREN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TILDE:
          jj_consume_token(TILDE);
          break;
        case THPPPT_DING:
          jj_consume_token(THPPPT_DING);
          break;
        case PLUS:
          jj_consume_token(PLUS);
          break;
        case MINUS:
          jj_consume_token(MINUS);
          break;
        case LPAREN:
          jj_consume_token(LPAREN);
          break;
        case IDENTIFIER:
          Name();
          break;
        case THIS:
          jj_consume_token(THIS);
          break;
        case SUPER:
          jj_consume_token(SUPER);
          break;
        case FALSE:
        case NULL:
        case TRUE:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHAR_LITERAL:
        case SQ_STRING_LITERAL:
        case DQ_STRING_LITERAL:
          Literal();
          break;
        default:
          jj_la1[239] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[240] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void CastExpression() throws ParseException {
 /*@bgen(jjtree) UnaryExpression */
  ParsedUnaryExpression jjtn000 = new ParsedUnaryExpression(JJTUNARYEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      TypeOperator();
      UnaryExpression();
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void TypeOperator() throws ParseException {
 /*@bgen(jjtree) TypeOperator */
  ParsedTypeOperator jjtn000 = new ParsedTypeOperator(JJTTYPEOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(LPAREN);
      SimpleType();
      jj_consume_token(RPAREN);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void IsaExpression() throws ParseException {
 /*@bgen(jjtree) #IsaExpression(> 1) */
  ParsedIsaExpression jjtn000 = new ParsedIsaExpression(JJTISAEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      PrimaryExpression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ISA:
      case 166:
        IsaOperator();
        break;
      default:
        jj_la1[241] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
      }
    }
  }

  final public void IsaOperator() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ISA:
      jj_consume_token(ISA);
      break;
    case 166:
      jj_consume_token(166);
      break;
    default:
      jj_la1[242] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    SimpleType();
  }

  final public void PrimaryExpression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
      jj_consume_token(LPAREN);
      ValueExpression();
      jj_consume_token(RPAREN);
      break;
    case FALSE:
    case NULL:
    case TRUE:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHAR_LITERAL:
    case SQ_STRING_LITERAL:
    case DQ_STRING_LITERAL:
      Literal();
      break;
    case CONTAINER:
    case COUNT:
    case DEF:
    case KEYS:
    case NEXT:
    case OWNER:
    case SOURCE:
    case SUB:
    case SUPER:
    case THIS:
    case CORE:
    case SITE:
    case HERE:
    case TYPE:
    case IDENTIFIER:
      ValueInstance();
      break;
    default:
      jj_la1[243] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void ValueInstance() throws ParseException {
 /*@bgen(jjtree) Construction */
  ParsedConstruction jjtn000 = new ParsedConstruction(JJTCONSTRUCTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      ComplexName();
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void Literal() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_LITERAL:
      IntegerLiteral();
      break;
    case FLOATING_POINT_LITERAL:
      FloatingPointLiteral();
      break;
    case CHAR_LITERAL:
      CharLiteral();
      break;
    case SQ_STRING_LITERAL:
      SingleQuoteStringLiteral();
      break;
    case DQ_STRING_LITERAL:
      DoubleQuoteStringLiteral();
      break;
    case FALSE:
    case TRUE:
      BooleanLiteral();
      break;
    case NULL:
      NullLiteral();
      break;
    default:
      jj_la1[244] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void IntegerLiteral() throws ParseException {
 /*@bgen(jjtree) IntegerLiteral */
  ParsedIntegerLiteral jjtn000 = new ParsedIntegerLiteral(JJTINTEGERLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(INTEGER_LITERAL);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.setValue(t.image);
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void FloatingPointLiteral() throws ParseException {
 /*@bgen(jjtree) FloatingPointLiteral */
  ParsedFloatingPointLiteral jjtn000 = new ParsedFloatingPointLiteral(JJTFLOATINGPOINTLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(FLOATING_POINT_LITERAL);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.setValue(t.image);
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void CharLiteral() throws ParseException {
 /*@bgen(jjtree) CharLiteral */
  ParsedCharLiteral jjtn000 = new ParsedCharLiteral(JJTCHARLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(CHAR_LITERAL);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      // strip off the leading and trailing quotes
      String str = t.image.substring(1, t.image.length() - 1);
      jjtn000.setValue(str);
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void SingleQuoteStringLiteral() throws ParseException {
 /*@bgen(jjtree) StringLiteral */
  ParsedStringLiteral jjtn000 = new ParsedStringLiteral(JJTSTRINGLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(SQ_STRING_LITERAL);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      // strip off the leading and trailing quotes
      String str = t.image.substring(1, t.image.length() - 1);
      jjtn000.setValue(str, true);
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void DoubleQuoteStringLiteral() throws ParseException {
 /*@bgen(jjtree) StringLiteral */
  ParsedStringLiteral jjtn000 = new ParsedStringLiteral(JJTSTRINGLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(DQ_STRING_LITERAL);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      // strip off the leading and trailing quotes
      String str = t.image.substring(1, t.image.length() - 1);
      jjtn000.setValue(str, false);
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void BooleanLiteral() throws ParseException {
 /*@bgen(jjtree) BooleanLiteral */
  ParsedBooleanLiteral jjtn000 = new ParsedBooleanLiteral(JJTBOOLEANLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TRUE:
        jj_consume_token(TRUE);
               jjtree.closeNodeScope(jjtn000, true);
               jjtc000 = false;
               jjtn000.setValue(true);
        break;
      case FALSE:
        jj_consume_token(FALSE);
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
                jjtn000.setValue(false);
        break;
      default:
        jj_la1[245] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void NullLiteral() throws ParseException {
 /*@bgen(jjtree) NullLiteral */
  ParsedNullLiteral jjtn000 = new ParsedNullLiteral(JJTNULLLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(NULL);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtn000.setPrimitive();
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public Block NullBlock() throws ParseException {
 /*@bgen(jjtree) NullLiteral */
  ParsedNullLiteral jjtn000 = new ParsedNullLiteral(JJTNULLLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NULL_BLOCK:
        jj_consume_token(NULL_BLOCK);
               jjtn000.setStatic();
        break;
      case ABSTRACT_NULL:
        jj_consume_token(ABSTRACT_NULL);
               jjtn000.setAbstract();
        break;
      default:
        jj_la1[246] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
        {if (true) return jjtn000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public void ExternalBlock() throws ParseException {
 /*@bgen(jjtree) NullLiteral */
  ParsedNullLiteral jjtn000 = new ParsedNullLiteral(JJTNULLLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(EXTERNAL_BLOCK);
               jjtree.closeNodeScope(jjtn000, true);
               jjtc000 = false;
               jjtn000.setExternal();
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  private boolean jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  private boolean jj_2_28(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  private boolean jj_2_29(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  private boolean jj_2_30(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  private boolean jj_2_31(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_31(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(30, xla); }
  }

  private boolean jj_2_32(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_32(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(31, xla); }
  }

  private boolean jj_2_33(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_33(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(32, xla); }
  }

  private boolean jj_2_34(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_34(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(33, xla); }
  }

  private boolean jj_2_35(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_35(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(34, xla); }
  }

  private boolean jj_2_36(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_36(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(35, xla); }
  }

  private boolean jj_2_37(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_37(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(36, xla); }
  }

  private boolean jj_2_38(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_38(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(37, xla); }
  }

  private boolean jj_2_39(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_39(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(38, xla); }
  }

  private boolean jj_2_40(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_40(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(39, xla); }
  }

  private boolean jj_2_41(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_41(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(40, xla); }
  }

  private boolean jj_2_42(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_42(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(41, xla); }
  }

  private boolean jj_2_43(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_43(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(42, xla); }
  }

  private boolean jj_2_44(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_44(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(43, xla); }
  }

  private boolean jj_2_45(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_45(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(44, xla); }
  }

  private boolean jj_2_46(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_46(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(45, xla); }
  }

  private boolean jj_2_47(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_47(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(46, xla); }
  }

  private boolean jj_2_48(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_48(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(47, xla); }
  }

  private boolean jj_2_49(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_49(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(48, xla); }
  }

  private boolean jj_2_50(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_50(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(49, xla); }
  }

  private boolean jj_2_51(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_51(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(50, xla); }
  }

  private boolean jj_2_52(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_52(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(51, xla); }
  }

  private boolean jj_2_53(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_53(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(52, xla); }
  }

  private boolean jj_2_54(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_54(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(53, xla); }
  }

  private boolean jj_2_55(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_55(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(54, xla); }
  }

  private boolean jj_2_56(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_56(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(55, xla); }
  }

  private boolean jj_2_57(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_57(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(56, xla); }
  }

  private boolean jj_2_58(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_58(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(57, xla); }
  }

  private boolean jj_2_59(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_59(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(58, xla); }
  }

  private boolean jj_2_60(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_60(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(59, xla); }
  }

  private boolean jj_2_61(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_61(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(60, xla); }
  }

  private boolean jj_2_62(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_62(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(61, xla); }
  }

  private boolean jj_2_63(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_63(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(62, xla); }
  }

  private boolean jj_2_64(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_64(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(63, xla); }
  }

  private boolean jj_2_65(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_65(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(64, xla); }
  }

  private boolean jj_2_66(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_66(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(65, xla); }
  }

  private boolean jj_2_67(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_67(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(66, xla); }
  }

  private boolean jj_2_68(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_68(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(67, xla); }
  }

  private boolean jj_2_69(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_69(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(68, xla); }
  }

  private boolean jj_2_70(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_70(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(69, xla); }
  }

  private boolean jj_2_71(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_71(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(70, xla); }
  }

  private boolean jj_2_72(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_72(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(71, xla); }
  }

  private boolean jj_2_73(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_73(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(72, xla); }
  }

  private boolean jj_2_74(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_74(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(73, xla); }
  }

  private boolean jj_2_75(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_75(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(74, xla); }
  }

  private boolean jj_2_76(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_76(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(75, xla); }
  }

  private boolean jj_2_77(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_77(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(76, xla); }
  }

  private boolean jj_2_78(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_78(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(77, xla); }
  }

  private boolean jj_2_79(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_79(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(78, xla); }
  }

  private boolean jj_2_80(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_80(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(79, xla); }
  }

  private boolean jj_2_81(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_81(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(80, xla); }
  }

  private boolean jj_2_82(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_82(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(81, xla); }
  }

  private boolean jj_2_83(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_83(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(82, xla); }
  }

  private boolean jj_2_84(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_84(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(83, xla); }
  }

  private boolean jj_2_85(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_85(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(84, xla); }
  }

  private boolean jj_2_86(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_86(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(85, xla); }
  }

  private boolean jj_2_87(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_87(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(86, xla); }
  }

  private boolean jj_2_88(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_88(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(87, xla); }
  }

  private boolean jj_2_89(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_89(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(88, xla); }
  }

  private boolean jj_2_90(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_90(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(89, xla); }
  }

  private boolean jj_2_91(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_91(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(90, xla); }
  }

  private boolean jj_2_92(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_92(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(91, xla); }
  }

  private boolean jj_2_93(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_93(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(92, xla); }
  }

  private boolean jj_2_94(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_94(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(93, xla); }
  }

  private boolean jj_2_95(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_95(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(94, xla); }
  }

  private boolean jj_2_96(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_96(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(95, xla); }
  }

  private boolean jj_2_97(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_97(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(96, xla); }
  }

  private boolean jj_2_98(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_98(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(97, xla); }
  }

  private boolean jj_2_99(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_99(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(98, xla); }
  }

  private boolean jj_2_100(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_100(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(99, xla); }
  }

  private boolean jj_2_101(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_101(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(100, xla); }
  }

  private boolean jj_2_102(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_102(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(101, xla); }
  }

  private boolean jj_2_103(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_103(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(102, xla); }
  }

  private boolean jj_2_104(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_104(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(103, xla); }
  }

  private boolean jj_2_105(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_105(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(104, xla); }
  }

  private boolean jj_3R_153() {
    if (jj_3R_258()) return true;
    return false;
  }

  private boolean jj_3R_161() {
    if (jj_3R_257()) return true;
    return false;
  }

  private boolean jj_3R_152() {
    if (jj_3R_113()) return true;
    return false;
  }

  private boolean jj_3R_151() {
    if (jj_3R_257()) return true;
    return false;
  }

  private boolean jj_3R_150() {
    if (jj_3R_131()) return true;
    return false;
  }

  private boolean jj_3R_86() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_150()) {
    jj_scanpos = xsp;
    if (jj_3R_151()) {
    jj_scanpos = xsp;
    if (jj_3R_152()) return true;
    }
    }
    if (jj_3R_153()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_153()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_265() {
    if (jj_3R_131()) return true;
    return false;
  }

  private boolean jj_3_68() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_114()) return true;
    return false;
  }

  private boolean jj_3R_263() {
    if (jj_3R_113()) return true;
    return false;
  }

  private boolean jj_3R_160() {
    if (jj_3R_131()) return true;
    return false;
  }

  private boolean jj_3R_317() {
    if (jj_3R_127()) return true;
    return false;
  }

  private boolean jj_3R_316() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_114()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_256() {
    if (jj_3R_262()) return true;
    return false;
  }

  private boolean jj_3R_257() {
    if (jj_3R_113()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_316()) {
    jj_scanpos = xsp;
    if (jj_3R_317()) return true;
    }
    return false;
  }

  private boolean jj_3R_322() {
    if (jj_scan_token(THIS)) return true;
    return false;
  }

  private boolean jj_3R_255() {
    if (jj_3R_263()) return true;
    return false;
  }

  private boolean jj_3R_264() {
    if (jj_3R_262()) return true;
    return false;
  }

  private boolean jj_3R_262() {
    if (jj_3R_322()) return true;
    return false;
  }

  private boolean jj_3R_199() {
    if (jj_3R_263()) return true;
    return false;
  }

  private boolean jj_3R_163() {
    if (jj_scan_token(COMMA)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_264()) {
    jj_scanpos = xsp;
    if (jj_3R_265()) {
    jj_scanpos = xsp;
    if (jj_3R_266()) {
    jj_scanpos = xsp;
    if (jj_3R_267()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_159() {
    if (jj_3R_262()) return true;
    return false;
  }

  private boolean jj_3R_95() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_159()) {
    jj_scanpos = xsp;
    if (jj_3R_160()) {
    jj_scanpos = xsp;
    if (jj_3R_161()) {
    jj_scanpos = xsp;
    if (jj_3R_162()) return true;
    }
    }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_163()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_147() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_254()) {
    jj_scanpos = xsp;
    if (jj_3R_255()) {
    jj_scanpos = xsp;
    if (jj_3R_256()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_254() {
    if (jj_3R_131()) return true;
    return false;
  }

  private boolean jj_3R_198() {
    if (jj_3R_131()) return true;
    return false;
  }

  private boolean jj_3R_115() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_198()) {
    jj_scanpos = xsp;
    if (jj_3R_199()) return true;
    }
    return false;
  }

  private boolean jj_3R_306() {
    if (jj_scan_token(DYNAMIC)) return true;
    return false;
  }

  private boolean jj_3R_305() {
    if (jj_scan_token(GLOBAL)) return true;
    return false;
  }

  private boolean jj_3R_304() {
    if (jj_scan_token(STATIC)) return true;
    return false;
  }

  private boolean jj_3R_244() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_304()) {
    jj_scanpos = xsp;
    if (jj_3R_305()) {
    jj_scanpos = xsp;
    if (jj_3R_306()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_303() {
    if (jj_scan_token(PUBLIC)) return true;
    return false;
  }

  private boolean jj_3R_302() {
    if (jj_scan_token(LOCAL)) return true;
    return false;
  }

  private boolean jj_3R_242() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_302()) {
    jj_scanpos = xsp;
    if (jj_3R_303()) return true;
    }
    return false;
  }

  private boolean jj_3R_285() {
    if (jj_3R_124()) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_278()) return true;
    return false;
  }

  private boolean jj_3R_343() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_124()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_342() {
    if (jj_3R_403()) return true;
    return false;
  }

  private boolean jj_3R_341() {
    if (jj_3R_402()) return true;
    return false;
  }

  private boolean jj_3R_340() {
    if (jj_3R_401()) return true;
    return false;
  }

  private boolean jj_3R_339() {
    if (jj_3R_400()) return true;
    return false;
  }

  private boolean jj_3_65() {
    if (jj_3R_112()) return true;
    return false;
  }

  private boolean jj_3R_279() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_339()) {
    jj_scanpos = xsp;
    if (jj_3R_340()) {
    jj_scanpos = xsp;
    if (jj_3R_341()) {
    jj_scanpos = xsp;
    if (jj_3R_342()) {
    jj_scanpos = xsp;
    if (jj_3R_343()) return true;
    }
    }
    }
    }
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_278()) return true;
    return false;
  }

  private boolean jj_3R_209() {
    if (jj_3R_285()) return true;
    return false;
  }

  private boolean jj_3R_208() {
    if (jj_3R_112()) return true;
    return false;
  }

  private boolean jj_3R_122() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_208()) {
    jj_scanpos = xsp;
    if (jj_3R_209()) return true;
    }
    return false;
  }

  private boolean jj_3R_191() {
    if (jj_3R_279()) return true;
    return false;
  }

  private boolean jj_3R_190() {
    if (jj_3R_112()) return true;
    return false;
  }

  private boolean jj_3R_110() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_190()) {
    jj_scanpos = xsp;
    if (jj_3R_191()) return true;
    }
    return false;
  }

  private boolean jj_3R_314() {
    if (jj_3R_79()) return true;
    return false;
  }

  private boolean jj_3R_338() {
    if (jj_3R_399()) return true;
    return false;
  }

  private boolean jj_3R_337() {
    if (jj_3R_398()) return true;
    return false;
  }

  private boolean jj_3R_336() {
    if (jj_3R_124()) return true;
    return false;
  }

  private boolean jj_3R_335() {
    if (jj_3R_276()) return true;
    return false;
  }

  private boolean jj_3R_334() {
    if (jj_3R_397()) return true;
    return false;
  }

  private boolean jj_3R_333() {
    if (jj_3R_274()) return true;
    return false;
  }

  private boolean jj_3_64() {
    if (jj_3R_111()) return true;
    return false;
  }

  private boolean jj_3_55() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_108()) return true;
    return false;
  }

  private boolean jj_3R_278() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_333()) {
    jj_scanpos = xsp;
    if (jj_3R_334()) {
    jj_scanpos = xsp;
    if (jj_3R_335()) {
    jj_scanpos = xsp;
    if (jj_3R_336()) {
    jj_scanpos = xsp;
    if (jj_3R_337()) {
    jj_scanpos = xsp;
    if (jj_3R_338()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_63() {
    if (jj_scan_token(LEMBEDCODE)) return true;
    if (jj_3R_108()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(116)) {
    jj_scanpos = xsp;
    if (jj_scan_token(114)) return true;
    }
    return false;
  }

  private boolean jj_3R_189() {
    if (jj_3R_278()) return true;
    return false;
  }

  private boolean jj_3R_188() {
    if (jj_3R_111()) return true;
    return false;
  }

  private boolean jj_3R_187() {
    if (jj_3R_277()) return true;
    return false;
  }

  private boolean jj_3_62() {
    if (jj_3R_103()) return true;
    return false;
  }

  private boolean jj_3R_108() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_187()) {
    jj_scanpos = xsp;
    if (jj_3R_188()) {
    jj_scanpos = xsp;
    if (jj_3R_189()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_60() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_110()) return true;
    return false;
  }

  private boolean jj_3R_251() {
    if (jj_3R_95()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_62()) {
    jj_scanpos = xsp;
    if (jj_3R_314()) return true;
    }
    if (jj_3R_106()) return true;
    return false;
  }

  private boolean jj_3_61() {
    if (jj_3R_103()) return true;
    return false;
  }

  private boolean jj_3_56() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_109()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_55()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_59() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_110()) return true;
    return false;
  }

  private boolean jj_3R_313() {
    if (jj_3R_79()) return true;
    return false;
  }

  private boolean jj_3R_312() {
    if (jj_3R_103()) return true;
    return false;
  }

  private boolean jj_3R_250() {
    if (jj_3R_95()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_312()) {
    jj_scanpos = xsp;
    if (jj_3R_313()) return true;
    }
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_278()) return true;
    xsp = jj_scanpos;
    if (jj_scan_token(115)) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_58() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_108()) return true;
    return false;
  }

  private boolean jj_3R_462() {
    if (jj_scan_token(LCODE)) return true;
    if (jj_3R_110()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_60()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_scan_token(116)) jj_scanpos = xsp;
    if (jj_scan_token(RCODE)) return true;
    return false;
  }

  private boolean jj_3R_398() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(106)) {
    jj_scanpos = xsp;
    if (jj_3R_462()) return true;
    }
    return false;
  }

  private boolean jj_3_53() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_108()) return true;
    return false;
  }

  private boolean jj_3R_321() {
    if (jj_scan_token(LCODE)) return true;
    if (jj_3R_110()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_59()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_scan_token(116)) jj_scanpos = xsp;
    if (jj_scan_token(RCODE)) return true;
    return false;
  }

  private boolean jj_3R_330() {
    if (jj_scan_token(ABSTRACT_NULL)) return true;
    return false;
  }

  private boolean jj_3R_329() {
    if (jj_scan_token(NULL_BLOCK)) return true;
    return false;
  }

  private boolean jj_3R_260() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(106)) {
    jj_scanpos = xsp;
    if (jj_3R_321()) return true;
    }
    return false;
  }

  private boolean jj_3R_276() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_329()) {
    jj_scanpos = xsp;
    if (jj_3R_330()) return true;
    }
    return false;
  }

  private boolean jj_3_54() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_108()) return true;
    return false;
  }

  private boolean jj_3R_463() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_108()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_58()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_scan_token(116)) jj_scanpos = xsp;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_491() {
    if (jj_scan_token(NULL)) return true;
    return false;
  }

  private boolean jj_3R_527() {
    if (jj_scan_token(FALSE)) return true;
    return false;
  }

  private boolean jj_3R_526() {
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  private boolean jj_3R_399() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(103)) {
    jj_scanpos = xsp;
    if (jj_3R_463()) return true;
    }
    return false;
  }

  private boolean jj_3R_490() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_526()) {
    jj_scanpos = xsp;
    if (jj_3R_527()) return true;
    }
    return false;
  }

  private boolean jj_3R_107() {
    if (jj_3R_177()) return true;
    return false;
  }

  private boolean jj_3R_109() {
    if (jj_scan_token(ELLIPSIS)) return true;
    return false;
  }

  private boolean jj_3R_268() {
    if (jj_3R_177()) return true;
    return false;
  }

  private boolean jj_3R_403() {
    if (jj_scan_token(DQ_STRING_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_320() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_108()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_54()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3_56()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(116)) jj_scanpos = xsp;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3_57() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_109()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(116)) jj_scanpos = xsp;
    if (jj_3R_108()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_53()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_scan_token(116)) jj_scanpos = xsp;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_402() {
    if (jj_scan_token(SQ_STRING_LITERAL)) return true;
    return false;
  }

  private boolean jj_3_52() {
    if (jj_3R_95()) return true;
    if (jj_3R_79()) return true;
    Token xsp;
    if (jj_3R_107()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_107()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(ASSIGN)) return true;
    return false;
  }

  private boolean jj_3R_259() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(103)) {
    jj_scanpos = xsp;
    if (jj_3_57()) {
    jj_scanpos = xsp;
    if (jj_3R_320()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_51() {
    if (jj_3R_95()) return true;
    if (jj_3R_79()) return true;
    if (jj_scan_token(ASSIGN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(97)) {
    jj_scanpos = xsp;
    if (jj_scan_token(106)) return true;
    }
    return false;
  }

  private boolean jj_3R_401() {
    if (jj_scan_token(CHAR_LITERAL)) return true;
    return false;
  }

  private boolean jj_3_50() {
    if (jj_3R_95()) return true;
    if (jj_3R_79()) return true;
    if (jj_scan_token(ASSIGN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(113)) {
    jj_scanpos = xsp;
    if (jj_scan_token(103)) return true;
    }
    return false;
  }

  private boolean jj_3_49() {
    if (jj_3R_95()) return true;
    if (jj_3R_101()) return true;
    if (jj_scan_token(ASSIGN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(97)) {
    jj_scanpos = xsp;
    if (jj_scan_token(106)) return true;
    }
    return false;
  }

  private boolean jj_3R_174() {
    if (jj_3R_95()) return true;
    if (jj_3R_79()) return true;
    Token xsp;
    if (jj_3R_268()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_268()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_105()) return true;
    xsp = jj_scanpos;
    if (jj_scan_token(115)) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_48() {
    if (jj_3R_95()) return true;
    if (jj_3R_101()) return true;
    if (jj_scan_token(ASSIGN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(113)) {
    jj_scanpos = xsp;
    if (jj_scan_token(103)) return true;
    }
    return false;
  }

  private boolean jj_3R_297() {
    if (jj_3R_379()) return true;
    return false;
  }

  private boolean jj_3R_173() {
    if (jj_3R_95()) return true;
    if (jj_3R_79()) return true;
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_260()) return true;
    return false;
  }

  private boolean jj_3R_489() {
    if (jj_scan_token(FLOATING_POINT_LITERAL)) return true;
    return false;
  }

  private boolean jj_3_47() {
    if (jj_3R_86()) return true;
    if (jj_3R_79()) return true;
    if (jj_scan_token(ASSIGN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(97)) {
    jj_scanpos = xsp;
    if (jj_scan_token(106)) return true;
    }
    return false;
  }

  private boolean jj_3R_172() {
    if (jj_3R_95()) return true;
    if (jj_3R_79()) return true;
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_259()) return true;
    return false;
  }

  private boolean jj_3_46() {
    if (jj_3R_86()) return true;
    if (jj_3R_79()) return true;
    if (jj_scan_token(ASSIGN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(113)) {
    jj_scanpos = xsp;
    if (jj_scan_token(103)) return true;
    }
    return false;
  }

  private boolean jj_3R_171() {
    if (jj_3R_95()) return true;
    if (jj_3R_101()) return true;
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_260()) return true;
    return false;
  }

  private boolean jj_3_45() {
    if (jj_3R_104()) return true;
    if (jj_3R_79()) return true;
    if (jj_3R_106()) return true;
    return false;
  }

  private boolean jj_3R_170() {
    if (jj_3R_95()) return true;
    if (jj_3R_101()) return true;
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_259()) return true;
    return false;
  }

  private boolean jj_3R_488() {
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    return false;
  }

  private boolean jj_3_44() {
    if (jj_3R_104()) return true;
    if (jj_3R_79()) return true;
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_105()) return true;
    return false;
  }

  private boolean jj_3R_169() {
    if (jj_3R_86()) return true;
    if (jj_3R_79()) return true;
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_260()) return true;
    return false;
  }

  private boolean jj_3_43() {
    if (jj_3R_86()) return true;
    if (jj_3R_101()) return true;
    if (jj_scan_token(ASSIGN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(97)) {
    jj_scanpos = xsp;
    if (jj_scan_token(106)) return true;
    }
    return false;
  }

  private boolean jj_3R_435() {
    if (jj_3R_491()) return true;
    return false;
  }

  private boolean jj_3R_168() {
    if (jj_3R_86()) return true;
    if (jj_3R_79()) return true;
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_259()) return true;
    return false;
  }

  private boolean jj_3R_434() {
    if (jj_3R_490()) return true;
    return false;
  }

  private boolean jj_3_42() {
    if (jj_3R_86()) return true;
    if (jj_3R_101()) return true;
    if (jj_scan_token(ASSIGN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(113)) {
    jj_scanpos = xsp;
    if (jj_scan_token(103)) return true;
    }
    return false;
  }

  private boolean jj_3R_167() {
    if (jj_3R_104()) return true;
    if (jj_3R_79()) return true;
    if (jj_3R_106()) return true;
    return false;
  }

  private boolean jj_3R_433() {
    if (jj_3R_403()) return true;
    return false;
  }

  private boolean jj_3R_432() {
    if (jj_3R_402()) return true;
    return false;
  }

  private boolean jj_3R_166() {
    if (jj_3R_104()) return true;
    if (jj_3R_79()) return true;
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_105()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(115)) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_311() {
    if (jj_3R_79()) return true;
    return false;
  }

  private boolean jj_3R_431() {
    if (jj_3R_401()) return true;
    return false;
  }

  private boolean jj_3R_165() {
    if (jj_3R_86()) return true;
    if (jj_3R_101()) return true;
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_260()) return true;
    return false;
  }

  private boolean jj_3R_430() {
    if (jj_3R_489()) return true;
    return false;
  }

  private boolean jj_3R_94() {
    if (jj_3R_101()) return true;
    return false;
  }

  private boolean jj_3R_429() {
    if (jj_3R_488()) return true;
    return false;
  }

  private boolean jj_3R_164() {
    if (jj_3R_86()) return true;
    if (jj_3R_101()) return true;
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_259()) return true;
    return false;
  }

  private boolean jj_3R_296() {
    if (jj_3R_68()) return true;
    return false;
  }

  private boolean jj_3R_379() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_429()) {
    jj_scanpos = xsp;
    if (jj_3R_430()) {
    jj_scanpos = xsp;
    if (jj_3R_431()) {
    jj_scanpos = xsp;
    if (jj_3R_432()) {
    jj_scanpos = xsp;
    if (jj_3R_433()) {
    jj_scanpos = xsp;
    if (jj_3R_434()) {
    jj_scanpos = xsp;
    if (jj_3R_435()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_98() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_164()) {
    jj_scanpos = xsp;
    if (jj_3R_165()) {
    jj_scanpos = xsp;
    if (jj_3R_166()) {
    jj_scanpos = xsp;
    if (jj_3R_167()) {
    jj_scanpos = xsp;
    if (jj_3R_168()) {
    jj_scanpos = xsp;
    if (jj_3R_169()) {
    jj_scanpos = xsp;
    if (jj_3R_170()) {
    jj_scanpos = xsp;
    if (jj_3R_171()) {
    jj_scanpos = xsp;
    if (jj_3R_172()) {
    jj_scanpos = xsp;
    if (jj_3R_173()) {
    jj_scanpos = xsp;
    if (jj_3R_174()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_41() {
    if (jj_3R_103()) return true;
    return false;
  }

  private boolean jj_3R_665() {
    if (jj_3R_436()) return true;
    return false;
  }

  private boolean jj_3R_653() {
    if (jj_3R_661()) return true;
    return false;
  }

  private boolean jj_3R_102() {
    if (jj_3R_177()) return true;
    return false;
  }

  private boolean jj_3R_310() {
    if (jj_3R_79()) return true;
    return false;
  }

  private boolean jj_3R_660() {
    if (jj_3R_665()) return true;
    return false;
  }

  private boolean jj_3R_93() {
    if (jj_3R_79()) return true;
    return false;
  }

  private boolean jj_3R_309() {
    if (jj_3R_103()) return true;
    return false;
  }

  private boolean jj_3R_659() {
    if (jj_3R_379()) return true;
    return false;
  }

  private boolean jj_3R_658() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_124()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_248() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_309()) {
    jj_scanpos = xsp;
    if (jj_3R_310()) return true;
    }
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_278()) return true;
    xsp = jj_scanpos;
    if (jj_scan_token(115)) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_652() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_658()) {
    jj_scanpos = xsp;
    if (jj_3R_659()) {
    jj_scanpos = xsp;
    if (jj_3R_660()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_100() {
    if (jj_3R_79()) return true;
    return false;
  }

  private boolean jj_3R_261() {
    if (jj_3R_177()) return true;
    return false;
  }

  private boolean jj_3_40() {
    if (jj_3R_103()) return true;
    return false;
  }

  private boolean jj_3R_661() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(63)) {
    jj_scanpos = xsp;
    if (jj_scan_token(166)) return true;
    }
    if (jj_3R_115()) return true;
    return false;
  }

  private boolean jj_3R_249() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_40()) {
    jj_scanpos = xsp;
    if (jj_3R_311()) return true;
    }
    if (jj_3R_106()) return true;
    return false;
  }

  private boolean jj_3_39() {
    if (jj_3R_79()) return true;
    Token xsp;
    if (jj_3R_102()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_102()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(ASSIGN)) return true;
    return false;
  }

  private boolean jj_3_38() {
    if (jj_3R_79()) return true;
    if (jj_scan_token(ASSIGN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(97)) {
    jj_scanpos = xsp;
    if (jj_scan_token(106)) return true;
    }
    return false;
  }

  private boolean jj_3R_646() {
    if (jj_3R_652()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_653()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_37() {
    if (jj_3R_79()) return true;
    if (jj_scan_token(ASSIGN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(113)) {
    jj_scanpos = xsp;
    if (jj_scan_token(103)) return true;
    }
    return false;
  }

  private boolean jj_3R_97() {
    if (jj_3R_79()) return true;
    return false;
  }

  private boolean jj_3R_92() {
    if (jj_3R_103()) return true;
    return false;
  }

  private boolean jj_3_36() {
    if (jj_3R_101()) return true;
    if (jj_scan_token(ASSIGN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(97)) {
    jj_scanpos = xsp;
    if (jj_scan_token(106)) return true;
    }
    return false;
  }

  private boolean jj_3R_158() {
    if (jj_3R_79()) return true;
    Token xsp;
    if (jj_3R_261()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_261()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_105()) return true;
    xsp = jj_scanpos;
    if (jj_scan_token(115)) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_651() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_115()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3_35() {
    if (jj_3R_101()) return true;
    if (jj_scan_token(ASSIGN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(113)) {
    jj_scanpos = xsp;
    if (jj_scan_token(103)) return true;
    }
    return false;
  }

  private boolean jj_3R_157() {
    if (jj_3R_79()) return true;
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_260()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(115)) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_99() {
    if (jj_3R_103()) return true;
    return false;
  }

  private boolean jj_3R_156() {
    if (jj_3R_79()) return true;
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_259()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(115)) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_645() {
    if (jj_3R_651()) return true;
    if (jj_3R_624()) return true;
    return false;
  }

  private boolean jj_3_105() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_113()) return true;
    if (jj_scan_token(TABLETYPE)) return true;
    return false;
  }

  private boolean jj_3R_155() {
    if (jj_3R_101()) return true;
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_260()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(115)) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_91() {
    if (jj_3R_95()) return true;
    return false;
  }

  private boolean jj_3_104() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_113()) return true;
    if (jj_scan_token(ARRAYTYPE)) return true;
    return false;
  }

  private boolean jj_3R_154() {
    if (jj_3R_101()) return true;
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_259()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(115)) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_224() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_113()) return true;
    if (jj_scan_token(RPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(123)) {
    jj_scanpos = xsp;
    if (jj_scan_token(122)) {
    jj_scanpos = xsp;
    if (jj_scan_token(139)) {
    jj_scanpos = xsp;
    if (jj_scan_token(140)) {
    jj_scanpos = xsp;
    if (jj_scan_token(107)) {
    jj_scanpos = xsp;
    if (jj_3R_296()) {
    jj_scanpos = xsp;
    if (jj_scan_token(27)) {
    jj_scanpos = xsp;
    if (jj_scan_token(26)) {
    jj_scanpos = xsp;
    if (jj_3R_297()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_87() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_154()) {
    jj_scanpos = xsp;
    if (jj_3R_155()) {
    jj_scanpos = xsp;
    if (jj_3R_156()) {
    jj_scanpos = xsp;
    if (jj_3R_157()) {
    jj_scanpos = xsp;
    if (jj_3R_158()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_96() {
    if (jj_3R_103()) return true;
    return false;
  }

  private boolean jj_3_34() {
    if (jj_3R_95()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_99()) {
    jj_scanpos = xsp;
    if (jj_3R_100()) return true;
    }
    if (jj_scan_token(ASSIGN)) return true;
    return false;
  }

  private boolean jj_3R_223() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_113()) return true;
    if (jj_scan_token(TABLETYPE)) return true;
    return false;
  }

  private boolean jj_3_33() {
    if (jj_3R_98()) return true;
    return false;
  }

  private boolean jj_3R_222() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_113()) return true;
    if (jj_scan_token(ARRAYTYPE)) return true;
    return false;
  }

  private boolean jj_3R_145() {
    if (jj_3R_251()) return true;
    return false;
  }

  private boolean jj_3R_129() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_103()) {
    jj_scanpos = xsp;
    if (jj_3R_222()) {
    jj_scanpos = xsp;
    if (jj_3R_223()) {
    jj_scanpos = xsp;
    if (jj_3R_224()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3_103() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_131()) return true;
    return false;
  }

  private boolean jj_3R_144() {
    if (jj_3R_250()) return true;
    return false;
  }

  private boolean jj_3R_89() {
    if (jj_3R_79()) return true;
    return false;
  }

  private boolean jj_3_32() {
    if (jj_3R_95()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_96()) {
    jj_scanpos = xsp;
    if (jj_3R_97()) return true;
    }
    return false;
  }

  private boolean jj_3R_143() {
    if (jj_3R_98()) return true;
    return false;
  }

  private boolean jj_3R_90() {
    if (jj_3R_86()) return true;
    return false;
  }

  private boolean jj_3_31() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_90()) {
    jj_scanpos = xsp;
    if (jj_3R_91()) return true;
    }
    xsp = jj_scanpos;
    if (jj_3R_92()) {
    jj_scanpos = xsp;
    if (jj_3R_93()) {
    jj_scanpos = xsp;
    if (jj_3R_94()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_78() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_143()) {
    jj_scanpos = xsp;
    if (jj_3R_144()) {
    jj_scanpos = xsp;
    if (jj_3R_145()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_308() {
    if (jj_3R_147()) return true;
    if (jj_3R_101()) return true;
    return false;
  }

  private boolean jj_3R_650() {
    if (jj_scan_token(THPPPT_DING)) return true;
    return false;
  }

  private boolean jj_3R_644() {
    if (jj_3R_650()) return true;
    if (jj_3R_624()) return true;
    return false;
  }

  private boolean jj_3R_595() {
    if (jj_scan_token(TILDE)) return true;
    return false;
  }

  private boolean jj_3R_88() {
    if (jj_3R_103()) return true;
    return false;
  }

  private boolean jj_3_30() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_88()) {
    jj_scanpos = xsp;
    if (jj_3R_89()) return true;
    }
    if (jj_scan_token(ASSIGN)) return true;
    return false;
  }

  private boolean jj_3R_631() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_252()) return true;
    return false;
  }

  private boolean jj_3_29() {
    if (jj_3R_87()) return true;
    return false;
  }

  private boolean jj_3R_643() {
    if (jj_3R_595()) return true;
    if (jj_3R_624()) return true;
    return false;
  }

  private boolean jj_3R_142() {
    if (jj_3R_249()) return true;
    return false;
  }

  private boolean jj_3R_674() {
    if (jj_scan_token(OR)) return true;
    if (jj_3R_348()) return true;
    return false;
  }

  private boolean jj_3R_649() {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  private boolean jj_3R_141() {
    if (jj_3R_248()) return true;
    return false;
  }

  private boolean jj_3_102() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_108()) return true;
    return false;
  }

  private boolean jj_3_101() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_108()) return true;
    return false;
  }

  private boolean jj_3R_140() {
    if (jj_3R_87()) return true;
    return false;
  }

  private boolean jj_3R_642() {
    if (jj_3R_649()) return true;
    if (jj_3R_624()) return true;
    return false;
  }

  private boolean jj_3R_77() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_140()) {
    jj_scanpos = xsp;
    if (jj_3R_141()) {
    jj_scanpos = xsp;
    if (jj_3R_142()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_621() {
    if (jj_3R_252()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_631()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_641() {
    if (jj_scan_token(PLUS)) return true;
    if (jj_3R_624()) return true;
    return false;
  }

  private boolean jj_3R_604() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_621()) jj_scanpos = xsp;
    if (jj_3R_106()) return true;
    return false;
  }

  private boolean jj_3R_149() {
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_scan_token(EXTERNAL_BLOCK)) return true;
    return false;
  }

  private boolean jj_3R_683() {
    if (jj_scan_token(CATCH)) return true;
    if (jj_3R_667()) return true;
    return false;
  }

  private boolean jj_3R_673() {
    if (jj_scan_token(AND)) return true;
    if (jj_3R_348()) return true;
    return false;
  }

  private boolean jj_3R_666() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_673()) {
    jj_scanpos = xsp;
    if (jj_3R_674()) return true;
    }
    return false;
  }

  private boolean jj_3_28() {
    if (jj_3R_86()) return true;
    return false;
  }

  private boolean jj_3R_82() {
    if (jj_3R_95()) return true;
    if (jj_3R_79()) return true;
    if (jj_scan_token(EXTERNAL_BLOCK)) return true;
    return false;
  }

  private boolean jj_3R_226() {
    if (jj_scan_token(WITH)) return true;
    if (jj_3R_468()) return true;
    return false;
  }

  private boolean jj_3R_682() {
    if (jj_3R_108()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_102()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_scan_token(116)) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_681() {
    if (jj_3R_108()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_101()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_scan_token(116)) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_677() {
    if (jj_3R_683()) return true;
    return false;
  }

  private boolean jj_3R_148() {
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_scan_token(EXTERNAL_BLOCK)) return true;
    return false;
  }

  private boolean jj_3R_676() {
    if (jj_scan_token(LCODE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_682()) jj_scanpos = xsp;
    if (jj_scan_token(RCODE)) return true;
    return false;
  }

  private boolean jj_3R_675() {
    if (jj_scan_token(LEMBEDCODE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_681()) jj_scanpos = xsp;
    if (jj_scan_token(REMBEDCODE)) return true;
    return false;
  }

  private boolean jj_3R_307() {
    if (jj_3R_86()) return true;
    if (jj_3R_79()) return true;
    return false;
  }

  private boolean jj_3R_667() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_675()) {
    jj_scanpos = xsp;
    if (jj_3R_676()) return true;
    }
    xsp = jj_scanpos;
    if (jj_3R_677()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_247() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_307()) {
    jj_scanpos = xsp;
    if (jj_3R_308()) return true;
    }
    xsp = jj_scanpos;
    if (jj_scan_token(119)) jj_scanpos = xsp;
    if (jj_scan_token(EXTERNAL_BLOCK)) return true;
    return false;
  }

  private boolean jj_3R_662() {
    if (jj_scan_token(FOR)) return true;
    if (jj_3R_348()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_666()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_667()) return true;
    return false;
  }

  private boolean jj_3R_225() {
    if (jj_scan_token(IF)) return true;
    if (jj_3R_124()) return true;
    return false;
  }

  private boolean jj_3R_680() {
    if (jj_scan_token(ELSE)) return true;
    if (jj_3R_667()) return true;
    return false;
  }

  private boolean jj_3R_669() {
    if (jj_3R_679()) return true;
    return false;
  }

  private boolean jj_3R_246() {
    if (jj_3R_79()) return true;
    if (jj_scan_token(EXTERNAL_BLOCK)) return true;
    return false;
  }

  private boolean jj_3R_85() {
    if (jj_3R_147()) return true;
    if (jj_3R_101()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(152)) {
    jj_scanpos = xsp;
    if (jj_3R_149()) return true;
    }
    return false;
  }

  private boolean jj_3R_130() {
    if (jj_scan_token(ELSE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_225()) {
    jj_scanpos = xsp;
    if (jj_3R_226()) return true;
    }
    if (jj_3R_667()) return true;
    return false;
  }

  private boolean jj_3R_679() {
    if (jj_scan_token(WITH)) return true;
    if (jj_3R_468()) return true;
    if (jj_3R_667()) return true;
    return false;
  }

  private boolean jj_3_27() {
    if (jj_3R_83()) return true;
    return false;
  }

  private boolean jj_3R_83() {
    if (jj_3R_101()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(119)) jj_scanpos = xsp;
    if (jj_scan_token(EXTERNAL_BLOCK)) return true;
    return false;
  }

  private boolean jj_3_26() {
    if (jj_3R_82()) return true;
    return false;
  }

  private boolean jj_3R_678() {
    if (jj_scan_token(IF)) return true;
    if (jj_3R_124()) return true;
    if (jj_3R_667()) return true;
    return false;
  }

  private boolean jj_3_25() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_84()) {
    jj_scanpos = xsp;
    if (jj_3R_85()) return true;
    }
    return false;
  }

  private boolean jj_3R_84() {
    if (jj_3R_86()) return true;
    return false;
  }

  private boolean jj_3R_81() {
    if (jj_3R_147()) return true;
    if (jj_3R_101()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(152)) {
    jj_scanpos = xsp;
    if (jj_3R_148()) return true;
    }
    return false;
  }

  private boolean jj_3R_670() {
    if (jj_3R_680()) return true;
    return false;
  }

  private boolean jj_3_24() {
    if (jj_3R_79()) return true;
    if (jj_scan_token(EXTERNAL_BLOCK)) return true;
    return false;
  }

  private boolean jj_3R_139() {
    if (jj_3R_83()) return true;
    return false;
  }

  private boolean jj_3_100() {
    if (jj_3R_130()) return true;
    return false;
  }

  private boolean jj_3R_138() {
    if (jj_3R_82()) return true;
    return false;
  }

  private boolean jj_3R_668() {
    if (jj_3R_678()) return true;
    return false;
  }

  private boolean jj_3R_663() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_668()) {
    jj_scanpos = xsp;
    if (jj_3R_669()) return true;
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_100()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_670()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_137() {
    if (jj_3R_247()) return true;
    return false;
  }

  private boolean jj_3R_136() {
    if (jj_3R_246()) return true;
    return false;
  }

  private boolean jj_3_23() {
    if (jj_3R_83()) return true;
    return false;
  }

  private boolean jj_3R_483() {
    if (jj_3R_525()) return true;
    return false;
  }

  private boolean jj_3R_71() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_136()) {
    jj_scanpos = xsp;
    if (jj_3R_137()) {
    jj_scanpos = xsp;
    if (jj_3R_138()) {
    jj_scanpos = xsp;
    if (jj_3R_139()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_655() {
    if (jj_3R_663()) return true;
    return false;
  }

  private boolean jj_3R_245() {
    if (jj_3R_242()) return true;
    return false;
  }

  private boolean jj_3_22() {
    if (jj_3R_82()) return true;
    return false;
  }

  private boolean jj_3R_654() {
    if (jj_3R_662()) return true;
    return false;
  }

  private boolean jj_3R_243() {
    if (jj_3R_244()) return true;
    return false;
  }

  private boolean jj_3_21() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_80()) {
    jj_scanpos = xsp;
    if (jj_3R_81()) return true;
    }
    return false;
  }

  private boolean jj_3R_80() {
    if (jj_3R_86()) return true;
    return false;
  }

  private boolean jj_3_99() {
    if (jj_3R_129()) return true;
    return false;
  }

  private boolean jj_3R_647() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_654()) {
    jj_scanpos = xsp;
    if (jj_3R_655()) return true;
    }
    return false;
  }

  private boolean jj_3_20() {
    if (jj_3R_79()) return true;
    if (jj_scan_token(EXTERNAL_BLOCK)) return true;
    return false;
  }

  private boolean jj_3R_638() {
    if (jj_3R_647()) return true;
    return false;
  }

  private boolean jj_3R_637() {
    if (jj_3R_646()) return true;
    return false;
  }

  private boolean jj_3R_636() {
    if (jj_3R_645()) return true;
    return false;
  }

  private boolean jj_3R_635() {
    if (jj_3R_644()) return true;
    return false;
  }

  private boolean jj_3R_625() {
    if (jj_3R_553()) return true;
    if (jj_3R_624()) return true;
    return false;
  }

  private boolean jj_3R_76() {
    if (jj_3R_101()) return true;
    return false;
  }

  private boolean jj_3R_634() {
    if (jj_3R_643()) return true;
    return false;
  }

  private boolean jj_3R_633() {
    if (jj_3R_642()) return true;
    return false;
  }

  private boolean jj_3R_632() {
    if (jj_3R_641()) return true;
    return false;
  }

  private boolean jj_3R_592() {
    if (jj_3R_611()) return true;
    return false;
  }

  private boolean jj_3R_624() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_632()) {
    jj_scanpos = xsp;
    if (jj_3R_633()) {
    jj_scanpos = xsp;
    if (jj_3R_634()) {
    jj_scanpos = xsp;
    if (jj_3R_635()) {
    jj_scanpos = xsp;
    if (jj_3R_636()) {
    jj_scanpos = xsp;
    if (jj_3R_637()) {
    jj_scanpos = xsp;
    if (jj_3R_638()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_482() {
    if (jj_3R_524()) return true;
    return false;
  }

  private boolean jj_3R_135() {
    if (jj_3R_244()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_245()) jj_scanpos = xsp;
    if (jj_3R_71()) return true;
    return false;
  }

  private boolean jj_3R_553() {
    if (jj_scan_token(BITWISE_AND)) return true;
    return false;
  }

  private boolean jj_3R_134() {
    if (jj_3R_242()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_243()) jj_scanpos = xsp;
    if (jj_3R_71()) return true;
    return false;
  }

  private boolean jj_3R_608() {
    if (jj_3R_530()) return true;
    if (jj_3R_607()) return true;
    return false;
  }

  private boolean jj_3R_602() {
    if (jj_3R_242()) return true;
    return false;
  }

  private boolean jj_3R_70() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_134()) {
    jj_scanpos = xsp;
    if (jj_3R_135()) return true;
    }
    return false;
  }

  private boolean jj_3R_75() {
    if (jj_3R_79()) return true;
    return false;
  }

  private boolean jj_3R_601() {
    if (jj_3R_244()) return true;
    return false;
  }

  private boolean jj_3_19() {
    if (jj_3R_78()) return true;
    return false;
  }

  private boolean jj_3R_607() {
    if (jj_3R_624()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_625()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_530() {
    if (jj_scan_token(CARET)) return true;
    return false;
  }

  private boolean jj_3R_613() {
    if (jj_3R_77()) return true;
    return false;
  }

  private boolean jj_3R_589() {
    if (jj_3R_498()) return true;
    if (jj_3R_588()) return true;
    return false;
  }

  private boolean jj_3R_591() {
    if (jj_3R_610()) return true;
    return false;
  }

  private boolean jj_3R_612() {
    if (jj_3R_78()) return true;
    return false;
  }

  private boolean jj_3R_596() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_612()) {
    jj_scanpos = xsp;
    if (jj_3R_613()) return true;
    }
    return false;
  }

  private boolean jj_3R_588() {
    if (jj_3R_607()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_608()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_74() {
    if (jj_3R_103()) return true;
    return false;
  }

  private boolean jj_3R_481() {
    if (jj_3R_523()) return true;
    return false;
  }

  private boolean jj_3R_498() {
    if (jj_scan_token(BITWISE_OR)) return true;
    return false;
  }

  private boolean jj_3R_566() {
    if (jj_3R_593()) return true;
    return false;
  }

  private boolean jj_3R_550() {
    if (jj_3R_569()) return true;
    return false;
  }

  private boolean jj_3R_580() {
    if (jj_3R_244()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_602()) jj_scanpos = xsp;
    if (jj_3R_596()) return true;
    return false;
  }

  private boolean jj_3R_563() {
    if (jj_3R_588()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_589()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_579() {
    if (jj_3R_242()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_601()) jj_scanpos = xsp;
    if (jj_3R_596()) return true;
    return false;
  }

  private boolean jj_3R_611() {
    if (jj_scan_token(MOD)) return true;
    return false;
  }

  private boolean jj_3R_590() {
    if (jj_3R_609()) return true;
    return false;
  }

  private boolean jj_3R_557() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_579()) {
    jj_scanpos = xsp;
    if (jj_3R_580()) return true;
    }
    return false;
  }

  private boolean jj_3_18() {
    if (jj_3R_78()) return true;
    return false;
  }

  private boolean jj_3R_564() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_590()) {
    jj_scanpos = xsp;
    if (jj_3R_591()) {
    jj_scanpos = xsp;
    if (jj_3R_592()) return true;
    }
    }
    if (jj_3R_563()) return true;
    return false;
  }

  private boolean jj_3R_73() {
    if (jj_3R_95()) return true;
    return false;
  }

  private boolean jj_3R_610() {
    if (jj_scan_token(DIVIDED_BY)) return true;
    return false;
  }

  private boolean jj_3R_565() {
    if (jj_3R_448()) return true;
    return false;
  }

  private boolean jj_3R_547() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_565()) {
    jj_scanpos = xsp;
    if (jj_3R_566()) return true;
    }
    if (jj_3R_546()) return true;
    return false;
  }

  private boolean jj_3R_609() {
    if (jj_scan_token(TIMES)) return true;
    return false;
  }

  private boolean jj_3R_549() {
    if (jj_3R_568()) return true;
    return false;
  }

  private boolean jj_3R_480() {
    if (jj_3R_522()) return true;
    return false;
  }

  private boolean jj_3_17() {
    if (jj_3R_77()) return true;
    return false;
  }

  private boolean jj_3R_546() {
    if (jj_3R_563()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_564()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_72() {
    if (jj_3R_86()) return true;
    return false;
  }

  private boolean jj_3_16() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_72()) {
    jj_scanpos = xsp;
    if (jj_3R_73()) return true;
    }
    xsp = jj_scanpos;
    if (jj_3R_74()) {
    jj_scanpos = xsp;
    if (jj_3R_75()) {
    jj_scanpos = xsp;
    if (jj_3R_76()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_593() {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  private boolean jj_3_15() {
    if (jj_3R_71()) return true;
    return false;
  }

  private boolean jj_3R_587() {
    if (jj_3R_606()) return true;
    return false;
  }

  private boolean jj_3R_586() {
    if (jj_3R_77()) return true;
    return false;
  }

  private boolean jj_3R_448() {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  private boolean jj_3R_585() {
    if (jj_3R_78()) return true;
    return false;
  }

  private boolean jj_3R_584() {
    if (jj_3R_71()) return true;
    return false;
  }

  private boolean jj_3_14() {
    if (jj_scan_token(NEXT)) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_562() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_584()) {
    jj_scanpos = xsp;
    if (jj_3R_585()) {
    jj_scanpos = xsp;
    if (jj_3R_586()) {
    jj_scanpos = xsp;
    if (jj_3R_587()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_548() {
    if (jj_3R_567()) return true;
    return false;
  }

  private boolean jj_3_13() {
    if (jj_scan_token(SUPER)) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_515() {
    if (jj_3R_546()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_547()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_516() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_548()) {
    jj_scanpos = xsp;
    if (jj_3R_549()) {
    jj_scanpos = xsp;
    if (jj_3R_550()) return true;
    }
    }
    if (jj_3R_515()) return true;
    return false;
  }

  private boolean jj_3_12() {
    if (jj_scan_token(SUB)) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_479() {
    if (jj_3R_521()) return true;
    return false;
  }

  private boolean jj_3R_543() {
    if (jj_3R_562()) return true;
    return false;
  }

  private boolean jj_3R_569() {
    if (jj_scan_token(RUNSIGNEDSHIFT)) return true;
    return false;
  }

  private boolean jj_3R_542() {
    if (jj_3R_561()) return true;
    return false;
  }

  private boolean jj_3_11() {
    if (jj_3R_70()) return true;
    return false;
  }

  private boolean jj_3R_541() {
    if (jj_3R_560()) return true;
    return false;
  }

  private boolean jj_3R_568() {
    if (jj_scan_token(RSIGNEDSHIFT)) return true;
    return false;
  }

  private boolean jj_3R_540() {
    if (jj_3R_559()) return true;
    return false;
  }

  private boolean jj_3_10() {
    if (jj_3R_69()) return true;
    return false;
  }

  private boolean jj_3R_539() {
    if (jj_3R_558()) return true;
    return false;
  }

  private boolean jj_3R_567() {
    if (jj_scan_token(LSHIFT)) return true;
    return false;
  }

  private boolean jj_3R_538() {
    if (jj_3R_557()) return true;
    return false;
  }

  private boolean jj_3R_475() {
    if (jj_3R_517()) return true;
    if (jj_3R_474()) return true;
    return false;
  }

  private boolean jj_3R_537() {
    if (jj_3R_70()) return true;
    return false;
  }

  private boolean jj_3R_536() {
    if (jj_3R_556()) return true;
    return false;
  }

  private boolean jj_3R_535() {
    if (jj_3R_555()) return true;
    return false;
  }

  private boolean jj_3R_506() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_535()) {
    jj_scanpos = xsp;
    if (jj_3R_536()) {
    jj_scanpos = xsp;
    if (jj_3R_537()) {
    jj_scanpos = xsp;
    if (jj_3R_538()) {
    jj_scanpos = xsp;
    if (jj_3R_539()) {
    jj_scanpos = xsp;
    if (jj_3R_540()) {
    jj_scanpos = xsp;
    if (jj_3R_541()) {
    jj_scanpos = xsp;
    if (jj_3R_542()) {
    jj_scanpos = xsp;
    if (jj_3R_543()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_427() {
    if (jj_3R_487()) return true;
    return false;
  }

  private boolean jj_3R_474() {
    if (jj_3R_515()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_516()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_478() {
    if (jj_3R_520()) return true;
    return false;
  }

  private boolean jj_3R_517() {
    if (jj_scan_token(IN)) return true;
    return false;
  }

  private boolean jj_3_9() {
    if (jj_3R_71()) return true;
    return false;
  }

  private boolean jj_3_8() {
    if (jj_3R_70()) return true;
    return false;
  }

  private boolean jj_3R_422() {
    if (jj_3R_474()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_475()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_574() {
    if (jj_3R_596()) return true;
    return false;
  }

  private boolean jj_3R_525() {
    if (jj_scan_token(GE_IGNORE_CASE)) return true;
    return false;
  }

  private boolean jj_3R_573() {
    if (jj_3R_71()) return true;
    return false;
  }

  private boolean jj_3R_572() {
    if (jj_3R_557()) return true;
    return false;
  }

  private boolean jj_3R_426() {
    if (jj_3R_486()) return true;
    return false;
  }

  private boolean jj_3R_571() {
    if (jj_3R_70()) return true;
    return false;
  }

  private boolean jj_3R_524() {
    if (jj_scan_token(GE)) return true;
    return false;
  }

  private boolean jj_3R_555() {
    if (jj_3R_69()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_571()) {
    jj_scanpos = xsp;
    if (jj_3R_572()) {
    jj_scanpos = xsp;
    if (jj_3R_573()) {
    jj_scanpos = xsp;
    if (jj_3R_574()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3_7() {
    if (jj_3R_71()) return true;
    return false;
  }

  private boolean jj_3R_477() {
    if (jj_3R_519()) return true;
    return false;
  }

  private boolean jj_3R_523() {
    if (jj_scan_token(LE_IGNORE_CASE)) return true;
    return false;
  }

  private boolean jj_3_6() {
    if (jj_3R_70()) return true;
    return false;
  }

  private boolean jj_3R_522() {
    if (jj_scan_token(LE)) return true;
    return false;
  }

  private boolean jj_3_5() {
    if (jj_scan_token(SITE)) return true;
    if (jj_3R_68()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(97)) {
    jj_scanpos = xsp;
    if (jj_scan_token(99)) return true;
    }
    return false;
  }

  private boolean jj_3_4() {
    if (jj_3R_69()) return true;
    return false;
  }

  private boolean jj_3R_521() {
    if (jj_scan_token(GT_IGNORE_CASE)) return true;
    return false;
  }

  private boolean jj_3R_461() {
    if (jj_3R_451()) return true;
    return false;
  }

  private boolean jj_3R_503() {
    if (jj_3R_276()) return true;
    return false;
  }

  private boolean jj_3R_520() {
    if (jj_scan_token(GT)) return true;
    return false;
  }

  private boolean jj_3R_476() {
    if (jj_3R_518()) return true;
    return false;
  }

  private boolean jj_3R_423() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_476()) {
    jj_scanpos = xsp;
    if (jj_3R_477()) {
    jj_scanpos = xsp;
    if (jj_3R_478()) {
    jj_scanpos = xsp;
    if (jj_3R_479()) {
    jj_scanpos = xsp;
    if (jj_3R_480()) {
    jj_scanpos = xsp;
    if (jj_3R_481()) {
    jj_scanpos = xsp;
    if (jj_3R_482()) {
    jj_scanpos = xsp;
    if (jj_3R_483()) return true;
    }
    }
    }
    }
    }
    }
    }
    if (jj_3R_422()) return true;
    return false;
  }

  private boolean jj_3R_425() {
    if (jj_3R_485()) return true;
    return false;
  }

  private boolean jj_3R_519() {
    if (jj_scan_token(LT_IGNORE_CASE)) return true;
    return false;
  }

  private boolean jj_3R_518() {
    if (jj_scan_token(LT)) return true;
    return false;
  }

  private boolean jj_3R_502() {
    if (jj_3R_395()) return true;
    return false;
  }

  private boolean jj_3R_357() {
    if (jj_3R_422()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_423()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_460() {
    if (jj_3R_506()) return true;
    return false;
  }

  private boolean jj_3R_424() {
    if (jj_3R_484()) return true;
    return false;
  }

  private boolean jj_3R_487() {
    if (jj_scan_token(NE_IGNORE_CASE)) return true;
    return false;
  }

  private boolean jj_3R_358() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_424()) {
    jj_scanpos = xsp;
    if (jj_3R_425()) {
    jj_scanpos = xsp;
    if (jj_3R_426()) {
    jj_scanpos = xsp;
    if (jj_3R_427()) return true;
    }
    }
    }
    if (jj_3R_357()) return true;
    return false;
  }

  private boolean jj_3R_392() {
    if (jj_3R_451()) return true;
    return false;
  }

  private boolean jj_3R_396() {
    if (jj_scan_token(LCONCURRENT)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_460()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RCONCURRENT)) return true;
    xsp = jj_scanpos;
    if (jj_3R_461()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_486() {
    if (jj_scan_token(NE)) return true;
    return false;
  }

  private boolean jj_3R_500() {
    if (jj_3R_534()) return true;
    return false;
  }

  private boolean jj_3R_485() {
    if (jj_scan_token(EQ_IGNORE_CASE)) return true;
    return false;
  }

  private boolean jj_3R_287() {
    if (jj_3R_359()) return true;
    if (jj_3R_286()) return true;
    return false;
  }

  private boolean jj_3R_484() {
    if (jj_scan_token(EQ)) return true;
    return false;
  }

  private boolean jj_3R_501() {
    if (jj_3R_274()) return true;
    return false;
  }

  private boolean jj_3R_451() {
    if (jj_scan_token(CATCH)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_500()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_501()) {
    jj_scanpos = xsp;
    if (jj_3R_502()) {
    jj_scanpos = xsp;
    if (jj_3R_503()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_211() {
    if (jj_3R_288()) return true;
    if (jj_3R_210()) return true;
    return false;
  }

  private boolean jj_3R_389() {
    if (jj_3R_451()) return true;
    return false;
  }

  private boolean jj_3R_286() {
    if (jj_3R_357()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_358()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_360() {
    if (jj_scan_token(QMARK)) return true;
    if (jj_3R_124()) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_124()) return true;
    return false;
  }

  private boolean jj_3R_359() {
    if (jj_scan_token(LOGICAL_AND)) return true;
    return false;
  }

  private boolean jj_3R_456() {
    if (jj_3R_106()) return true;
    return false;
  }

  private boolean jj_3R_466() {
    if (jj_3R_506()) return true;
    return false;
  }

  private boolean jj_3R_210() {
    if (jj_3R_286()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_287()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_467() {
    if (jj_3R_451()) return true;
    return false;
  }

  private boolean jj_3R_288() {
    if (jj_scan_token(LOGICAL_OR)) return true;
    return false;
  }

  private boolean jj_3R_394() {
    if (jj_3R_451()) return true;
    return false;
  }

  private boolean jj_3R_397() {
    if (jj_scan_token(LEMBEDCODE)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_466()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(REMBEDCODE)) return true;
    xsp = jj_scanpos;
    if (jj_3R_467()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_391() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_455()) {
    jj_scanpos = xsp;
    if (jj_3R_456()) return true;
    }
    return false;
  }

  private boolean jj_3R_455() {
    if (jj_3R_499()) return true;
    return false;
  }

  private boolean jj_3_98() {
    if (jj_3R_128()) return true;
    if (jj_scan_token(QQMARK)) return true;
    return false;
  }

  private boolean jj_3R_505() {
    if (jj_3R_506()) return true;
    return false;
  }

  private boolean jj_3R_123() {
    if (jj_3R_210()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_211()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_504() {
    if (jj_3R_506()) return true;
    return false;
  }

  private boolean jj_3R_450() {
    if (jj_3R_106()) return true;
    return false;
  }

  private boolean jj_3R_290() {
    if (jj_3R_123()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_360()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_459() {
    if (jj_3R_451()) return true;
    return false;
  }

  private boolean jj_3R_458() {
    if (jj_scan_token(LEMBEDCODE)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_505()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(REMBEDCODE)) return true;
    return false;
  }

  private boolean jj_3R_289() {
    if (jj_3R_128()) return true;
    if (jj_scan_token(QQMARK)) return true;
    if (jj_3R_124()) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_124()) return true;
    return false;
  }

  private boolean jj_3R_457() {
    if (jj_scan_token(LCODE)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_504()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RCODE)) return true;
    return false;
  }

  private boolean jj_3R_378() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_278()) return true;
    return false;
  }

  private boolean jj_3R_212() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_289()) {
    jj_scanpos = xsp;
    if (jj_3R_290()) return true;
    }
    return false;
  }

  private boolean jj_3R_377() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_278()) return true;
    return false;
  }

  private boolean jj_3R_395() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_457()) {
    jj_scanpos = xsp;
    if (jj_3R_458()) return true;
    }
    xsp = jj_scanpos;
    if (jj_3R_459()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_375() {
    if (jj_3R_127()) return true;
    return false;
  }

  private boolean jj_3R_186() {
    if (jj_3R_276()) return true;
    return false;
  }

  private boolean jj_3R_388() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_449()) {
    jj_scanpos = xsp;
    if (jj_3R_450()) return true;
    }
    return false;
  }

  private boolean jj_3R_449() {
    if (jj_3R_499()) return true;
    return false;
  }

  private boolean jj_3R_124() {
    if (jj_3R_212()) return true;
    return false;
  }

  private boolean jj_3R_326() {
    if (jj_scan_token(LLITERAL)) return true;
    if (jj_3R_393()) return true;
    if (jj_scan_token(RLITERAL)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_394()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_325() {
    if (jj_scan_token(LSTATICW)) return true;
    if (jj_3R_390()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_391()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_scan_token(92)) {
    jj_scanpos = xsp;
    if (jj_scan_token(94)) return true;
    }
    xsp = jj_scanpos;
    if (jj_3R_392()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_324() {
    if (jj_scan_token(LSTATIC)) return true;
    Token xsp;
    if (jj_3R_388()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_388()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_scan_token(92)) {
    jj_scanpos = xsp;
    if (jj_scan_token(94)) return true;
    }
    xsp = jj_scanpos;
    if (jj_3R_389()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_328() {
    if (jj_3R_396()) return true;
    return false;
  }

  private boolean jj_3_3() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(91)) {
    jj_scanpos = xsp;
    if (jj_scan_token(93)) return true;
    }
    xsp = jj_scanpos;
    if (jj_scan_token(92)) {
    jj_scanpos = xsp;
    if (jj_scan_token(94)) return true;
    }
    return false;
  }

  private boolean jj_3R_295() {
    if (jj_3R_278()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_378()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_185() {
    if (jj_3R_275()) return true;
    return false;
  }

  private boolean jj_3R_274() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_3R_324()) {
    jj_scanpos = xsp;
    if (jj_3R_325()) {
    jj_scanpos = xsp;
    if (jj_3R_326()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_294() {
    if (jj_3R_278()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_377()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_299() {
    if (jj_scan_token(THIS)) return true;
    return false;
  }

  private boolean jj_3R_219() {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_295()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_218() {
    if (jj_scan_token(LDYNAMICPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_294()) jj_scanpos = xsp;
    if (jj_scan_token(RDYNAMICPAREN)) return true;
    return false;
  }

  private boolean jj_3R_275() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_327()) {
    jj_scanpos = xsp;
    if (jj_3R_328()) return true;
    }
    return false;
  }

  private boolean jj_3R_327() {
    if (jj_3R_395()) return true;
    return false;
  }

  private boolean jj_3R_127() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_218()) {
    jj_scanpos = xsp;
    if (jj_3R_219()) return true;
    }
    return false;
  }

  private boolean jj_3R_184() {
    if (jj_3R_274()) return true;
    return false;
  }

  private boolean jj_3R_106() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_184()) {
    jj_scanpos = xsp;
    if (jj_3R_185()) {
    jj_scanpos = xsp;
    if (jj_3R_186()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_2() {
    if (jj_3R_68()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(117)) {
    jj_scanpos = xsp;
    if (jj_scan_token(113)) {
    jj_scanpos = xsp;
    if (jj_scan_token(109)) {
    jj_scanpos = xsp;
    if (jj_scan_token(107)) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_126() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_124()) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3_97() {
    if (jj_3R_126()) return true;
    return false;
  }

  private boolean jj_3R_600() {
    if (jj_scan_token(CONTINUE)) return true;
    if (jj_3R_241()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(115)) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_68() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_620() {
    if (jj_3R_436()) return true;
    return false;
  }

  private boolean jj_3_96() {
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_619() {
    if (jj_3R_380()) return true;
    return false;
  }

  private boolean jj_3R_376() {
    if (jj_3R_126()) return true;
    return false;
  }

  private boolean jj_3R_618() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_105()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_292() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_375()) jj_scanpos = xsp;
    if (jj_3R_376()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_376()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_428() {
    if (jj_3R_127()) return true;
    return false;
  }

  private boolean jj_3R_599() {
    if (jj_scan_token(REDIRECT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_618()) {
    jj_scanpos = xsp;
    if (jj_3R_619()) {
    jj_scanpos = xsp;
    if (jj_3R_620()) return true;
    }
    }
    xsp = jj_scanpos;
    if (jj_scan_token(115)) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_293() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_3R_127()) return true;
    return false;
  }

  private boolean jj_3R_298() {
    if (jj_3R_113()) return true;
    return false;
  }

  private boolean jj_3R_374() {
    if (jj_scan_token(TYPE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_428()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_240() {
    if (jj_scan_token(BY)) return true;
    if (jj_3R_113()) return true;
    return false;
  }

  private boolean jj_3R_133() {
    if (jj_scan_token(IN)) return true;
    if (jj_3R_241()) return true;
    return false;
  }

  private boolean jj_3R_373() {
    if (jj_scan_token(THIS)) return true;
    return false;
  }

  private boolean jj_3R_239() {
    if (jj_scan_token(AS)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_298()) {
    jj_scanpos = xsp;
    if (jj_3R_299()) return true;
    }
    return false;
  }

  private boolean jj_3R_132() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_239()) {
    jj_scanpos = xsp;
    if (jj_3R_240()) return true;
    }
    return false;
  }

  private boolean jj_3R_372() {
    if (jj_scan_token(SUPER)) return true;
    return false;
  }

  private boolean jj_3R_371() {
    if (jj_scan_token(SUB)) return true;
    return false;
  }

  private boolean jj_3R_370() {
    if (jj_scan_token(SOURCE)) return true;
    return false;
  }

  private boolean jj_3R_69() {
    if (jj_scan_token(KEEP)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_132()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_133()) jj_scanpos = xsp;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3R_369() {
    if (jj_scan_token(SITE)) return true;
    return false;
  }

  private boolean jj_3R_368() {
    if (jj_scan_token(OWNER)) return true;
    return false;
  }

  private boolean jj_3R_367() {
    if (jj_scan_token(NEXT)) return true;
    return false;
  }

  private boolean jj_3R_594() {
    if (jj_3R_68()) return true;
    return false;
  }

  private boolean jj_3R_366() {
    if (jj_scan_token(HERE)) return true;
    return false;
  }

  private boolean jj_3R_365() {
    if (jj_scan_token(KEYS)) return true;
    return false;
  }

  private boolean jj_3R_364() {
    if (jj_scan_token(DEF)) return true;
    return false;
  }

  private boolean jj_3R_363() {
    if (jj_scan_token(COUNT)) return true;
    return false;
  }

  private boolean jj_3R_362() {
    if (jj_scan_token(CORE)) return true;
    return false;
  }

  private boolean jj_3_95() {
    if (jj_3R_68()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(109)) {
    jj_scanpos = xsp;
    if (jj_scan_token(107)) return true;
    }
    return false;
  }

  private boolean jj_3R_361() {
    if (jj_scan_token(CONTAINER)) return true;
    return false;
  }

  private boolean jj_3_94() {
    if (jj_3R_68()) return true;
    if (jj_3R_127()) return true;
    if (jj_3R_126()) return true;
    return false;
  }

  private boolean jj_3R_291() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_361()) {
    jj_scanpos = xsp;
    if (jj_3R_362()) {
    jj_scanpos = xsp;
    if (jj_3R_363()) {
    jj_scanpos = xsp;
    if (jj_3R_364()) {
    jj_scanpos = xsp;
    if (jj_3R_365()) {
    jj_scanpos = xsp;
    if (jj_3R_366()) {
    jj_scanpos = xsp;
    if (jj_3R_367()) {
    jj_scanpos = xsp;
    if (jj_3R_368()) {
    jj_scanpos = xsp;
    if (jj_3R_369()) {
    jj_scanpos = xsp;
    if (jj_3R_370()) {
    jj_scanpos = xsp;
    if (jj_3R_371()) {
    jj_scanpos = xsp;
    if (jj_3R_372()) {
    jj_scanpos = xsp;
    if (jj_3R_373()) {
    jj_scanpos = xsp;
    if (jj_3R_374()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_93() {
    if (jj_3R_68()) return true;
    if (jj_3R_126()) return true;
    return false;
  }

  private boolean jj_3R_217() {
    if (jj_3R_68()) return true;
    return false;
  }

  private boolean jj_3R_216() {
    if (jj_3R_293()) return true;
    return false;
  }

  private boolean jj_3R_215() {
    if (jj_3R_292()) return true;
    return false;
  }

  private boolean jj_3R_214() {
    if (jj_3R_292()) return true;
    return false;
  }

  private boolean jj_3R_213() {
    if (jj_3R_291()) return true;
    return false;
  }

  private boolean jj_3_92() {
    if (jj_3R_125()) return true;
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  private boolean jj_3R_125() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_213()) {
    jj_scanpos = xsp;
    if (jj_3R_214()) {
    jj_scanpos = xsp;
    if (jj_3R_215()) {
    jj_scanpos = xsp;
    if (jj_3R_216()) {
    jj_scanpos = xsp;
    if (jj_3R_217()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_90() {
    if (jj_3R_125()) return true;
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  private boolean jj_3_91() {
    if (jj_3R_68()) return true;
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  private boolean jj_3R_554() {
    if (jj_3R_125()) return true;
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  private boolean jj_3R_534() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_554()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_125()) return true;
    return false;
  }

  private boolean jj_3R_622() {
    if (jj_scan_token(165)) return true;
    return false;
  }

  private boolean jj_3R_603() {
    if (jj_scan_token(165)) return true;
    return false;
  }

  private boolean jj_3R_623() {
    if (jj_scan_token(165)) return true;
    return false;
  }

  private boolean jj_3R_465() {
    if (jj_3R_68()) return true;
    return false;
  }

  private boolean jj_3R_507() {
    if (jj_3R_68()) return true;
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  private boolean jj_3_89() {
    if (jj_3R_125()) return true;
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  private boolean jj_3R_605() {
    if (jj_scan_token(SEMICOLON)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_622()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_464() {
    Token xsp;
    if (jj_3R_507()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_507()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_594()) {
    jj_scanpos = xsp;
    if (jj_scan_token(49)) return true;
    }
    return false;
  }

  private boolean jj_3R_400() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_464()) {
    jj_scanpos = xsp;
    if (jj_3R_465()) return true;
    }
    return false;
  }

  private boolean jj_3R_393() {
    if (jj_scan_token(LITERAL_1)) return true;
    return false;
  }

  private boolean jj_3R_492() {
    if (jj_3R_125()) return true;
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  private boolean jj_3R_436() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_492()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_125()) return true;
    return false;
  }

  private boolean jj_3R_454() {
    if (jj_scan_token(STATIC_0)) return true;
    return false;
  }

  private boolean jj_3R_606() {
    if (jj_3R_436()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_623()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_88() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_124()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_583() {
    if (jj_3R_379()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_453() {
    if (jj_scan_token(STATIC_5)) return true;
    return false;
  }

  private boolean jj_3R_582() {
    if (jj_3R_604()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_605()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_581() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_124()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_603()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_68()) return true;
    return false;
  }

  private boolean jj_3R_558() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_581()) {
    jj_scanpos = xsp;
    if (jj_3R_582()) {
    jj_scanpos = xsp;
    if (jj_3R_583()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_390() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_452()) {
    jj_scanpos = xsp;
    if (jj_3R_453()) {
    jj_scanpos = xsp;
    if (jj_3R_454()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_452() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(158)) {
    jj_scanpos = xsp;
    if (jj_scan_token(159)) {
    jj_scanpos = xsp;
    if (jj_scan_token(160)) {
    jj_scanpos = xsp;
    if (jj_scan_token(161)) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_560() {
    if (jj_scan_token(SUPER)) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_559() {
    if (jj_scan_token(SUB)) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_561() {
    if (jj_scan_token(NEXT)) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_533() {
    if (jj_scan_token(STATIC_0)) return true;
    return false;
  }

  private boolean jj_3R_532() {
    if (jj_scan_token(STATIC_5)) return true;
    return false;
  }

  private boolean jj_3R_380() {
    if (jj_3R_436()) return true;
    return false;
  }

  private boolean jj_3R_531() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(158)) {
    jj_scanpos = xsp;
    if (jj_scan_token(159)) {
    jj_scanpos = xsp;
    if (jj_scan_token(160)) {
    jj_scanpos = xsp;
    if (jj_scan_token(161)) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_499() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_531()) {
    jj_scanpos = xsp;
    if (jj_3R_532()) {
    jj_scanpos = xsp;
    if (jj_3R_533()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_529() {
    if (jj_3R_553()) return true;
    if (jj_3R_528()) return true;
    return false;
  }

  private boolean jj_3R_497() {
    if (jj_3R_530()) return true;
    if (jj_3R_496()) return true;
    return false;
  }

  private boolean jj_3R_570() {
    if (jj_3R_595()) return true;
    if (jj_3R_528()) return true;
    return false;
  }

  private boolean jj_3R_447() {
    if (jj_3R_498()) return true;
    if (jj_3R_446()) return true;
    return false;
  }

  private boolean jj_3R_552() {
    if (jj_3R_241()) return true;
    return false;
  }

  private boolean jj_3R_551() {
    if (jj_3R_570()) return true;
    return false;
  }

  private boolean jj_3R_528() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_551()) {
    jj_scanpos = xsp;
    if (jj_3R_552()) return true;
    }
    return false;
  }

  private boolean jj_3R_387() {
    if (jj_3R_448()) return true;
    if (jj_3R_386()) return true;
    return false;
  }

  private boolean jj_3R_496() {
    if (jj_3R_528()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_529()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_301() {
    if (jj_3R_380()) return true;
    return false;
  }

  private boolean jj_3R_446() {
    if (jj_3R_496()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_497()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_386() {
    if (jj_3R_446()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_447()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_87() {
    if (jj_3R_123()) return true;
    if (jj_scan_token(QMARK)) return true;
    return false;
  }

  private boolean jj_3R_323() {
    if (jj_3R_386()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_387()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_511() {
    if (jj_3R_381()) return true;
    return false;
  }

  private boolean jj_3R_273() {
    if (jj_3R_323()) return true;
    return false;
  }

  private boolean jj_3R_183() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_272()) {
    jj_scanpos = xsp;
    if (jj_3R_273()) return true;
    }
    return false;
  }

  private boolean jj_3R_272() {
    if (jj_3R_123()) return true;
    if (jj_scan_token(QMARK)) return true;
    if (jj_3R_183()) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_183()) return true;
    return false;
  }

  private boolean jj_3_86() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_122()) return true;
    return false;
  }

  private boolean jj_3_85() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_122()) return true;
    return false;
  }

  private boolean jj_3R_418() {
    if (jj_scan_token(OR)) return true;
    if (jj_3R_348()) return true;
    return false;
  }

  private boolean jj_3R_105() {
    if (jj_3R_183()) return true;
    return false;
  }

  private boolean jj_3R_241() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_300()) {
    jj_scanpos = xsp;
    if (jj_3R_301()) return true;
    }
    return false;
  }

  private boolean jj_3R_300() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_105()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_469() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_510()) {
    jj_scanpos = xsp;
    if (jj_3R_511()) return true;
    }
    return false;
  }

  private boolean jj_3R_510() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_469()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_421() {
    if (jj_scan_token(CATCH)) return true;
    if (jj_3R_284()) return true;
    return false;
  }

  private boolean jj_3R_353() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_417()) {
    jj_scanpos = xsp;
    if (jj_3R_418()) return true;
    }
    return false;
  }

  private boolean jj_3R_417() {
    if (jj_scan_token(AND)) return true;
    if (jj_3R_348()) return true;
    return false;
  }

  private boolean jj_3R_207() {
    if (jj_scan_token(WITH)) return true;
    if (jj_3R_468()) return true;
    return false;
  }

  private boolean jj_3R_420() {
    if (jj_3R_122()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_86()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_scan_token(116)) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_419() {
    if (jj_3R_122()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_85()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_scan_token(116)) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_356() {
    if (jj_3R_421()) return true;
    return false;
  }

  private boolean jj_3R_355() {
    if (jj_scan_token(LCODE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_420()) jj_scanpos = xsp;
    if (jj_scan_token(RCODE)) return true;
    return false;
  }

  private boolean jj_3R_354() {
    if (jj_scan_token(LEMBEDCODE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_419()) jj_scanpos = xsp;
    if (jj_scan_token(REMBEDCODE)) return true;
    return false;
  }

  private boolean jj_3R_284() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_354()) {
    jj_scanpos = xsp;
    if (jj_3R_355()) return true;
    }
    xsp = jj_scanpos;
    if (jj_3R_356()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_283() {
    if (jj_scan_token(FOR)) return true;
    if (jj_3R_348()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_353()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_284()) return true;
    return false;
  }

  private boolean jj_3R_206() {
    if (jj_scan_token(IF)) return true;
    if (jj_3R_124()) return true;
    return false;
  }

  private boolean jj_3R_416() {
    if (jj_scan_token(ELSE)) return true;
    if (jj_3R_284()) return true;
    return false;
  }

  private boolean jj_3R_351() {
    if (jj_3R_415()) return true;
    return false;
  }

  private boolean jj_3R_121() {
    if (jj_scan_token(ELSE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_206()) {
    jj_scanpos = xsp;
    if (jj_3R_207()) return true;
    }
    if (jj_3R_284()) return true;
    return false;
  }

  private boolean jj_3R_415() {
    if (jj_scan_token(WITH)) return true;
    if (jj_3R_468()) return true;
    if (jj_3R_284()) return true;
    return false;
  }

  private boolean jj_3R_414() {
    if (jj_scan_token(IF)) return true;
    if (jj_3R_124()) return true;
    if (jj_3R_284()) return true;
    return false;
  }

  private boolean jj_3R_352() {
    if (jj_3R_416()) return true;
    return false;
  }

  private boolean jj_3_84() {
    if (jj_3R_121()) return true;
    return false;
  }

  private boolean jj_3R_350() {
    if (jj_3R_414()) return true;
    return false;
  }

  private boolean jj_3R_282() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_350()) {
    jj_scanpos = xsp;
    if (jj_3R_351()) return true;
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_84()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_352()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_413() {
    if (jj_scan_token(OR)) return true;
    if (jj_3R_348()) return true;
    return false;
  }

  private boolean jj_3_83() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_108()) return true;
    return false;
  }

  private boolean jj_3_82() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_108()) return true;
    return false;
  }

  private boolean jj_3R_197() {
    if (jj_3R_284()) return true;
    return false;
  }

  private boolean jj_3R_196() {
    if (jj_3R_283()) return true;
    return false;
  }

  private boolean jj_3R_195() {
    if (jj_3R_282()) return true;
    return false;
  }

  private boolean jj_3R_112() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_195()) {
    jj_scanpos = xsp;
    if (jj_3R_196()) {
    jj_scanpos = xsp;
    if (jj_3R_197()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_406() {
    if (jj_scan_token(CATCH)) return true;
    if (jj_3R_277()) return true;
    return false;
  }

  private boolean jj_3R_349() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_412()) {
    jj_scanpos = xsp;
    if (jj_3R_413()) return true;
    }
    return false;
  }

  private boolean jj_3R_412() {
    if (jj_scan_token(AND)) return true;
    if (jj_3R_348()) return true;
    return false;
  }

  private boolean jj_3R_205() {
    if (jj_scan_token(WITH)) return true;
    if (jj_3R_468()) return true;
    return false;
  }

  private boolean jj_3R_405() {
    if (jj_3R_108()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_83()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_scan_token(116)) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_404() {
    if (jj_3R_108()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_82()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_scan_token(116)) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_344() {
    if (jj_3R_406()) return true;
    return false;
  }

  private boolean jj_3R_332() {
    if (jj_scan_token(LCODE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_405()) jj_scanpos = xsp;
    if (jj_scan_token(RCODE)) return true;
    return false;
  }

  private boolean jj_3R_331() {
    if (jj_scan_token(LEMBEDCODE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_404()) jj_scanpos = xsp;
    if (jj_scan_token(REMBEDCODE)) return true;
    return false;
  }

  private boolean jj_3R_277() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_331()) {
    jj_scanpos = xsp;
    if (jj_3R_332()) return true;
    }
    xsp = jj_scanpos;
    if (jj_3R_344()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_281() {
    if (jj_scan_token(FOR)) return true;
    if (jj_3R_348()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_349()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_277()) return true;
    return false;
  }

  private boolean jj_3R_204() {
    if (jj_scan_token(IF)) return true;
    if (jj_3R_124()) return true;
    return false;
  }

  private boolean jj_3R_409() {
    if (jj_scan_token(ELSE)) return true;
    if (jj_3R_277()) return true;
    return false;
  }

  private boolean jj_3R_346() {
    if (jj_3R_408()) return true;
    return false;
  }

  private boolean jj_3R_120() {
    if (jj_scan_token(ELSE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_204()) {
    jj_scanpos = xsp;
    if (jj_3R_205()) return true;
    }
    if (jj_3R_277()) return true;
    return false;
  }

  private boolean jj_3R_545() {
    if (jj_scan_token(THROUGH)) return true;
    return false;
  }

  private boolean jj_3R_408() {
    if (jj_scan_token(WITH)) return true;
    if (jj_3R_468()) return true;
    if (jj_3R_277()) return true;
    return false;
  }

  private boolean jj_3R_407() {
    if (jj_scan_token(IF)) return true;
    if (jj_3R_124()) return true;
    if (jj_3R_277()) return true;
    return false;
  }

  private boolean jj_3R_630() {
    if (jj_scan_token(OR)) return true;
    if (jj_3R_348()) return true;
    return false;
  }

  private boolean jj_3R_347() {
    if (jj_3R_409()) return true;
    return false;
  }

  private boolean jj_3_81() {
    if (jj_3R_120()) return true;
    return false;
  }

  private boolean jj_3R_345() {
    if (jj_3R_407()) return true;
    return false;
  }

  private boolean jj_3R_280() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_345()) {
    jj_scanpos = xsp;
    if (jj_3R_346()) return true;
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_81()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_347()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_194() {
    if (jj_3R_277()) return true;
    return false;
  }

  private boolean jj_3R_193() {
    if (jj_3R_281()) return true;
    return false;
  }

  private boolean jj_3R_192() {
    if (jj_3R_280()) return true;
    return false;
  }

  private boolean jj_3R_111() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_192()) {
    jj_scanpos = xsp;
    if (jj_3R_193()) {
    jj_scanpos = xsp;
    if (jj_3R_194()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_544() {
    if (jj_scan_token(TO)) return true;
    return false;
  }

  private boolean jj_3R_514() {
    if (jj_scan_token(BY)) return true;
    if (jj_3R_124()) return true;
    return false;
  }

  private boolean jj_3R_513() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_544()) {
    jj_scanpos = xsp;
    if (jj_3R_545()) return true;
    }
    if (jj_3R_124()) return true;
    return false;
  }

  private boolean jj_3R_629() {
    if (jj_scan_token(AND)) return true;
    if (jj_3R_348()) return true;
    return false;
  }

  private boolean jj_3R_617() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_629()) {
    jj_scanpos = xsp;
    if (jj_3R_630()) return true;
    }
    return false;
  }

  private boolean jj_3R_411() {
    if (jj_scan_token(UNTIL)) return true;
    if (jj_3R_124()) return true;
    return false;
  }

  private boolean jj_3R_473() {
    if (jj_scan_token(UNTIL)) return true;
    if (jj_3R_124()) return true;
    return false;
  }

  private boolean jj_3R_472() {
    if (jj_scan_token(WHERE)) return true;
    if (jj_3R_124()) return true;
    return false;
  }

  private boolean jj_3R_203() {
    if (jj_scan_token(WITH)) return true;
    if (jj_3R_468()) return true;
    return false;
  }

  private boolean jj_3R_512() {
    if (jj_scan_token(BY)) return true;
    if (jj_3R_241()) return true;
    return false;
  }

  private boolean jj_3R_471() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(44)) {
    jj_scanpos = xsp;
    if (jj_scan_token(119)) return true;
    }
    if (jj_3R_124()) return true;
    xsp = jj_scanpos;
    if (jj_3R_513()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_514()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_657() {
    if (jj_3R_664()) return true;
    return false;
  }

  private boolean jj_3R_470() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(48)) {
    jj_scanpos = xsp;
    if (jj_scan_token(126)) return true;
    }
    if (jj_3R_241()) return true;
    xsp = jj_scanpos;
    if (jj_3R_512()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_410() {
    if (jj_3R_469()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_470()) {
    jj_scanpos = xsp;
    if (jj_3R_471()) return true;
    }
    xsp = jj_scanpos;
    if (jj_3R_472()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_473()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_348() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_410()) {
    jj_scanpos = xsp;
    if (jj_3R_411()) return true;
    }
    return false;
  }

  private boolean jj_3R_598() {
    if (jj_scan_token(FOR)) return true;
    if (jj_3R_348()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_617()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_106()) return true;
    return false;
  }

  private boolean jj_3R_509() {
    if (jj_3R_128()) return true;
    return false;
  }

  private boolean jj_3R_202() {
    if (jj_scan_token(IF)) return true;
    if (jj_3R_124()) return true;
    return false;
  }

  private boolean jj_3R_628() {
    if (jj_scan_token(ELSE)) return true;
    if (jj_3R_106()) return true;
    return false;
  }

  private boolean jj_3_80() {
    if (jj_3R_68()) return true;
    if (jj_scan_token(LBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_119() {
    if (jj_scan_token(ELSE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_202()) {
    jj_scanpos = xsp;
    if (jj_3R_203()) return true;
    }
    if (jj_3R_106()) return true;
    return false;
  }

  private boolean jj_3R_672() {
    if (jj_3R_68()) return true;
    return false;
  }

  private boolean jj_3R_671() {
    if (jj_3R_292()) return true;
    return false;
  }

  private boolean jj_3R_664() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_671()) {
    jj_scanpos = xsp;
    if (jj_3R_672()) return true;
    }
    return false;
  }

  private boolean jj_3R_656() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_648()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3_79() {
    if (jj_3R_68()) return true;
    if (jj_scan_token(LBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_648() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_656()) {
    jj_scanpos = xsp;
    if (jj_3R_657()) return true;
    }
    return false;
  }

  private boolean jj_3R_221() {
    if (jj_3R_68()) return true;
    return false;
  }

  private boolean jj_3R_220() {
    if (jj_3R_292()) return true;
    return false;
  }

  private boolean jj_3R_128() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_220()) {
    jj_scanpos = xsp;
    if (jj_3R_221()) return true;
    }
    return false;
  }

  private boolean jj_3R_508() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_468()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_468() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_508()) {
    jj_scanpos = xsp;
    if (jj_3R_509()) return true;
    }
    return false;
  }

  private boolean jj_3R_640() {
    if (jj_scan_token(WITHOUT)) return true;
    if (jj_3R_648()) return true;
    return false;
  }

  private boolean jj_3R_639() {
    if (jj_scan_token(WITH)) return true;
    if (jj_3R_468()) return true;
    return false;
  }

  private boolean jj_3R_615() {
    if (jj_3R_627()) return true;
    return false;
  }

  private boolean jj_3R_627() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_639()) {
    jj_scanpos = xsp;
    if (jj_3R_640()) return true;
    }
    if (jj_3R_106()) return true;
    return false;
  }

  private boolean jj_3R_626() {
    if (jj_scan_token(IF)) return true;
    if (jj_3R_124()) return true;
    if (jj_3R_106()) return true;
    return false;
  }

  private boolean jj_3R_616() {
    if (jj_3R_628()) return true;
    return false;
  }

  private boolean jj_3_78() {
    if (jj_3R_119()) return true;
    return false;
  }

  private boolean jj_3R_614() {
    if (jj_3R_626()) return true;
    return false;
  }

  private boolean jj_3R_597() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_614()) {
    jj_scanpos = xsp;
    if (jj_3R_615()) return true;
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_78()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_616()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_238() {
    if (jj_scan_token(VOID)) return true;
    return false;
  }

  private boolean jj_3R_237() {
    if (jj_scan_token(CONTEXT)) return true;
    return false;
  }

  private boolean jj_3R_236() {
    if (jj_scan_token(NUMBER)) return true;
    return false;
  }

  private boolean jj_3R_235() {
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  private boolean jj_3R_234() {
    if (jj_scan_token(DOUBLE)) return true;
    return false;
  }

  private boolean jj_3R_233() {
    if (jj_scan_token(FLOAT)) return true;
    return false;
  }

  private boolean jj_3R_232() {
    if (jj_scan_token(LONG)) return true;
    return false;
  }

  private boolean jj_3R_231() {
    if (jj_scan_token(INT)) return true;
    return false;
  }

  private boolean jj_3R_118() {
    if (jj_3R_201()) return true;
    return false;
  }

  private boolean jj_3R_230() {
    if (jj_scan_token(SHORT)) return true;
    return false;
  }

  private boolean jj_3R_229() {
    if (jj_scan_token(BYTE)) return true;
    return false;
  }

  private boolean jj_3R_228() {
    if (jj_scan_token(CHAR)) return true;
    return false;
  }

  private boolean jj_3R_227() {
    if (jj_scan_token(BOOLEAN)) return true;
    return false;
  }

  private boolean jj_3R_131() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_227()) {
    jj_scanpos = xsp;
    if (jj_3R_228()) {
    jj_scanpos = xsp;
    if (jj_3R_229()) {
    jj_scanpos = xsp;
    if (jj_3R_230()) {
    jj_scanpos = xsp;
    if (jj_3R_231()) {
    jj_scanpos = xsp;
    if (jj_3R_232()) {
    jj_scanpos = xsp;
    if (jj_3R_233()) {
    jj_scanpos = xsp;
    if (jj_3R_234()) {
    jj_scanpos = xsp;
    if (jj_3R_235()) {
    jj_scanpos = xsp;
    if (jj_3R_236()) {
    jj_scanpos = xsp;
    if (jj_3R_237()) {
    jj_scanpos = xsp;
    if (jj_3R_238()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_117() {
    if (jj_3R_68()) return true;
    return false;
  }

  private boolean jj_3R_176() {
    if (jj_3R_258()) return true;
    return false;
  }

  private boolean jj_3R_114() {
    if (jj_scan_token(TIMES)) return true;
    return false;
  }

  private boolean jj_3_77() {
    if (jj_scan_token(DOT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_117()) {
    jj_scanpos = xsp;
    if (jj_3R_118()) return true;
    }
    return false;
  }

  private boolean jj_3R_494() {
    if (jj_3R_252()) return true;
    return false;
  }

  private boolean jj_3R_201() {
    if (jj_3R_114()) return true;
    return false;
  }

  private boolean jj_3R_253() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_252()) return true;
    return false;
  }

  private boolean jj_3R_383() {
    if (jj_3R_109()) return true;
    return false;
  }

  private boolean jj_3R_269() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_252()) return true;
    return false;
  }

  private boolean jj_3R_578() {
    if (jj_3R_600()) return true;
    return false;
  }

  private boolean jj_3R_577() {
    if (jj_3R_599()) return true;
    return false;
  }

  private boolean jj_3R_576() {
    if (jj_3R_598()) return true;
    return false;
  }

  private boolean jj_3R_493() {
    if (jj_3R_252()) return true;
    return false;
  }

  private boolean jj_3R_575() {
    if (jj_3R_597()) return true;
    return false;
  }

  private boolean jj_3R_556() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_575()) {
    jj_scanpos = xsp;
    if (jj_3R_576()) {
    jj_scanpos = xsp;
    if (jj_3R_577()) {
    jj_scanpos = xsp;
    if (jj_3R_578()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_146() {
    if (jj_3R_252()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_253()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_495() {
    if (jj_3R_252()) return true;
    return false;
  }

  private boolean jj_3R_200() {
    if (jj_3R_177()) return true;
    return false;
  }

  private boolean jj_3_76() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(103)) {
    jj_scanpos = xsp;
    if (jj_scan_token(106)) return true;
    }
    return false;
  }

  private boolean jj_3_75() {
    if (jj_3R_104()) return true;
    if (jj_3R_68()) return true;
    return false;
  }

  private boolean jj_3R_175() {
    if (jj_3R_252()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_269()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_74() {
    if (jj_3R_115()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_382() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_381()) return true;
    return false;
  }

  private boolean jj_3R_441() {
    if (jj_3R_68()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_495()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_73() {
    if (jj_3R_115()) return true;
    if (jj_3R_116()) return true;
    return false;
  }

  private boolean jj_3R_440() {
    if (jj_3R_116()) return true;
    return false;
  }

  private boolean jj_3R_439() {
    if (jj_3R_104()) return true;
    if (jj_3R_68()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_494()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_438() {
    if (jj_3R_115()) return true;
    if (jj_3R_68()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_493()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_437() {
    if (jj_3R_115()) return true;
    if (jj_3R_116()) return true;
    return false;
  }

  private boolean jj_3R_381() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_437()) {
    jj_scanpos = xsp;
    if (jj_3R_438()) {
    jj_scanpos = xsp;
    if (jj_3R_439()) {
    jj_scanpos = xsp;
    if (jj_3R_440()) {
    jj_scanpos = xsp;
    if (jj_3R_441()) {
    jj_scanpos = xsp;
    if (jj_scan_token(141)) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_315() {
    if (jj_3R_381()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_382()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_383()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_72() {
    if (jj_scan_token(LBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_252() {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_315()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_178() {
    if (jj_3R_271()) return true;
    return false;
  }

  private boolean jj_3R_103() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    if (jj_3R_178()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_178()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_79() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_146()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_116() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    if (jj_3R_200()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_200()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_71() {
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_68()) return true;
    return false;
  }

  private boolean jj_3R_101() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_175()) jj_scanpos = xsp;
    if (jj_3R_176()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_176()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_113() {
    if (jj_3R_68()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_71()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_385() {
    if (jj_scan_token(TABLETYPE)) return true;
    return false;
  }

  private boolean jj_3R_267() {
    if (jj_3R_263()) return true;
    return false;
  }

  private boolean jj_3R_270() {
    if (jj_scan_token(TABLETYPE)) return true;
    return false;
  }

  private boolean jj_3R_162() {
    if (jj_3R_263()) return true;
    return false;
  }

  private boolean jj_3R_177() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(103)) {
    jj_scanpos = xsp;
    if (jj_3R_270()) return true;
    }
    return false;
  }

  private boolean jj_3R_271() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_124()) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_445() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_124()) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_319() {
    if (jj_3R_385()) return true;
    return false;
  }

  private boolean jj_3R_444() {
    if (jj_scan_token(STREAMTYPE)) return true;
    return false;
  }

  private boolean jj_3R_443() {
    if (jj_scan_token(APPENDTYPE)) return true;
    return false;
  }

  private boolean jj_3R_442() {
    if (jj_scan_token(ARRAYTYPE)) return true;
    return false;
  }

  private boolean jj_3R_384() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_442()) {
    jj_scanpos = xsp;
    if (jj_3R_443()) {
    jj_scanpos = xsp;
    if (jj_3R_444()) {
    jj_scanpos = xsp;
    if (jj_3R_445()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3_70() {
    if (jj_3R_113()) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_258() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_318()) {
    jj_scanpos = xsp;
    if (jj_3R_319()) return true;
    }
    return false;
  }

  private boolean jj_3R_318() {
    if (jj_3R_384()) return true;
    return false;
  }

  private boolean jj_3_67() {
    if (jj_3R_113()) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_182() {
    if (jj_3R_177()) return true;
    return false;
  }

  private boolean jj_3R_181() {
    if (jj_3R_113()) return true;
    return false;
  }

  private boolean jj_3R_180() {
    if (jj_3R_257()) return true;
    return false;
  }

  private boolean jj_3_66() {
    if (jj_3R_113()) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_179() {
    if (jj_3R_131()) return true;
    return false;
  }

  private boolean jj_3_69() {
    if (jj_3R_113()) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_266() {
    if (jj_3R_257()) return true;
    return false;
  }

  private boolean jj_3R_104() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_179()) {
    jj_scanpos = xsp;
    if (jj_3R_180()) {
    jj_scanpos = xsp;
    if (jj_3R_181()) return true;
    }
    }
    if (jj_3R_182()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_182()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  /** Generated Token Manager. */
  public FunParserTokenManager token_source;
  JavaCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[247];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static private int[] jj_la1_4;
  static private int[] jj_la1_5;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
      jj_la1_init_3();
      jj_la1_init_4();
      jj_la1_init_5();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x50000000,0x0,0x50000000,0x0,0x0,0x0,0x0,0x80000000,0x8000000,0x0,0x0,0x0,0x0,0x5fde0000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x5fde0000,0x5fde0000,0x0,0x0,0x5fde0000,0x0,0x5fde0000,0x5fde0000,0x0,0x5fde0000,0x0,0x80000000,0x48000000,0x80000000,0x48000000,0x0,0x0,0x8000000,0x0,0x8000000,0x0,0x0,0x5fde0000,0x5fde0000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8000000,0x0,0x0,0x0,0x0,0x8000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x5fde0000,0x5fde0000,0x5fde0000,0x0,0x5fde0000,0x0,0x0,0x0,0x0,0x8000000,0x8000000,0x0,0x0,0x8000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x5fde0000,0x0,0x5fde0000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x5fde0000,0x0,0x5fde0000,0x0,0x0,0x0,0x5fde0000,0x5fde0000,0x0,0x0,0x0,0x0,0x5fde0000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x5fde0000,0x0,0x5fde0000,0x0,0x0,0x5fde0000,0x0,0x5fde0000,0x0,0x0,0x5fde0000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x5fde0000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x5fde0000,0x0,0x5fde0000,0x0,0x0,0xc000000,0x0,0x0,0x0,0x5fde0000,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x200,0x0,0xa,0xa,0x10000,0x0,0x4004000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10,0x0,0x0,0x0,0x10,0x10,0x0,0x64e6e8a0,0x64e6e8a0,0x0,0x10,0x64e6e8a0,0x10,0x64e6e8a0,0x4004000,0x0,0x64e6e8a0,0x10,0x200,0xa62080,0x200,0xa62080,0x0,0xa42080,0x0,0xa42080,0x0,0x60408820,0xa42080,0x4004000,0x4004000,0x0,0x0,0x802080,0x240000,0xa42080,0x0,0x802080,0x240000,0xa42080,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2400c800,0x2400c800,0x2400c800,0x20008800,0x2400c800,0x0,0x240000,0x802080,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x60408820,0x0,0x0,0x0,0x60008000,0x100,0x60000000,0x0,0x0,0x0,0x0,0x20008000,0x100001,0x100001,0x10000,0x8,0x1000,0x3000000,0x3000000,0x8,0x11000,0x10000000,0x8000000,0x8000000,0x20008800,0x20008000,0x100,0x20008000,0x100001,0x100001,0x0,0x2400c800,0x0,0x2400c800,0x0,0x10,0x20008800,0x20008000,0x100,0x20008000,0x100001,0x100001,0x0,0x2400c800,0x0,0x2400c800,0x0,0x10,0x0,0x4004000,0x4004000,0x0,0x0,0x0,0x0,0x4004000,0x0,0x0,0x0,0x0,0x0,0x0,0x20000,0x0,0x4004000,0x0,0x4004000,0x0,0x0,0x2400c800,0x0,0x2400c800,0x0,0x0,0x2400c800,0x0,0x0,0x0,0x0,0x0,0x0,0x10000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2400c800,0x20008800,0x20008000,0x100,0x20008000,0x100001,0x100001,0x0,0x2400c800,0x0,0x2400c800,0x0,0x10,0x0,0x0,0x80000000,0x80000000,0x4004000,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x800000,0x0,0x0,0x0,0x0,0x0,0x800000,0x0,0x0,0x0,0x0,0x800000,0x0,0x0,0xa8000000,0x0,0x28000000,0x50000000,0xa8000000,0xa8000000,0x50000000,0x0,0xa8000000,0xa8000000,0x50000000,0x0,0x0,0xa8000000,0xa8f47fff,0xa8f47fff,0x0,0x0,0xa8f47fff,0x0,0xa8f47fff,0x800000,0xa8000000,0xa8f47fff,0x0,0x0,0x8007ff,0x0,0x8007ff,0x0,0x0,0x8007ff,0x0,0x8007ff,0x0,0xa8747800,0x8007ff,0x800000,0xa8000000,0x800000,0x0,0x0,0x0,0x800000,0x0,0x0,0x0,0x0,0x8007ff,0x0,0x0,0x0,0x800000,0x8007ff,0x0,0x0,0x0,0x0,0x0,0x0,0x800000,0x800000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x800000,0x0,0x800000,0xa8f47800,0xa8f47800,0xa8f47800,0xf00000,0xf47800,0xf00000,0x0,0x0,0x8007ff,0x8007ff,0x7ff,0x800000,0x0,0x7ff,0x800000,0x0,0x7ff,0x800000,0x0,0x7ff,0x800000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8007ff,0x0,0x0,0x0,0x800000,0x0,0x800000,0x0,0x7ff,0x0,0x0,0x0,0x800000,0x800000,0x800000,0x800000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8007ff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xa8f47800,0x0,0xa8f47800,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xf47800,0x0,0xf47800,0x0,0x0,0x8007ff,0x800000,0x800000,0x0,0x0,0x0,0x0,0x800000,0x0,0x0,0x0,0x0,0xa8747800,0x0,0x800000,0x800000,0x0,0x800000,0x0,0x0,0x0,0xa8f47800,0x0,0xa8f47800,0x0,0x0,0xf47800,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xf47800,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xa8f47800,0x0,0xa8f47800,0x0,0x0,0xf47800,0x0,0x0,0x0,0xf47800,0x747800,0x2800,0x0,};
   }
   private static void jj_la1_init_3() {
      jj_la1_3 = new int[] {0x0,0xa,0xa,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x800,0x0,0x80000,0x80000,0x2a,0x2a,0x0,0x0,0x2a,0x2a,0x0,0x0,0x2a,0x2a,0x0,0x0,0x0,0x0,0x82a,0x82a,0xa,0x0,0x82a,0x0,0x82a,0x0,0xa,0x82a,0x0,0x0,0x0,0x0,0x0,0xa,0x0,0x0,0x0,0x0,0x0,0x82a,0x0,0x0,0x82a,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x800000,0x0,0x800000,0x100000,0x800,0x0,0x0,0x80000,0x80000,0x80000,0x80000,0x480,0x80000,0x0,0x0,0x80000,0x80000,0x480,0x80000,0x100000,0x100000,0x100000,0x80,0x20000,0x100000,0x20080,0x100000,0x402,0x100000,0x402,0x0,0x80000,0x0,0xc020c8a,0xc020c8a,0xc020c8a,0x80a,0xc000800,0x800,0x0,0x0,0x0,0x0,0x0,0x0,0x100000,0x0,0x0,0x2800,0x0,0x0,0x20780,0x0,0x0,0x480,0x20780,0x20380,0x480,0x100000,0x800,0x20780,0x480,0x100000,0x800,0x100000,0x0,0x0,0x800,0x800,0x800,0x0,0x0,0x0,0x200000,0x0,0x0,0x0,0x0,0x800,0x0,0x800,0x0,0x0,0x0,0x0,0x40000000,0x0,0x800000,0x0,0x0,0x0,0x40800000,0x0,0x0,0x800,0xa,0x0,0x0,0x0,0x0,0x0,0x100000,0xc020c8a,0x100000,0xc020c8a,0xa,0x0,0xa,0x0,0x0,0x0,0x0,0x0,0x100000,0xc00080a,0x100000,0xc00080a,0xa,0x0,0x800,0x800,0x8000800,0x0,0x0,0x0,0x0,0x8000800,0x80000,0x0,0x0,0x80000,0x82a,0x0,0x0,0x0,0x0,0x0,0x0,0x2800,0x100000,0xc020c8a,0x100000,0xc020c8a,0x2800,0x10000000,0xc000800,0x0,0x0,0x80000000,0x80000000,0x3000000,0x3000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xc000000,0x800,0x0,0x0,0x0,0x0,0x0,0x0,0x100000,0xc020c8a,0x100000,0xc020c8a,0xa,0x0,0xc000800,0x800,0x0,0x0,0x800,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_4() {
      jj_la1_4 = new int[] {0x0,0x0,0x0,0xc0000000,0xe0000000,0xc0000000,0xe0000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xc00000,0x0,0x0,0x0,0xe0c00000,0xe0c00000,0x0,0x0,0xe0c00000,0xe0c00000,0x0,0x0,0x0,0x0,0x8c00000,0x8c00000,0x0,0x0,0x8c00000,0x0,0x8c00000,0x0,0xc00000,0x8c00000,0x0,0x0,0x8000000,0x0,0x8000000,0x0,0x0,0x8000000,0x0,0x8000000,0x0,0xc00000,0x8000000,0x0,0xc00000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8000000,0x0,0x0,0x0,0x0,0x8000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xc01800,0xc01800,0xc01800,0x0,0x1800,0x0,0x0,0x0,0x8000000,0x8000000,0x8000000,0x0,0x0,0x8000000,0x0,0x0,0x8000000,0x0,0x0,0x8000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2000000,0x8002000,0x0,0x0,0x0,0x2000,0x0,0x2000,0x0,0x8000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8002000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xc01800,0x0,0xc01800,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1800,0x0,0x1800,0x0,0x0,0x8002000,0x0,0x0,0x800,0x10000,0x20000,0x8000,0x0,0x0,0x0,0x0,0x0,0xc00000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xc01800,0x0,0xc01800,0x0,0x0,0x1800,0x400,0x200,0x10c,0x10c,0xf3,0xf3,0x0,0x380000,0x380000,0x1800,0x1800,0x46000,0x46000,0x10000,0x20000,0x8000,0x1800,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xc01800,0x0,0xc01800,0x0,0x0,0x1800,0x0,0x0,0x0,0x0,0x0,0x0,0xc00000,};
   }
   private static void jj_la1_init_5() {
      jj_la1_5 = new int[] {0x0,0x0,0x0,0x3,0x7,0x3,0x7,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x7,0x7,0x0,0x0,0x7,0x7,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20,0x20,0x0,0x0,0x20,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40,0x40,0x0,0x0,0x0,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[105];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public FunParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public FunParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new FunParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 247; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 247; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public FunParser(java.io.Reader stream) {
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new FunParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 247; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 247; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public FunParser(FunParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 247; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(FunParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 247; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[167];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 247; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
          if ((jj_la1_4[i] & (1<<j)) != 0) {
            la1tokens[128+j] = true;
          }
          if ((jj_la1_5[i] & (1<<j)) != 0) {
            la1tokens[160+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 167; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 105; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
            case 27: jj_3_28(); break;
            case 28: jj_3_29(); break;
            case 29: jj_3_30(); break;
            case 30: jj_3_31(); break;
            case 31: jj_3_32(); break;
            case 32: jj_3_33(); break;
            case 33: jj_3_34(); break;
            case 34: jj_3_35(); break;
            case 35: jj_3_36(); break;
            case 36: jj_3_37(); break;
            case 37: jj_3_38(); break;
            case 38: jj_3_39(); break;
            case 39: jj_3_40(); break;
            case 40: jj_3_41(); break;
            case 41: jj_3_42(); break;
            case 42: jj_3_43(); break;
            case 43: jj_3_44(); break;
            case 44: jj_3_45(); break;
            case 45: jj_3_46(); break;
            case 46: jj_3_47(); break;
            case 47: jj_3_48(); break;
            case 48: jj_3_49(); break;
            case 49: jj_3_50(); break;
            case 50: jj_3_51(); break;
            case 51: jj_3_52(); break;
            case 52: jj_3_53(); break;
            case 53: jj_3_54(); break;
            case 54: jj_3_55(); break;
            case 55: jj_3_56(); break;
            case 56: jj_3_57(); break;
            case 57: jj_3_58(); break;
            case 58: jj_3_59(); break;
            case 59: jj_3_60(); break;
            case 60: jj_3_61(); break;
            case 61: jj_3_62(); break;
            case 62: jj_3_63(); break;
            case 63: jj_3_64(); break;
            case 64: jj_3_65(); break;
            case 65: jj_3_66(); break;
            case 66: jj_3_67(); break;
            case 67: jj_3_68(); break;
            case 68: jj_3_69(); break;
            case 69: jj_3_70(); break;
            case 70: jj_3_71(); break;
            case 71: jj_3_72(); break;
            case 72: jj_3_73(); break;
            case 73: jj_3_74(); break;
            case 74: jj_3_75(); break;
            case 75: jj_3_76(); break;
            case 76: jj_3_77(); break;
            case 77: jj_3_78(); break;
            case 78: jj_3_79(); break;
            case 79: jj_3_80(); break;
            case 80: jj_3_81(); break;
            case 81: jj_3_82(); break;
            case 82: jj_3_83(); break;
            case 83: jj_3_84(); break;
            case 84: jj_3_85(); break;
            case 85: jj_3_86(); break;
            case 86: jj_3_87(); break;
            case 87: jj_3_88(); break;
            case 88: jj_3_89(); break;
            case 89: jj_3_90(); break;
            case 90: jj_3_91(); break;
            case 91: jj_3_92(); break;
            case 92: jj_3_93(); break;
            case 93: jj_3_94(); break;
            case 94: jj_3_95(); break;
            case 95: jj_3_96(); break;
            case 96: jj_3_97(); break;
            case 97: jj_3_98(); break;
            case 98: jj_3_99(); break;
            case 99: jj_3_100(); break;
            case 100: jj_3_101(); break;
            case 101: jj_3_102(); break;
            case 102: jj_3_103(); break;
            case 103: jj_3_104(); break;
            case 104: jj_3_105(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
