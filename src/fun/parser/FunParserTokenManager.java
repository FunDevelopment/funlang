/* Generated By: fun.jjt,v 1.97 2015/06/24 02&JJTree&JavaCC: Do not edit this line. FunParserTokenManager.java */
package fun.parser;
import java.io.*;
import java.util.*;
import fun.lang.*;

/** Token Manager. */
public class FunParserTokenManager implements FunParserConstants
{
    final Integer DEFAULT_STATE = new Integer( DEFAULT );
    final Integer STATIC_STATE = new Integer( IN_STATIC_TEXT );
    final Integer LITERAL_STATE = new Integer( IN_LITERAL_TEXT );
    final Integer COMMENT_STATE = new Integer( IN_COMMENT );
    final Integer DOC_COMMENT_STATE = new Integer( IN_DOC_COMMENT );

    /** lexical state for nested chunks */
    java.util.Stack stateStack = new java.util.Stack();
    Integer currentState = DEFAULT_STATE;
    int commentLevel = 0;

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1, long active2)
{
   switch (pos)
   {
      case 0:
         if ((active1 & 0x40000000000000L) != 0L)
            return 10;
         if ((active0 & 0xc0L) != 0L || (active1 & 0x40000000L) != 0L || (active2 & 0x4000L) != 0L)
            return 0;
         if ((active1 & 0x20000000000000L) != 0L || (active2 & 0x2000000L) != 0L)
            return 12;
         if ((active0 & 0xfffffffffffe0000L) != 0L || (active1 & 0x3fffL) != 0L)
         {
            jjmatchedKind = 87;
            return 27;
         }
         if ((active1 & 0x100000000L) != 0L)
            return 79;
         return -1;
      case 1:
         if ((active1 & 0x100000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 87;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0xfde67ff5ffde0000L) != 0L || (active1 & 0x3fddL) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 87;
               jjmatchedPos = 1;
            }
            return 27;
         }
         if ((active0 & 0x219800a00200000L) != 0L || (active1 & 0x22L) != 0L)
            return 27;
         return -1;
      case 2:
         if ((active1 & 0x100000000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 87;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x8000080122080000L) != 0L || (active1 & 0x20L) != 0L)
            return 27;
         if ((active0 & 0x7de677f4ddd60000L) != 0L || (active1 & 0x3fdfL) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 87;
               jjmatchedPos = 2;
            }
            return 27;
         }
         return -1;
      case 3:
         if ((active0 & 0x19e426f4a5860000L) != 0L || (active1 & 0xb99L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 87;
               jjmatchedPos = 3;
            }
            return 27;
         }
         if ((active0 & 0x6402510058500000L) != 0L || (active1 & 0x3446L) != 0L)
            return 27;
         return -1;
      case 4:
         if ((active0 & 0x41e022e021020000L) != 0L || (active1 & 0x289L) != 0L)
         {
            jjmatchedKind = 87;
            jjmatchedPos = 4;
            return 27;
         }
         if ((active0 & 0x1804041484840000L) != 0L || (active1 & 0x910L) != 0L)
            return 27;
         return -1;
      case 5:
         if ((active0 & 0x414000a020020000L) != 0L || (active1 & 0x1L) != 0L)
         {
            jjmatchedKind = 87;
            jjmatchedPos = 5;
            return 27;
         }
         if ((active0 & 0xa0224001000000L) != 0L || (active1 & 0x288L) != 0L)
            return 27;
         return -1;
      case 6:
         if ((active0 & 0x4100008020000000L) != 0L || (active1 & 0x1L) != 0L)
            return 27;
         if ((active0 & 0x40002000020000L) != 0L)
         {
            jjmatchedKind = 87;
            jjmatchedPos = 6;
            return 27;
         }
         return -1;
      case 7:
         if ((active0 & 0x20000L) != 0L)
         {
            jjmatchedKind = 87;
            jjmatchedPos = 7;
            return 27;
         }
         if ((active0 & 0x40002000000000L) != 0L)
            return 27;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1, long active2)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1, active2), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         jjmatchedKind = 122;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x4L);
      case 35:
         return jjStartNfaWithStates_0(0, 118, 10);
      case 37:
         return jjStopAtPos(0, 146);
      case 38:
         jjmatchedKind = 143;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x200L);
      case 40:
         jjmatchedKind = 107;
         return jjMoveStringLiteralDfa1_0(0x0L, 0xa00000000000L, 0x0L);
      case 41:
         return jjStopAtPos(0, 108);
      case 42:
         jjmatchedKind = 141;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x4000000L);
      case 43:
         jjmatchedKind = 139;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1004000000000L, 0x4000000000L);
      case 44:
         return jjStopAtPos(0, 116);
      case 45:
         return jjStopAtPos(0, 140);
      case 46:
         jjmatchedKind = 117;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x2000000L);
      case 47:
         jjmatchedKind = 142;
         return jjMoveStringLiteralDfa1_0(0xc0L, 0x40000000L, 0x0L);
      case 58:
         jjmatchedKind = 126;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x400000000000L, 0x0L);
      case 59:
         return jjStopAtPos(0, 115);
      case 60:
         jjmatchedKind = 121;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x80001L);
      case 61:
         jjmatchedKind = 119;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8000001000000000L, 0x0L);
      case 62:
         jjmatchedKind = 120;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x300002L);
      case 63:
         jjmatchedKind = 124;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x2000000000000000L, 0x0L);
      case 64:
         return jjStopAtPos(0, 155);
      case 91:
         jjmatchedKind = 113;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x380a8000000L, 0x2001c00000L);
      case 93:
         return jjStopAtPos(0, 114);
      case 94:
         return jjStopAtPos(0, 145);
      case 96:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x100000000L, 0x0L);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x380000000L, 0x0L, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0xc00000000L, 0x3L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x7010060000L, 0x4L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x8020080000L, 0x8L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x30000000000L, 0x0L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x1c0000000000L, 0x810L, 0x0L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x200000000000L, 0x0L, 0x0L);
      case 104:
         return jjMoveStringLiteralDfa1_0(0x400000000000L, 0x0L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x8001800000000000L, 0x20L, 0x0L);
      case 107:
         return jjMoveStringLiteralDfa1_0(0x2000000100000L, 0x0L, 0x0L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x4000000000000L, 0x40L, 0x0L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x200000L, 0x0L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x400000L, 0x1080L, 0x0L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x18000000800000L, 0x0L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x20000000000000L, 0x0L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x40000000000000L, 0x0L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x80000047000000L, 0x300L, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x700000008000000L, 0x2000L, 0x0L);
      case 117:
         return jjMoveStringLiteralDfa1_0(0x800000000000000L, 0x0L, 0x0L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x400L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x7000000000000000L, 0x0L, 0x0L);
      case 123:
         jjmatchedKind = 97;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x42800000000L, 0x0L);
      case 124:
         jjmatchedKind = 144;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x10000000L, 0x8000000400L);
      case 125:
         return jjStopAtPos(0, 98);
      case 126:
         jjmatchedKind = 123;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x1f8L);
      default :
         return jjMoveNfa_0(5, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1, long active2)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1, active2);
      return 1;
   }
   switch(curChar)
   {
      case 33:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x100L);
      case 38:
         if ((active2 & 0x200L) != 0L)
            return jjStopAtPos(1, 137);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x1000000L);
      case 41:
         if ((active1 & 0x400000000000L) != 0L)
            return jjStopAtPos(1, 110);
         else if ((active1 & 0x1000000000000L) != 0L)
            return jjStopAtPos(1, 112);
         break;
      case 42:
         if ((active0 & 0x80L) != 0L)
            return jjStopAtPos(1, 7);
         else if ((active2 & 0x4000000L) != 0L)
            return jjStopAtPos(1, 154);
         break;
      case 43:
         if ((active1 & 0x2000000000L) != 0L)
            return jjStopAtPos(1, 101);
         else if ((active1 & 0x800000000000L) != 0L)
            return jjStopAtPos(1, 111);
         else if ((active2 & 0x4000000000L) != 0L)
            return jjStopAtPos(1, 166);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x20000000000L, active2, 0L);
      case 45:
         return jjMoveStringLiteralDfa2_0(active0, 0x40L, active1, 0L, active2, 0L);
      case 46:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x2000000L);
      case 47:
         if ((active1 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 93;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x400000L);
      case 58:
         if ((active1 & 0x200000000000L) != 0L)
            return jjStopAtPos(1, 109);
         break;
      case 60:
         if ((active2 & 0x20L) != 0L)
         {
            jjmatchedKind = 133;
            jjmatchedPos = 1;
         }
         else if ((active2 & 0x80000L) != 0L)
            return jjStopAtPos(1, 147);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x10L);
      case 61:
         if ((active1 & 0x800000000L) != 0L)
            return jjStopAtPos(1, 99);
         else if ((active1 & 0x8000000000000000L) != 0L)
            return jjStopAtPos(1, 127);
         else if ((active2 & 0x1L) != 0L)
            return jjStopAtPos(1, 128);
         else if ((active2 & 0x2L) != 0L)
            return jjStopAtPos(1, 129);
         else if ((active2 & 0x4L) != 0L)
            return jjStopAtPos(1, 130);
         else if ((active2 & 0x2000000000L) != 0L)
            return jjStopAtPos(1, 165);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x8L);
      case 62:
         if ((active2 & 0x80L) != 0L)
         {
            jjmatchedKind = 135;
            jjmatchedPos = 1;
         }
         else if ((active2 & 0x100000L) != 0L)
         {
            jjmatchedKind = 148;
            jjmatchedPos = 1;
         }
         else if ((active2 & 0x8000000000L) != 0L)
            return jjStopAtPos(1, 167);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x200040L);
      case 63:
         if ((active1 & 0x2000000000000000L) != 0L)
            return jjStopAtPos(1, 125);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x800000L);
      case 93:
         if ((active1 & 0x10000000L) != 0L)
            return jjStopAtPos(1, 92);
         else if ((active1 & 0x40000000L) != 0L)
            return jjStopAtPos(1, 94);
         else if ((active1 & 0x8000000000L) != 0L)
            return jjStopAtPos(1, 103);
         break;
      case 94:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x10000000000L, active2, 0L);
      case 96:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x180000000L, active2, 0L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000000L, active1, 0x800L, active2, 0L);
      case 100:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000000L, active1, 0L, active2, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x42400020580000L, active1, 0L, active2, 0L);
      case 102:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 47, 27);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x1100000008000000L, active1, 0x104L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x6000040040000000L, active1, 0L, active2, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x210000000000L, active1, 0x10L, active2, 0L);
      case 110:
         if ((active0 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 48;
            jjmatchedPos = 1;
         }
         else if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 51, 27);
         return jjMoveStringLiteralDfa2_0(active0, 0x800000100000000L, active1, 0x20L, active2, 0L);
      case 111:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 57, 27);
         return jjMoveStringLiteralDfa2_0(active0, 0x4082011060000L, active1, 0x449L, active2, 0L);
      case 114:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 52, 27);
         return jjMoveStringLiteralDfa2_0(active0, 0x104400000000L, active1, 0x2000L, active2, 0L);
      case 115:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(1, 33, 27);
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000000000000L, active1, 0L, active2, 0L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000000000000L, active1, 0x200L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000006000000L, active1, 0x1080L, active2, 0L);
      case 119:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000L, active1, 0L, active2, 0L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000000000L, active1, 0L, active2, 0L);
      case 121:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(1, 21, 27);
         else if ((active0 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 35;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x400008000000000L, active1, 0x2L, active2, 0L);
      case 124:
         if ((active1 & 0x8000000L) != 0L)
            return jjStopAtPos(1, 91);
         else if ((active2 & 0x400L) != 0L)
            return jjStopAtPos(1, 138);
         break;
      case 125:
         if ((active1 & 0x1000000000L) != 0L)
            return jjStopAtPos(1, 100);
         else if ((active1 & 0x4000000000L) != 0L)
            return jjStopAtPos(1, 102);
         else if ((active1 & 0x40000000000L) != 0L)
            return jjStopAtPos(1, 106);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1, active2);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(0, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1, active2);
      return 2;
   }
   switch(curChar)
   {
      case 45:
         if ((active0 & 0x40L) != 0L)
            return jjStopAtPos(2, 6);
         break;
      case 46:
         if ((active2 & 0x2000000L) != 0L)
            return jjStopAtPos(2, 153);
         break;
      case 61:
         if ((active2 & 0x8L) != 0L)
            return jjStopAtPos(2, 131);
         else if ((active2 & 0x10L) != 0L)
            return jjStopAtPos(2, 132);
         else if ((active2 & 0x40L) != 0L)
            return jjStopAtPos(2, 134);
         else if ((active2 & 0x100L) != 0L)
            return jjStopAtPos(2, 136);
         break;
      case 62:
         if ((active2 & 0x200000L) != 0L)
            return jjStopAtPos(2, 149);
         break;
      case 93:
         if ((active1 & 0x100000000L) != 0L)
            return jjStopAtPos(2, 96);
         else if ((active1 & 0x10000000000L) != 0L)
            return jjStopAtPos(2, 104);
         else if ((active1 & 0x20000000000L) != 0L)
            return jjStopAtPos(2, 105);
         else if ((active2 & 0x400000L) != 0L)
            return jjStopAtPos(2, 150);
         else if ((active2 & 0x800000L) != 0L)
            return jjStopAtPos(2, 151);
         else if ((active2 & 0x1000000L) != 0L)
            return jjStopAtPos(2, 152);
         break;
      case 96:
         if ((active1 & 0x80000000L) != 0L)
            return jjStopAtPos(2, 95);
         break;
      case 97:
         if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 63, 27);
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000000000L, active1, 0x4L, active2, 0L);
      case 98:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(2, 25, 27);
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000000000L, active1, 0L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000000000L, active1, 0L, active2, 0L);
      case 100:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(2, 32, 27);
         return jjMoveStringLiteralDfa3_0(active0, 0x40000000000000L, active1, 0L, active2, 0L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x1002004400000000L, active1, 0L, active2, 0L);
      case 102:
         if ((active0 & 0x80000L) != 0L)
         {
            jjmatchedKind = 19;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000L, active1, 0L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000L, active1, 0x400L, active2, 0L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x1800L, active2, 0L);
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x80L, active2, 0L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x4a000820000L, active1, 0x40L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x300080000000L, active1, 0x111L, active2, 0L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000004000000L, active1, 0L, active2, 0L);
      case 114:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 43, 27);
         return jjMoveStringLiteralDfa3_0(active0, 0x100400010000000L, active1, 0x200L, active2, 0L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000000L, active1, 0L, active2, 0L);
      case 116:
         if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(2, 69, 27);
         return jjMoveStringLiteralDfa3_0(active0, 0x6800021040000000L, active1, 0x2L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x1040000L, active1, 0x2008L, active2, 0L);
      case 120:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000L, active1, 0L, active2, 0L);
      case 121:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000L, active1, 0L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1, active2);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(1, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x404c420000000L, active1, 0x10L);
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000000000L, active1, 0x88L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000L, active1, 0L);
      case 100:
         if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(3, 74, 27);
         break;
      case 101:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(3, 28, 27);
         else if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(3, 30, 27);
         else if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 40, 27);
         else if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 46, 27);
         else if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 58, 27);
         else if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(3, 65, 27);
         else if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(3, 77, 27);
         return jjMoveStringLiteralDfa4_0(active0, 0x20004800000L, active1, 0L);
      case 103:
         if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(3, 70, 27);
         break;
      case 104:
         if ((active0 & 0x2000000000000000L) != 0L)
         {
            jjmatchedKind = 61;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000000000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x840000000000000L, active1, 0x200L);
      case 108:
         if ((active1 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(3, 76, 27);
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000000000L, active1, 0x1L);
      case 109:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 44, 27);
         break;
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000000000000L, active1, 0L);
      case 112:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 49, 27);
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000L, active1, 0L);
      case 114:
         if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(3, 66, 27);
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000001000000L, active1, 0x100L);
      case 115:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(3, 20, 27);
         else if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(3, 27, 27);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x800L);
      case 116:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(3, 22, 27);
         return jjMoveStringLiteralDfa4_0(active0, 0x80002000020000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x200000020000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000L, active1, 0L);
      case 101:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 60, 27);
         else if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(4, 75, 27);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x81L);
      case 104:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 36, 27);
         break;
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0xa0002000000000L, active1, 0L);
      case 107:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(4, 34, 27);
         break;
      case 108:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 42, 27);
         else if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 50, 27);
         else if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 59, 27);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x8L);
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x200L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000000000000L, active1, 0L);
      case 114:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(4, 23, 27);
         else if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(4, 26, 27);
         return jjMoveStringLiteralDfa5_0(active0, 0x40020000000000L, active1, 0L);
      case 116:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(4, 18, 27);
         else if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(4, 31, 27);
         else if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(4, 68, 27);
         else if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(4, 72, 27);
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x100000020000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(3, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x1L);
      case 99:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 53, 27);
         else if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 55, 27);
         break;
      case 101:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(5, 24, 27);
         else if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 38, 27);
         else if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(5, 67, 27);
         return jjMoveStringLiteralDfa6_0(active0, 0x40000000000000L, active1, 0L);
      case 103:
         if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(5, 73, 27);
         return jjMoveStringLiteralDfa6_0(active0, 0x100000000000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000020000L, active1, 0L);
      case 108:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 45, 27);
         return jjMoveStringLiteralDfa6_0(active0, 0x20000000L, active1, 0L);
      case 110:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 41, 27);
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000000L, active1, 0L);
      case 114:
         if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(5, 71, 27);
         break;
      case 117:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(4, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 99:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 39, 27);
         return jjMoveStringLiteralDfa7_0(active0, 0x40000000000000L, active1, 0L);
      case 104:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 56, 27);
         break;
      case 110:
         if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(6, 64, 27);
         return jjMoveStringLiteralDfa7_0(active0, 0x20000L, active1, 0L);
      case 116:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(6, 29, 27);
         else if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 62, 27);
         break;
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(5, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, 0L, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 37, 27);
         return jjMoveStringLiteralDfa8_0(active0, 0x20000L);
      case 116:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 54, 27);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0, 0L, 0L);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, 0L, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 114:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(8, 17, 27);
         break;
      default :
         break;
   }
   return jjStartNfa_0(7, active0, 0L, 0L);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec3 = {
   0x1ff00000fffffffeL, 0xffffffffffffc000L, 0xffffffffL, 0x600000000000000L
};
static final long[] jjbitVec4 = {
   0x0L, 0x0L, 0x0L, 0xff7fffffff7fffffL
};
static final long[] jjbitVec5 = {
   0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec6 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffL, 0x0L
};
static final long[] jjbitVec7 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0x0L, 0x0L
};
static final long[] jjbitVec8 = {
   0x3fffffffffffL, 0x0L, 0x0L, 0x0L
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 79;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 5:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(0, 6);
                  else if (curChar == 39)
                     jjAddStates(7, 10);
                  else if (curChar == 36)
                  {
                     if (kind > 87)
                        kind = 87;
                     jjCheckNAdd(27);
                  }
                  else if (curChar == 34)
                     jjCheckNAddStates(11, 13);
                  else if (curChar == 46)
                     jjCheckNAdd(12);
                  else if (curChar == 35)
                     jjCheckNAdd(10);
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 0;
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 78)
                        kind = 78;
                     jjCheckNAddTwoStates(7, 8);
                  }
                  else if (curChar == 48)
                  {
                     if (kind > 78)
                        kind = 78;
                     jjCheckNAddStates(14, 16);
                  }
                  break;
               case 79:
               case 29:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(17, 19);
                  break;
               case 0:
                  if (curChar == 47)
                     jjCheckNAddStates(20, 22);
                  break;
               case 1:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(20, 22);
                  break;
               case 2:
                  if ((0x2400L & l) != 0L && kind > 8)
                     kind = 8;
                  break;
               case 3:
                  if (curChar == 10 && kind > 8)
                     kind = 8;
                  break;
               case 4:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 6:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 78)
                     kind = 78;
                  jjCheckNAddTwoStates(7, 8);
                  break;
               case 7:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 78)
                     kind = 78;
                  jjCheckNAddTwoStates(7, 8);
                  break;
               case 9:
                  if (curChar == 35)
                     jjCheckNAdd(10);
                  break;
               case 10:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 78)
                     kind = 78;
                  jjCheckNAddTwoStates(10, 8);
                  break;
               case 11:
                  if (curChar == 46)
                     jjCheckNAdd(12);
                  break;
               case 12:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 82)
                     kind = 82;
                  jjCheckNAddStates(23, 25);
                  break;
               case 14:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(15);
                  break;
               case 15:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 82)
                     kind = 82;
                  jjCheckNAddTwoStates(15, 16);
                  break;
               case 17:
                  if (curChar == 34)
                     jjCheckNAddStates(11, 13);
                  break;
               case 18:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(11, 13);
                  break;
               case 20:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(11, 13);
                  break;
               case 21:
                  if (curChar == 34 && kind > 86)
                     kind = 86;
                  break;
               case 22:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(26, 29);
                  break;
               case 23:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(11, 13);
                  break;
               case 24:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 25:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(23);
                  break;
               case 26:
                  if (curChar != 36)
                     break;
                  if (kind > 87)
                     kind = 87;
                  jjCheckNAdd(27);
                  break;
               case 27:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 87)
                     kind = 87;
                  jjCheckNAdd(27);
                  break;
               case 31:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(17, 19);
                  break;
               case 33:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(30, 33);
                  break;
               case 34:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(17, 19);
                  break;
               case 35:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 36:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(34);
                  break;
               case 37:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(0, 6);
                  break;
               case 38:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(38, 39);
                  break;
               case 39:
                  if (curChar != 46)
                     break;
                  if (kind > 82)
                     kind = 82;
                  jjCheckNAddStates(34, 36);
                  break;
               case 40:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 82)
                     kind = 82;
                  jjCheckNAddStates(34, 36);
                  break;
               case 42:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(43);
                  break;
               case 43:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 82)
                     kind = 82;
                  jjCheckNAddTwoStates(43, 16);
                  break;
               case 44:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(44, 45);
                  break;
               case 46:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(47);
                  break;
               case 47:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 82)
                     kind = 82;
                  jjCheckNAddTwoStates(47, 16);
                  break;
               case 48:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(37, 39);
                  break;
               case 50:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(51);
                  break;
               case 51:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(51, 16);
                  break;
               case 52:
                  if (curChar != 48)
                     break;
                  if (kind > 78)
                     kind = 78;
                  jjCheckNAddStates(14, 16);
                  break;
               case 54:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 78)
                     kind = 78;
                  jjCheckNAddTwoStates(54, 8);
                  break;
               case 55:
                  if (curChar == 39)
                     jjAddStates(7, 10);
                  break;
               case 56:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     jjCheckNAdd(57);
                  break;
               case 57:
                  if (curChar == 39 && kind > 84)
                     kind = 84;
                  break;
               case 59:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAdd(57);
                  break;
               case 60:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(61, 57);
                  break;
               case 61:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(57);
                  break;
               case 62:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 63;
                  break;
               case 63:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(61);
                  break;
               case 64:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     jjCheckNAddTwoStates(65, 66);
                  break;
               case 65:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     jjCheckNAddStates(40, 42);
                  break;
               case 67:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(40, 42);
                  break;
               case 68:
                  if (curChar == 39 && kind > 85)
                     kind = 85;
                  break;
               case 69:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(43, 46);
                  break;
               case 70:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(40, 42);
                  break;
               case 71:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 72;
                  break;
               case 72:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(70);
                  break;
               case 74:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddTwoStates(65, 66);
                  break;
               case 75:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(47, 49);
                  break;
               case 76:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(65, 66);
                  break;
               case 77:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 78;
                  break;
               case 78:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(76);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 5:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 87)
                        kind = 87;
                     jjCheckNAdd(27);
                  }
                  else if (curChar == 96)
                     jjCheckNAddStates(17, 19);
                  break;
               case 79:
                  if ((0xfffffffeefffffffL & l) != 0L)
                     jjCheckNAddStates(17, 19);
                  else if (curChar == 96)
                  {
                     if (kind > 87)
                        kind = 87;
                  }
                  else if (curChar == 92)
                     jjAddStates(50, 52);
                  break;
               case 1:
                  jjAddStates(20, 22);
                  break;
               case 8:
                  if ((0x100000001000L & l) != 0L && kind > 78)
                     kind = 78;
                  break;
               case 10:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 78)
                     kind = 78;
                  jjCheckNAddTwoStates(10, 8);
                  break;
               case 13:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(53, 54);
                  break;
               case 16:
                  if ((0x5000000050L & l) != 0L && kind > 82)
                     kind = 82;
                  break;
               case 18:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(11, 13);
                  break;
               case 19:
                  if (curChar == 92)
                     jjAddStates(55, 57);
                  break;
               case 20:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(11, 13);
                  break;
               case 26:
               case 27:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 87)
                     kind = 87;
                  jjCheckNAdd(27);
                  break;
               case 28:
                  if (curChar == 96)
                     jjCheckNAddStates(17, 19);
                  break;
               case 29:
                  if ((0xfffffffeefffffffL & l) != 0L)
                     jjCheckNAddStates(17, 19);
                  break;
               case 30:
                  if (curChar == 92)
                     jjAddStates(50, 52);
                  break;
               case 31:
                  if ((0x14404510000000L & l) != 0L)
                     jjCheckNAddStates(17, 19);
                  break;
               case 32:
                  if (curChar == 96 && kind > 87)
                     kind = 87;
                  break;
               case 41:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(58, 59);
                  break;
               case 45:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(60, 61);
                  break;
               case 49:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(62, 63);
                  break;
               case 53:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(10);
                  break;
               case 56:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAdd(57);
                  break;
               case 58:
                  if (curChar == 92)
                     jjAddStates(64, 66);
                  break;
               case 59:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAdd(57);
                  break;
               case 64:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddTwoStates(65, 66);
                  break;
               case 65:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(40, 42);
                  break;
               case 66:
                  if (curChar == 92)
                     jjAddStates(67, 69);
                  break;
               case 67:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(40, 42);
                  break;
               case 73:
                  if (curChar == 92)
                     jjAddStates(70, 72);
                  break;
               case 74:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddTwoStates(65, 66);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 5:
               case 27:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 87)
                     kind = 87;
                  jjCheckNAdd(27);
                  break;
               case 79:
               case 29:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(17, 19);
                  break;
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(20, 22);
                  break;
               case 18:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(11, 13);
                  break;
               case 56:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 57;
                  break;
               case 64:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(65, 66);
                  break;
               case 65:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(40, 42);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 79 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_3()
{
   switch(curChar)
   {
      case 47:
         return jjMoveStringLiteralDfa1_3(0x400000000L);
      case 91:
         return jjMoveStringLiteralDfa1_3(0x260000000L);
      case 123:
         return jjMoveStringLiteralDfa1_3(0x80000000L);
      case 124:
         return jjMoveStringLiteralDfa1_3(0x100000000L);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_3(long active2)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active2 & 0x200000000L) != 0L)
            return jjStopAtPos(1, 161);
         break;
      case 61:
         if ((active2 & 0x80000000L) != 0L)
            return jjStopAtPos(1, 159);
         break;
      case 93:
         if ((active2 & 0x100000000L) != 0L)
            return jjStopAtPos(1, 160);
         else if ((active2 & 0x400000000L) != 0L)
            return jjStopAtPos(1, 162);
         break;
      case 96:
         return jjMoveStringLiteralDfa2_3(active2, 0x20000000L);
      case 124:
         if ((active2 & 0x40000000L) != 0L)
            return jjStopAtPos(1, 158);
         break;
      default :
         return 2;
   }
   return 2;
}
private int jjMoveStringLiteralDfa2_3(long old2, long active2)
{
   if (((active2 &= old2)) == 0L)
      return 2;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 2;
   }
   switch(curChar)
   {
      case 96:
         if ((active2 & 0x20000000L) != 0L)
            return jjStopAtPos(2, 157);
         break;
      default :
         return 3;
   }
   return 3;
}
private int jjMoveStringLiteralDfa0_4()
{
   switch(curChar)
   {
      case 96:
         return jjMoveStringLiteralDfa1_4(0x1000000000L);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_4(long active2)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 96:
         return jjMoveStringLiteralDfa2_4(active2, 0x1000000000L);
      default :
         return 2;
   }
}
private int jjMoveStringLiteralDfa2_4(long old2, long active2)
{
   if (((active2 &= old2)) == 0L)
      return 2;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 2;
   }
   switch(curChar)
   {
      case 93:
         if ((active2 & 0x1000000000L) != 0L)
            return jjStopAtPos(2, 164);
         break;
      default :
         return 3;
   }
   return 3;
}
private int jjMoveStringLiteralDfa0_2()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_2(0x4000L);
      case 47:
         return jjMoveStringLiteralDfa1_2(0x18000L);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_2(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 42:
         if ((active0 & 0x8000L) != 0L)
            return jjStopAtPos(1, 15);
         break;
      case 45:
         return jjMoveStringLiteralDfa2_2(active0, 0x10000L);
      case 47:
         if ((active0 & 0x4000L) != 0L)
            return jjStopAtPos(1, 14);
         break;
      default :
         return 2;
   }
   return 2;
}
private int jjMoveStringLiteralDfa2_2(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 2;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 2;
   }
   switch(curChar)
   {
      case 45:
         if ((active0 & 0x10000L) != 0L)
            return jjStopAtPos(2, 16);
         break;
      default :
         return 3;
   }
   return 3;
}
private int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa1_1(0x400L);
      case 47:
         return jjMoveStringLiteralDfa1_1(0x1800L);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_1(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 42:
         if ((active0 & 0x1000L) != 0L)
            return jjStopAtPos(1, 12);
         break;
      case 45:
         return jjMoveStringLiteralDfa2_1(active0, 0xc00L);
      default :
         return 2;
   }
   return 2;
}
private int jjMoveStringLiteralDfa2_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 2;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 2;
   }
   switch(curChar)
   {
      case 45:
         if ((active0 & 0x800L) != 0L)
            return jjStopAtPos(2, 11);
         break;
      case 47:
         if ((active0 & 0x400L) != 0L)
            return jjStopAtPos(2, 10);
         break;
      default :
         return 3;
   }
   return 3;
}
static final int[] jjnextStates = {
   38, 39, 44, 45, 48, 49, 16, 56, 58, 64, 73, 18, 19, 21, 53, 54, 
   8, 29, 30, 32, 1, 2, 4, 12, 13, 16, 18, 19, 23, 21, 29, 30, 
   34, 32, 40, 41, 16, 48, 49, 16, 65, 66, 68, 65, 66, 70, 68, 76, 
   65, 66, 31, 33, 35, 14, 15, 20, 22, 24, 42, 43, 46, 47, 50, 51, 
   59, 60, 62, 67, 69, 71, 74, 75, 77, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default :
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec4[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec5[i2] & l2) != 0L);
      case 49:
         return ((jjbitVec6[i2] & l2) != 0L);
      case 51:
         return ((jjbitVec7[i2] & l2) != 0L);
      case 61:
         return ((jjbitVec8[i2] & l2) != 0L);
      default :
         if ((jjbitVec3[i1] & l1) != 0L)
            return true;
         return false;
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, "\143\157\156\164\141\151\156\145\162", 
"\143\157\165\156\164", "\144\145\146", "\153\145\171\163", "\155\171", "\156\145\170\164", 
"\157\167\156\145\162", "\163\157\165\162\143\145", "\163\165\142", "\163\165\160\145\162", 
"\164\150\151\163", "\143\157\162\145", "\144\145\146\141\165\154\164", "\163\151\164\145", 
"\141\144\157\160\164", "\141\156\144", "\141\163", "\142\162\145\141\153", "\142\171", 
"\143\141\164\143\150", "\143\157\156\164\151\156\165\145", "\143\162\145\141\164\145", 
"\144\171\156\141\155\151\143", "\145\154\163\145", "\145\170\164\145\162\156", "\146\151\156\141\154", 
"\146\157\162", "\146\162\157\155", "\147\154\157\142\141\154", "\150\145\162\145", 
"\151\146", "\151\156", "\153\145\145\160", "\154\157\143\141\154", "\157\156", 
"\157\162", "\160\165\142\154\151\143", "\162\145\144\151\162\145\143\164", 
"\163\164\141\164\151\143", "\164\150\162\157\165\147\150", "\164\157", "\164\171\160\145", 
"\165\156\164\151\154", "\167\150\145\162\145", "\167\151\164\150", "\167\151\164\150\157\165\164", 
"\151\163\141", "\142\157\157\154\145\141\156", "\142\171\164\145", "\143\150\141\162", 
"\144\157\165\142\154\145", "\146\154\157\141\164", "\151\156\164", "\154\157\156\147", 
"\156\165\155\142\145\162", "\163\150\157\162\164", "\163\164\162\151\156\147", "\166\157\151\144", 
"\146\141\154\163\145", "\156\165\154\154", "\164\162\165\145", null, null, null, null, null, null, 
null, null, null, null, null, null, null, "\133\174", "\174\135", "\133\57", 
"\57\135", "\133\140\140", "\140\140\135", "\173", "\175", "\173\75", "\75\175", 
"\173\53", "\53\175", "\133\135", "\133\136\135", "\133\53\135", "\173\175", "\50", 
"\51", "\50\72", "\72\51", "\50\53", "\53\51", "\133", "\135", "\73", "\54", "\56", 
"\43", "\75", "\76", "\74", "\41", "\176", "\77", "\77\77", "\72", "\75\75", 
"\74\75", "\76\75", "\41\75", "\176\75\75", "\176\74\75", "\176\74", "\176\76\75", 
"\176\76", "\176\41\75", "\46\46", "\174\174", "\53", "\55", "\52", "\57", "\46", "\174", 
"\136", "\45", "\74\74", "\76\76", "\76\76\76", "\133\57\135", "\133\77\135", 
"\133\46\135", "\56\56\56", "\52\52", "\100", null, null, null, null, null, null, null, null, 
null, "\133\75", "\53\53", "\174\76", };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "IN_COMMENT",
   "IN_DOC_COMMENT",
   "IN_STATIC_TEXT",
   "IN_LITERAL_TEXT",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, 1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, 3, -1, 4, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, 0, 0, 0, 0, 0, 0, -1, 0, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xfffffffffffe0001L, 0xfffffffff8f47fffL, 0xf7efffffffL, 
};
static final long[] jjtoSkip = {
   0x1ddfeL, 0x0L, 0x0L, 
};
static final long[] jjtoSpecial = {
   0x100L, 0x0L, 0x0L, 
};
static final long[] jjtoMore = {
   0x2200L, 0x0L, 0x810000000L, 
};
protected JavaCharStream input_stream;
private final int[] jjrounds = new int[79];
private final int[] jjstateSet = new int[158];
private final StringBuilder jjimage = new StringBuilder();
private StringBuilder image = jjimage;
private int jjimageLen;
private int lengthOfMatch;
protected char curChar;
/** Constructor. */
public FunParserTokenManager(JavaCharStream stream){
   if (JavaCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public FunParserTokenManager(JavaCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(JavaCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 79; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(JavaCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 5 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100003600L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         if (jjmatchedPos == 0 && jjmatchedKind > 9)
         {
            jjmatchedKind = 9;
         }
         break;
       case 2:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_2();
         if (jjmatchedPos == 0 && jjmatchedKind > 13)
         {
            jjmatchedKind = 13;
         }
         break;
       case 3:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_3();
         if (jjmatchedPos == 0 && jjmatchedKind > 156)
         {
            jjmatchedKind = 156;
         }
         break;
       case 4:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_4();
         if (jjmatchedPos == 0 && jjmatchedKind > 163)
         {
            jjmatchedKind = 163;
         }
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           matchedToken.specialToken = specialToken;
           TokenLexicalActions(matchedToken);
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
           {
              matchedToken = jjFillToken();
              if (specialToken == null)
                 specialToken = matchedToken;
              else
              {
                 matchedToken.specialToken = specialToken;
                 specialToken = (specialToken.next = matchedToken);
              }
              SkipLexicalActions(matchedToken);
           }
           else
              SkipLexicalActions(null);
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
        jjimageLen += jjmatchedPos + 1;
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 6 :
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
          commentLevel = 1; stateStack.push(currentState); currentState = COMMENT_STATE;
         break;
      case 7 :
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
          commentLevel = 1; stateStack.push(currentState); currentState = DOC_COMMENT_STATE;
         break;
      case 10 :
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                commentLevel--; currentState = (Integer) stateStack.pop(); SwitchTo(currentState.intValue());
         break;
      case 11 :
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                commentLevel++; stateStack.push(currentState);
         break;
      case 12 :
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                commentLevel++; stateStack.push(currentState); currentState = DOC_COMMENT_STATE; SwitchTo(IN_DOC_COMMENT);
         break;
      case 14 :
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                commentLevel--; currentState = (Integer) stateStack.pop(); SwitchTo(currentState.intValue());
         break;
      case 15 :
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                commentLevel++; stateStack.push(currentState);
         break;
      case 16 :
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                commentLevel++; stateStack.push(currentState); currentState = COMMENT_STATE; SwitchTo(IN_COMMENT);
         break;
      default :
         break;
   }
}
void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 91 :
        image.append(jjstrLiteralImages[91]);
        lengthOfMatch = jjstrLiteralImages[91].length();
                            stateStack.push(currentState); currentState = STATIC_STATE;
         break;
      case 92 :
        image.append(jjstrLiteralImages[92]);
        lengthOfMatch = jjstrLiteralImages[92].length();
                            if (stateStack.size() > 0) {
                                currentState = (Integer) stateStack.pop();
                                SwitchTo(currentState.intValue());
                            } else {
                                // this is a mismatched delimiter error
                                SwitchTo(DEFAULT);
                            }
         break;
      case 93 :
        image.append(jjstrLiteralImages[93]);
        lengthOfMatch = jjstrLiteralImages[93].length();
                            stateStack.push(currentState); currentState = STATIC_STATE;
         break;
      case 94 :
        image.append(jjstrLiteralImages[94]);
        lengthOfMatch = jjstrLiteralImages[94].length();
                             if (stateStack.size() > 0) {
                                currentState = (Integer) stateStack.pop();
                                SwitchTo(currentState.intValue());
                            } else {
                                // this is a mismatched delimiter error
                                SwitchTo(DEFAULT);
                            }
         break;
      case 95 :
        image.append(jjstrLiteralImages[95]);
        lengthOfMatch = jjstrLiteralImages[95].length();
                              stateStack.push(currentState); currentState = LITERAL_STATE;
         break;
      case 96 :
        image.append(jjstrLiteralImages[96]);
        lengthOfMatch = jjstrLiteralImages[96].length();
                              if (stateStack.size() > 0) {
                                  currentState = (Integer) stateStack.pop();
                                  SwitchTo(currentState.intValue());
                              } else {
                                  // this is a mismatched delimiter error
                                  SwitchTo(DEFAULT);
                              }
         break;
      case 97 :
        image.append(jjstrLiteralImages[97]);
        lengthOfMatch = jjstrLiteralImages[97].length();
                        stateStack.push(currentState); currentState = DEFAULT_STATE;
         break;
      case 98 :
        image.append(jjstrLiteralImages[98]);
        lengthOfMatch = jjstrLiteralImages[98].length();
                        if (stateStack.size() > 0) {
                                currentState = (Integer) stateStack.pop();
                                SwitchTo(currentState.intValue());
                            } else {
                                // this is a mismatched delimiter error
                                SwitchTo(DEFAULT);
                            }
         break;
      case 99 :
        image.append(jjstrLiteralImages[99]);
        lengthOfMatch = jjstrLiteralImages[99].length();
                              stateStack.push(currentState); currentState = DEFAULT_STATE;
         break;
      case 100 :
        image.append(jjstrLiteralImages[100]);
        lengthOfMatch = jjstrLiteralImages[100].length();
                              if (stateStack.size() > 0) {
                                currentState = (Integer) stateStack.pop();
                                SwitchTo(currentState.intValue());
                             } else {
                                // this is a mismatched delimiter error
                                SwitchTo(DEFAULT);
                             }
         break;
      case 157 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                           input_stream.backup(3);
         break;
      case 158 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                          input_stream.backup(2);
         break;
      case 159 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                          input_stream.backup(2);
         break;
      case 160 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                          input_stream.backup(2);
         break;
      case 161 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                          input_stream.backup(2);
         break;
      case 162 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                          input_stream.backup(2);
         break;
      case 164 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                          input_stream.backup(3);
         break;
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
