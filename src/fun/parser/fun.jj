/*@bgen(jjtree) Generated By: fun.jjt,v 1.97 2015/06/24 02&JJTree: Do not edit this line. fun.jj */
/*@egen*//* $Id: fun.jjt,v 1.97 2015/06/24 02:24:52 sthippo Exp $
 *
 * Grammar for fun
 *
 * Copyright (c) 2002-2015 by fundev.org
 * All rights reserved.
 *
 */

options {
    LOOKAHEAD = 1;
    JAVA_UNICODE_ESCAPE = true;
    STATIC = false;
                 
                   
                                                                                                    
                           
                                
                             
                         
    DEBUG_PARSER = false;
    DEBUG_TOKEN_MANAGER = false;
    JDK_VERSION = "1.7";
}

PARSER_BEGIN(FunParser)

package fun.parser;

import java.io.*;
import java.util.*;
import fun.lang.*;

public class FunParser/*@bgen(jjtree)*/implements FunParserTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected JJTFunParserState jjtree = new JJTFunParserState();

/*@egen*/

    public static void parseFile(File file) throws FileNotFoundException, ParseException {
        FunParser parser;
        String filename = file.getName();
        long initTime = 0;
        long parseTime = 0;
        long startTime = 0;
        long stopTime = 0;

        startTime = System.currentTimeMillis();
        parser = new FunParser(new java.io.FileInputStream(file));
        stopTime = System.currentTimeMillis();
        initTime = stopTime - startTime;
        startTime = System.currentTimeMillis();
        parser.parse(filename);
        stopTime = System.currentTimeMillis();
        parseTime = stopTime - startTime;
        System.out.println("   Fun document " + filename + " parsed successfully in " + (initTime + parseTime) + " milliseconds.");
        System.out.println("      parser initialization time was " + initTime + " ms.");
        System.out.println("      parser parse time was " + parseTime + " ms.");
    }

    public static void main(String args[]) {
        FunParser parser;

        if (args.length == 0) {
            System.out.println("Reading Fun from standard input.\n\n[= ");
            parser = new FunParser(System.in);
        } else if (args.length == 1) {
            String filename = args[0];
            try {
                System.out.println("Fun Parser Version $version$");
                parseFile(new File(filename));
            } catch (FileNotFoundException e) {
                System.out.println("Fun document " + filename + " not found.");
            } catch (ParseException e) {
                System.out.println("Error parsing Fun document " + filename + ": " + e);
            }

        } else {
            System.out.println("Usage:\n");
            System.out.println("     java fun.parser.FunParser < funfile");
            System.out.println("  or java fun.parser.FunParser funfile");
        }
    }

    void jjtreeOpenNodeScope(Node n) {
        ((AbstractNode) n).setFirstToken(getToken(1));
    }

    void jjtreeCloseNodeScope(Node n) {
        ((AbstractNode) n).setLastToken(getToken(0));
    }
}


PARSER_END(FunParser)

TOKEN_MGR_DECLS :
{
    final Integer DEFAULT_STATE = new Integer( DEFAULT );
    final Integer STATIC_STATE = new Integer( IN_STATIC_TEXT );
    final Integer LITERAL_STATE = new Integer( IN_LITERAL_TEXT );
    final Integer COMMENT_STATE = new Integer( IN_COMMENT );
    final Integer DOC_COMMENT_STATE = new Integer( IN_DOC_COMMENT );

    /** lexical state for nested chunks */
    java.util.Stack stateStack = new java.util.Stack();
    Integer currentState = DEFAULT_STATE;
    int commentLevel = 0;           // comment nesting level
}

/** White space and comments */
SKIP :
{
  " "
| "\n"
| "\r"
| "\t"
| "\f"
| "/--" { commentLevel = 1; stateStack.push(currentState); currentState = COMMENT_STATE; } : IN_COMMENT
| "/*"  { commentLevel = 1; stateStack.push(currentState); currentState = DOC_COMMENT_STATE; } : IN_DOC_COMMENT
}

SPECIAL_TOKEN :
{
  <SINGLE_LINE_COMMENT: "//" (~["\n", "\r"])* ("\n" | "\r" | "\r\n")>
}


// comments
<IN_COMMENT>
MORE :
{
    < ~[] >
}

<IN_COMMENT>
SKIP :
{
    < "--/" > { commentLevel--; currentState = (Integer) stateStack.pop(); SwitchTo(currentState.intValue()); }
  |
    < "/--" > { commentLevel++; stateStack.push(currentState); }
  |
    < "/*" >  { commentLevel++; stateStack.push(currentState); currentState = DOC_COMMENT_STATE; SwitchTo(IN_DOC_COMMENT); }
}

// comments
<IN_DOC_COMMENT>
MORE :
{
    < ~[] >
}

<IN_DOC_COMMENT>
SKIP :
{
    < "*/" >  { commentLevel--; currentState = (Integer) stateStack.pop(); SwitchTo(currentState.intValue()); }
  |
    < "/*" >  { commentLevel++; stateStack.push(currentState); }
  |
    < "/--" > { commentLevel++; stateStack.push(currentState); currentState = COMMENT_STATE; SwitchTo(IN_COMMENT); }
}

// tokens
TOKEN :
{
    // special names
    <CONTAINER: "container"> |
    <COUNT: "count"> |
    <DEF: "def"> |
    <KEYS: "keys"> |
    <MY: "my"> |
    <NEXT: "next"> |
    <OWNER: "owner"> |
    <SOURCE: "source"> |
    <SUB: "sub"> |
    <SUPER: "super"> |
    <THIS: "this"> |


    // combined keyword/special names
    <CORE: "core"> |
    <DEFAULT_KEYWORD: "default"> |
    <SITE: "site"> |


    // keywords
    <ADOPT: "adopt"> |
    <AND: "and"> |
    <AS: "as"> |
    <BREAK: "break"> |      // not used yet
    <BY: "by"> |
    <CATCH: "catch"> |
    <CONTINUE: "continue"> |
    <CREATE: "create"> |
    <DYNAMIC: "dynamic"> |
    <ELSE: "else"> |
    <EXTERN: "extern"> |
    <FINAL: "final"> |
    <FOR: "for"> |
    <FROM: "from"> |
    <GLOBAL: "global"> |
    <HERE: "here"> |
    <IF: "if"> |
    <IN: "in"> |
    <KEEP: "keep"> |
    <LOCAL: "local"> |
    <ON: "on" > |
    <OR: "or"> |
    <PUBLIC: "public"> |
    <REDIRECT: "redirect"> |
    <STATIC: "static"> |
    <THROUGH: "through"> |
    <TO: "to"> |
    <TYPE: "type"> |
    <UNTIL: "until"> |
    <WHERE: "where"> |
    <WITH: "with"> |
    <WITHOUT: "without"> |

    // operators

    <ISA: "isa"> |

    // types

    <BOOLEAN: "boolean"> |
    <BYTE: "byte"> |
    <CHAR: "char"> |
    <DOUBLE: "double"> |
    <FLOAT: "float"> |
    <INT: "int"> |
    <LONG: "long"> |
    <NUMBER: "number"> |
    <SHORT: "short"> |
    <STRING: "string"> |
    <VOID: "void"> |

    // values

    <FALSE: "false"> |
    <NULL: "null"> |
    <TRUE: "true">
}

// numeric literals as in Java, string literals as in Javascript

TOKEN :
{
  < INTEGER_LITERAL: <DECIMAL_LITERAL> (["l","L"])? | <HEX_LITERAL> (["l","L"])? | <OCTAL_LITERAL> (["l","L"])? >
|
  < #DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])* >
|
  < #HEX_LITERAL: ("0" ["x","X"] | "#") (["0"-"9","a"-"f","A"-"F"])+ >
|
  < #OCTAL_LITERAL: "0" (["0"-"7"])* >
|
  < FLOATING_POINT_LITERAL:
        (["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)? (["f","F","d","D"])?
      | "." (["0"-"9"])+ (<EXPONENT>)? (["f","F","d","D"])?
      | (["0"-"9"])+ <EXPONENT> (["f","F","d","D"])?
      | (["0"-"9"])+ (<EXPONENT>)? ["f","F","d","D"]
  >
|
  < #EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
|
  < CHAR_LITERAL:
      "'"
      ( (~["'","\\","\n","\r"])
        | ("\\" ( ["n","t","b","r","f","\\","'","\""]
                | ["0"-"7"] ( ["0"-"7"] )? | ["0"-"3"] ["0"-"7"] ["0"-"7"] ) )
      )
      "'"
  >
|
  < SQ_STRING_LITERAL:
      "'"
      ( (~["'","\\","\n","\r"])
        | ("\\" ( ["n","t","b","r","f","\\","'","\""]
                | ["0"-"7"] ( ["0"-"7"] )? | ["0"-"3"] ["0"-"7"] ["0"-"7"] ) )
      )
      ( (~["'","\\","\n","\r"])
        | ("\\" ( ["n","t","b","r","f","\\","'","\""]
                | ["0"-"7"] ( ["0"-"7"] )? | ["0"-"3"] ["0"-"7"] ["0"-"7"] ) )
      )+
      "'"
  >
|
  < DQ_STRING_LITERAL:
      "\""
      (   (~["\"","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )? | ["0"-"3"] ["0"-"7"] ["0"-"7"] ) )
      )*
      "\""
  >
}

/* IDENTIFIERS */

TOKEN :
{
  < IDENTIFIER: ( <LETTER> (<LETTER>|<DIGIT>)* ) | <BQ_STRING_LITERAL> >
|
  < #BQ_STRING_LITERAL:
      "`"
      (   (~["`","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","`","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )? | ["0"-"3"] ["0"-"7"] ["0"-"7"] ) )
      )*
      "`"
  >
|
  < #LETTER:
      [
       "$",               // $
       "A"-"Z",      // A-Z
       "_",               // _
       "a"-"z",      // a-z
       "\u00c0"-"\u00d6",
       "\u00d8"-"\u00f6",
       "\u00f8"-"\u00ff",
       "\u0100"-"\u1fff",
       "\u3040"-"\u318f",
       "\u3300"-"\u337f",
       "\u3400"-"\u3d2d",
       "\u4e00"-"\u9fff",
       "\uf900"-"\ufaff"
      ]
  >
|
  < #DIGIT:
      [
       "0"-"9",
       "\u0660"-"\u0669",
       "\u06f0"-"\u06f9",
       "\u0966"-"\u096f",
       "\u09e6"-"\u09ef",
       "\u0a66"-"\u0a6f",
       "\u0ae6"-"\u0aef",
       "\u0b66"-"\u0b6f",
       "\u0be7"-"\u0bef",
       "\u0c66"-"\u0c6f",
       "\u0ce6"-"\u0cef",
       "\u0d66"-"\u0d6f",
       "\u0e50"-"\u0e59",
       "\u0ed0"-"\u0ed9",
       "\u1040"-"\u1049"
      ]
  >
}

/* SEPARATORS */

TOKEN :
{
      < LSTATIC: "[/" > {   stateStack.push(currentState); currentState = STATIC_STATE; } : IN_STATIC_TEXT
    | < RSTATIC: "/]" > {   if (stateStack.size() > 0) {
                                currentState = (Integer) stateStack.pop();
                                SwitchTo(currentState.intValue());
                            } else {
                                // this is a mismatched delimiter error
                                SwitchTo(DEFAULT);
                            }
                        }
    | < LSTATICW: "[|" > {  stateStack.push(currentState); currentState = STATIC_STATE; } : IN_STATIC_TEXT
    | < RSTATICW: "|]" > {   if (stateStack.size() > 0) {
                                currentState = (Integer) stateStack.pop();
                                SwitchTo(currentState.intValue());
                            } else {
                                // this is a mismatched delimiter error
                                SwitchTo(DEFAULT);
                            }
                        }

    | < LLITERAL: "[``" > {   stateStack.push(currentState); currentState = LITERAL_STATE; } : IN_LITERAL_TEXT
    | < RLITERAL: "``]" > {   if (stateStack.size() > 0) {
                                  currentState = (Integer) stateStack.pop();
                                  SwitchTo(currentState.intValue());
                              } else {
                                  // this is a mismatched delimiter error
                                  SwitchTo(DEFAULT);
                              }
                          }

    | < LCODE: "{" >  { stateStack.push(currentState); currentState = DEFAULT_STATE; }
    | < RCODE: "}" >  { if (stateStack.size() > 0) {
                                currentState = (Integer) stateStack.pop();
                                SwitchTo(currentState.intValue());
                            } else {
                                // this is a mismatched delimiter error
                                SwitchTo(DEFAULT);
                            }
                          }

    | < LEMBEDCODE: "{/" >  { stateStack.push(currentState); currentState = DEFAULT_STATE; }
    | < REMBEDCODE: "/}" >  { if (stateStack.size() > 0) {
                                currentState = (Integer) stateStack.pop();
                                SwitchTo(currentState.intValue());
                             } else {
                                // this is a mismatched delimiter error
                                SwitchTo(DEFAULT);
                             }
                           }

    // concurrency brackets don't change the lexical state, so they don't
    // need the logic that the code and static brackets have
    | < LCONCURRENT: "{+" >
    | < RCONCURRENT: "+}" >

    | < LPAREN: "(" >
    | < RPAREN: ")" >
    | < LDYNAMICPAREN: "(:" >
    | < RDYNAMICPAREN: ":)" >
    | < LCONCURRENTPAREN: "(+" >
    | < RCONCURRENTPAREN: "+)" >
    | < LBRACKET: "[" >
    | < RBRACKET: "]" >
    | < SEMICOLON: ";" >
    | < COMMA: "," >
    | < DOT: "." >
    | < HASH: "#" >
}

/* OPERATORS */

TOKEN :
{
      < ASSIGN: "=" >
    | < GT: ">" >
    | < LT: "<" >
    | < THPPPT_DING: "!" >
    | < TILDE: "~" >
    | < QMARK: "?" >
    | < QQMARK: "??" >
    | < COLON: ":" >
    | < EQ: "==" >
    | < LE: "<=" >
    | < GE: ">=" >
    | < NE: "!=" >
    | < EQ_IGNORE_CASE: "~==" >
    | < LE_IGNORE_CASE: "~<=" >
    | < LT_IGNORE_CASE: "~<" >
    | < GE_IGNORE_CASE: "~>=" >
    | < GT_IGNORE_CASE: "~>" >
    | < NE_IGNORE_CASE: "~!=" >
    | < LOGICAL_AND: "&&" >
    | < LOGICAL_OR: "||" >
    | < PLUS: "+" >
    | < MINUS: "-" >
    | < TIMES: "*" >
    | < DIVIDED_BY: "/" >
    | < BITWISE_AND: "&" >
    | < BITWISE_OR: "|" >
    | < CARET: "^" >
    | < MOD: "%" >
    | < LSHIFT: "<<" >
    | < RSIGNEDSHIFT: ">>" >
    | < RUNSIGNEDSHIFT: ">>>" >
}

/* VALUES */

TOKEN :
{
      < NULL_BLOCK: "[/]" >
    | < ABSTRACT_NULL: "[?]" >
    | < EXTERNAL_BLOCK: "[&]" >
    | < ELLIPSIS: "..." >
    | < INDEFINITE_NAMERANGE: "**" >
}

/* TYPES */

TOKEN :
{
      < CONTEXT: "@" >
}

<IN_STATIC_TEXT>
MORE :
{
    < ~[] >

}

<IN_STATIC_TEXT>
TOKEN :
{
      <STATIC_0: "[``" > { input_stream.backup(3); } : DEFAULT
    |
      <STATIC_1: "[/" > { input_stream.backup(2); } : DEFAULT
    |
      <STATIC_2: "{/" > { input_stream.backup(2); } : DEFAULT
    |
      <STATIC_3: "/]" > { input_stream.backup(2); } : DEFAULT
    |
      <STATIC_4: "[|" > { input_stream.backup(2); } : DEFAULT
    |
      <STATIC_5: "|]" > { input_stream.backup(2); } : DEFAULT
}

//<IN_STATIC_TEXT>
//TOKEN :
//{
//    <PURE_STATIC_TEXT: ( ~[ "[","|"] | "[" ~[ "|","=","/" ] | "|" ~[ "]" ] )>
//}

<IN_LITERAL_TEXT>
MORE :
{
    < ~[] >

}

<IN_LITERAL_TEXT>
TOKEN :
{
    <LITERAL_1: "``]" > { input_stream.backup(3); } : DEFAULT
}

//<IN_LITERAL_TEXT>
//TOKEN :
//{
//    <PURE_LITERAL_TEXT: ( ~[ "|"] | "|" ~[ "|" ] | "||" ~[ "]" ] )>
//}

// overall document structure

Node parse(String filename)      :
{/*@bgen(jjtree) Root */
    ParsedRoot jjtn000 = new ParsedRoot(JJTROOT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    System.out.println("Parsing " + filename + "...");
}
{/*@bgen(jjtree) Root */
    try {
/*@egen*/
    ( SiteStatement() | CoreStatement() | LOOKAHEAD( Name() ) DomainStatement() | DefaultStatement() )+ <EOF>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        System.out.println("Parsing completed.");
        return jjtn000;
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

// pure static text is all the text up to but not including the next box delimiter
Node StaticText() :
{/*@bgen(jjtree) StaticText */
  ParsedStaticText jjtn000 = new ParsedStaticText(JJTSTATICTEXT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t;
  String str;
}
{/*@bgen(jjtree) StaticText */
    try {
/*@egen*/
    (
      (t = <STATIC_1> | t = <STATIC_2> | t = <STATIC_3> | t = <STATIC_4>) {
            // chop off box delimiter which is part of the token due to the
            // lex logic (see <IN_STATIC_TEXT>)
            str = t.image.substring(0, t.image.length() - 2);
            jjtn000.setText(str);
      }
    |
      t = <STATIC_5> {
            // we have a |], which means preserve trailing whitespace 
            str = t.image.substring(0, t.image.length() - 2);
            jjtn000.setText(str);
            jjtn000.setPreserveTrailing(true);
      }
    | 
      t = <STATIC_0> {
            str = t.image.substring(0, t.image.length() - 3);
            jjtn000.setText(str);
            jjtn000.setPreserveLeading(true);
            jjtn000.setPreserveTrailing(true);
      }
    )/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        return jjtn000;
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

// leading static text is static text with leading whitespace preserved
void LeadingStaticText()            :
{/*@bgen(jjtree) StaticText */
  ParsedStaticText jjtn000 = new ParsedStaticText(JJTSTATICTEXT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t;
  String str;
}
{/*@bgen(jjtree) StaticText */
    try {
/*@egen*/
    (t = <STATIC_1> | t = <STATIC_2> | t = <STATIC_3> | t = <STATIC_4>)/*@bgen(jjtree)*/
                                                                        {
                                                                          jjtree.closeNodeScope(jjtn000, true);
                                                                          jjtc000 = false;
                                                                        }
/*@egen*/ {
            // chop off box delimiter which is part of the token due to the
            // lex logic (see <IN_STATIC_TEXT>)
            str = t.image.substring(0, t.image.length() - 2);
            jjtn000.setText(str);
            jjtn000.setPreserveLeading(true);
        }
    |
      t = <STATIC_5>/*@bgen(jjtree)*/
                     {
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
                     }
/*@egen*/ {
            // we have a |], which means preserve trailing whitespace 
            str = t.image.substring(0, t.image.length() - 2);
            jjtn000.setText(str);
            jjtn000.setPreserveLeading(true);
            jjtn000.setPreserveTrailing(true);
      }
     | t = <STATIC_0>/*@bgen(jjtree)*/
                      {
                        jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
                      }
/*@egen*/ {
            str = t.image.substring(0, t.image.length() - 3);
            jjtn000.setText(str);
            jjtn000.setPreserveLeading(true);
        }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

// literal static text is all the text up to but not including the closing literal text delimiter
void LiteralText() :
{/*@bgen(jjtree) LiteralText */
  ParsedLiteralText jjtn000 = new ParsedLiteralText(JJTLITERALTEXT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; }
{/*@bgen(jjtree) LiteralText */
    try {
/*@egen*/
    (t = <LITERAL_1>)/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        // chop off box delimiter which is part of the token due to the
        // lex logic (see <IN_LITERAL_TEXT>)
        String str = t.image.substring(0, t.image.length() - 3);
        jjtn000.setText(str);
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void SiteStatement() :
{/*@bgen(jjtree) SiteStatement */
  ParsedSiteStatement jjtn000 = new ParsedSiteStatement(JJTSITESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) SiteStatement */
    try {
/*@egen*/
    "site" Name() SiteBlock()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}


void CoreStatement() :
{/*@bgen(jjtree) CoreStatement */
  ParsedCoreStatement jjtn000 = new ParsedCoreStatement(JJTCORESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) CoreStatement */
    try {
/*@egen*/
    "core" SiteBlock()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void DomainStatement()                :
{/*@bgen(jjtree) SiteStatement */
  ParsedSiteStatement jjtn000 = new ParsedSiteStatement(JJTSITESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) SiteStatement */
    try {
/*@egen*/    Name() Name() SiteBlock()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void DefaultStatement() :
{/*@bgen(jjtree) DefaultStatement */
  ParsedDefaultStatement jjtn000 = new ParsedDefaultStatement(JJTDEFAULTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) DefaultStatement */
    try {
/*@egen*/
    SiteBlock()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

//
// Site level directives, which can only appear at the start of site and core blocks
//
void Directive()      :
{}
{
    ExternStatement() | AdoptStatement()
}

void ExternStatement() :
{/*@bgen(jjtree) ExternStatement */
  ParsedExternStatement jjtn000 = new ParsedExternStatement(JJTEXTERNSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t = null; }
{/*@bgen(jjtree) ExternStatement */
    try {
/*@egen*/
    "extern"  t = <IDENTIFIER> { jjtn000.setBinding(t.image); }  NameRange()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void AdoptStatement() :
{/*@bgen(jjtree) AdoptStatement */
  ParsedAdoptStatement jjtn000 = new ParsedAdoptStatement(JJTADOPTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) AdoptStatement */
    try {
/*@egen*/
    "adopt" NameRange()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}


KeepStatement KeepPrefix()               :
{/*@bgen(jjtree) KeepStatement */
  ParsedKeepStatement jjtn000 = new ParsedKeepStatement(JJTKEEPSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) KeepStatement */
    try {
/*@egen*/
    "keep"
    [
        "as" ( TypeName() { jjtn000.setHasAs(true); } | "this" { jjtn000.setHasAsThis(true); } )
      |
        "by" TypeName() { jjtn000.setHasBy(true); }
    ]
    [ "in" InstanceExpression() ]
    ":" { jjtn000.setIsPrefix(true); }/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/     
    {
        jjtn000.setPersist(true);
        return jjtn000;
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}


void RedirectStatement() :
{/*@bgen(jjtree) RedirectStatement */
  ParsedRedirectStatement jjtn000 = new ParsedRedirectStatement(JJTREDIRECTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) RedirectStatement */
    try {
/*@egen*/
    "redirect"
    (
        "(" Instance() ")"
      |         LOOKAHEAD(Name() ("." | "[" | "(:" | "("))
        Instance()
      | 
        ComplexName()
    ) [";"]/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void ContinueStatement() :
{/*@bgen(jjtree) ContinueStatement */
  ParsedContinueStatement jjtn000 = new ParsedContinueStatement(JJTCONTINUESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ContinueStatement */
    try {
/*@egen*/
    "continue" InstanceExpression() [";"]/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

// two kinds of blocks, static and code, with special notation for null blocks
void Block()      :
{}
{
    StaticBlock() | CodeBlock() | NullBlock()
}

// code blocks can be normal, concurrent or dynamically generated
void CodeBlock()      :
{}
{
    FunBlock() | ConcurrentFunBlock()
}

// static blocks can have embedded blocks
Block StaticBlock() :
{/*@bgen(jjtree) StaticBlock */
    ParsedStaticBlock jjtn000 = new ParsedStaticBlock(JJTSTATICBLOCK);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Block catchBlock;
}
{/*@bgen(jjtree) StaticBlock */
    try {
/*@egen*/
    (
      LOOKAHEAD(2)
      ("[|" | "[/") ("|]" | "/]")
    |
      "[/" ( StaticText() | Block() )+ ("|]" | "/]") [ catchBlock = CatchBlock() { jjtn000.setCatch(catchBlock); } ]
    |
      "[|" LeadingStaticText() ( StaticText() | Block() )*  ("|]" | "/]") [ catchBlock = CatchBlock() { jjtn000.setCatch(catchBlock); } ]
    |
      "[``" LiteralText() "``]" [ catchBlock = CatchBlock() { jjtn000.setCatch(catchBlock); } ]
    )/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        return jjtn000;
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

Block FunBlock() :
{/*@bgen(jjtree) FunBlock */
    ParsedFunBlock jjtn000 = new ParsedFunBlock(JJTFUNBLOCK);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Block catchBlock;
}
{/*@bgen(jjtree) FunBlock */
    try {
/*@egen*/
    (      ("{" ( DeepStatement() )* "}")
    | 
      ("{/" ( DeepStatement() )* "/}")
    )
    [ catchBlock = CatchBlock() { jjtn000.setCatch(catchBlock); } ]/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        return jjtn000;
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

Block EmbeddedFunBlock()          : 
{/*@bgen(jjtree) FunBlock */
    ParsedFunBlock jjtn000 = new ParsedFunBlock(JJTFUNBLOCK);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Block catchBlock;
}
{/*@bgen(jjtree) FunBlock */
    try {
/*@egen*/
    ("{/" ( DeepStatement() )* "/}")
    [ catchBlock = CatchBlock() { jjtn000.setCatch(catchBlock); } ]/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        return jjtn000;
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

FunBlock generateFunBlock()          :
{/*@bgen(jjtree) FunBlock */
  ParsedFunBlock jjtn000 = new ParsedFunBlock(JJTFUNBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) FunBlock */
    try {
/*@egen*/
    ( DeepStatement() )*/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        return jjtn000;
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}


Block CatchBlock()      :
{
    Block block = null;
    Name redirName = null;
}
{
    "catch" [ redirName = parseComplexName() ]
    ( block = StaticBlock() | block = FunBlock() | NullBlock() )
    {
        if (redirName != null) {            block.setCatchIdentifier(redirName);
        }
        return block;
    }
}


Block ConcurrentFunBlock() :
{/*@bgen(jjtree) ConcurrentFunBlock */
    ParsedConcurrentFunBlock jjtn000 = new ParsedConcurrentFunBlock(JJTCONCURRENTFUNBLOCK);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Block catchBlock;
}
{/*@bgen(jjtree) ConcurrentFunBlock */
    try {
/*@egen*/
    ("{+" ( DeepStatement() )* "+}")[ catchBlock = CatchBlock() { jjtn000.setCatch(catchBlock); } ]/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        return jjtn000;
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}


// site blocks are fun blocks in site or core statements; they allow directives
void SiteBlock()          :
{/*@bgen(jjtree) FunBlock */
  ParsedFunBlock jjtn000 = new ParsedFunBlock(JJTFUNBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) FunBlock */
    try {
/*@egen*/
    (      ("{" ( Directive() )* ( SiteLevelStatement() )* "}")
    | 
      ("{/" ( Directive() )* ( SiteLevelStatement() )* "/}")
    )/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/    
}


// SiteLevelStatements are statements which may appear at the site level, including
// definitions, which may also appear below the site level, as well as extern and adopt
// directives, which can only appear at the site level.
void SiteLevelStatement()      :
{}
{
    (
      LOOKAHEAD( KeepPrefix() )
      KeepPrefixedDefinition()
    | 
      LOOKAHEAD( "site" Name() "[=" )
      SiteStatement()
    |
      LOOKAHEAD( ModifiedExternalDefinition() )
      ModifiedExternalDefinition()
    |
      ModifiedDefinition()
    |
      LOOKAHEAD( TypedOrNamedExternalDefinition(-1, -1) )
      TypedOrNamedExternalDefinition(-1, -1)
    |
      TypedOrNamedDefinition()
    )
}

void KeepPrefixedDefinition()      :
{
    KeepStatement keep;
    Scoped def;
}{    keep = KeepPrefix()
    (      LOOKAHEAD( ModifiedExternalDefinition() )
      def = ModifiedExternalDefinition()
    |
      def = ModifiedDefinition()
    |
      LOOKAHEAD( TypedOrNamedExternalDefinition(-1, -1) )
      def = TypedOrNamedExternalDefinition(-1, -1)
    |
      def = TypedOrNamedDefinition()
    )
    {        keep.setDefName(def.getDefName());
    } 
      
}

// DeepStatements are statements which may appear below the site level, including
// directives and definitions, which may appear at the site level as well, and
// constructions and logic, which can only appear below the site level.
void DeepStatement()      :
{}
{
       LOOKAHEAD( KeepPrefix() )
       KeepPrefixedDefinition()
     | 
       FunExpression()
     |
       LOOKAHEAD( ModifiedExternalDefinition() )
       ModifiedExternalDefinition()
     |
       ModifiedDefinition()
     |
       AnonymousConstruction()
     |
       LOOKAHEAD("sub" ";")
       SubConstruction()
     |
       LOOKAHEAD("super" ";")
       SuperConstruction()
     |
       LOOKAHEAD("next" ";")
       NextConstruction()
     |
       NamedExpression()
}


void NamedExpression()      :
{}
{
      LOOKAHEAD( NamedConstruction() )
      NamedConstruction()
    |
      LOOKAHEAD( NamedDefinition() )
      NamedDefinition()
    |
      LOOKAHEAD( TypedDefinition() )
      TypedDefinition()
    |
      LOOKAHEAD( TypedOrNamedExternalDefinition(-1, -1) )
      TypedOrNamedExternalDefinition(-1, -1)
}


//
// Definitions
//

void Definition()      :
{}
{
      AnonymousDefinition()
    |
      LOOKAHEAD( TypedDefinition() )
      TypedDefinition()
    |
      NamedDefinition()
}

Scoped ModifiedDefinition()      :
{
  Scoped def;
  int access = Definition.SITE_ACCESS;
  int dur = Definition.IN_CONTEXT;
}
{
    (
      access = AccessModifier() [ dur = DurabilityModifier() ] def = TypedOrNamedDefinition()
    |
      dur = DurabilityModifier() [ access = AccessModifier() ] def = TypedOrNamedDefinition()
    )
    {
        def.setModifiers(access, dur);
        return def;
    }
}

Scoped TypedOrNamedDefinition()      :
{
  Scoped def;
}
{
    (
      LOOKAHEAD(TypedDefinition())
      def = TypedDefinition()
    |
      def = NamedDefinition()
    )
    { return def; }
}

Scoped ModifiedExternalDefinition()      :
{
  Scoped def;
  int access = Definition.SITE_ACCESS;
  int dur = Definition.IN_CONTEXT;
}
{
    (
      access = AccessModifier() [ dur = DurabilityModifier() ] def = TypedOrNamedExternalDefinition(access, dur)
    |
      dur = DurabilityModifier() [ access = AccessModifier() ] def = TypedOrNamedExternalDefinition(access, dur)
    )
    {
        def.setModifiers(access, dur);
        return def;
    }
}

Scoped TypedOrNamedExternalDefinition(int access, int dur)      :
{
  Scoped def;
}
{
    (
      LOOKAHEAD(DefTypeName() "[&]")
      def = ExternalDefinition(access, dur)
    |       
      LOOKAHEAD(CollectionType() | StandardType() DefCollectionName() ("[&]" | "=" "[&]"))
      def = ExternalTypedCollectionDefinition(access, dur)
    |
      LOOKAHEAD(ExternalTypedDefinition())
      def = ExternalTypedDefinition(access, dur)
    |
      LOOKAHEAD(ExternalCollectionDefinition())
      def = ExternalCollectionDefinition(access, dur)
    )
    {
        return def;
    }
}

Scoped ExternalCollectionDefinition(int access, int dur) :
{/*@bgen(jjtree) ExternalCollectionDefinition */
  ParsedExternalCollectionDefinition jjtn000 = new ParsedExternalCollectionDefinition(JJTEXTERNALCOLLECTIONDEFINITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ExternalCollectionDefinition */
    try {
/*@egen*/
    {
        if (access >= 0) {
            jjtn000.setModifiers(access, dur);
        }
    }
    DefCollectionName() ["="] "[&]"/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        return jjtn000;
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}


Scoped ExternalDefinition(int access, int dur) :
{/*@bgen(jjtree) ExternalDefinition */
  ParsedExternalDefinition jjtn000 = new ParsedExternalDefinition(JJTEXTERNALDEFINITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ExternalDefinition */
    try {
/*@egen*/
    {
        if (access >= 0) {
            jjtn000.setModifiers(access, dur);
        }
    }
    DefTypeName() "[&]"/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        return jjtn000;
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}


Scoped ExternalTypedCollectionDefinition(int access, int dur)                              :
{/*@bgen(jjtree) ExternalCollectionDefinition */
  ParsedExternalCollectionDefinition jjtn000 = new ParsedExternalCollectionDefinition(JJTEXTERNALCOLLECTIONDEFINITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ExternalCollectionDefinition */
    try {
/*@egen*/
    {
        if (access >= 0) {
            jjtn000.setModifiers(access, dur);
        }
    }
    (LOOKAHEAD(CollectionType()) CollectionType() DefTypeName() | StandardType() DefCollectionName()) ["="] "[&]"/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        return jjtn000;
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}


Scoped ExternalTypedDefinition(int access, int dur)                    :
{/*@bgen(jjtree) ExternalDefinition */
  ParsedExternalDefinition jjtn000 = new ParsedExternalDefinition(JJTEXTERNALDEFINITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ExternalDefinition */
    try {
/*@egen*/
    {
        if (access >= 0) {
            jjtn000.setModifiers(access, dur);
        }
    }
    SuperType() DefTypeName() "[&]"/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        return jjtn000;
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}


void AnonymousDefinition() :
{/*@bgen(jjtree) AnonymousDefinition */
  ParsedAnonymousDefinition jjtn000 = new ParsedAnonymousDefinition(JJTANONYMOUSDEFINITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) AnonymousDefinition */
    try {
/*@egen*/
    [ ParameterList() ( "," ParameterList() )* ] Block()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

Scoped NamedDefinition()      :
{ Scoped def; }
{
    (
      LOOKAHEAD(CollectionDefinition())
      def = CollectionDefinition()
    |
      LOOKAHEAD((DefElementName() | DefTypeName()) "=")
      def = ElementDefinition()
    |
      def = ComplexDefinition()
    )
    {
        return def;
    }
}

Scoped TypedDefinition()      :
{ Scoped def; }
{
    (
      LOOKAHEAD(TypedCollectionDefinition())
      def = TypedCollectionDefinition()
    |
      LOOKAHEAD(SuperType() (DefElementName() | DefTypeName()) "=")
      def = TypedElementDefinition()
    |
      def = TypedComplexDefinition()
    )
    {
        return def;
    }
}

Scoped CollectionDefinition() :
{/*@bgen(jjtree) CollectionDefinition */
  ParsedCollectionDefinition jjtn000 = new ParsedCollectionDefinition(JJTCOLLECTIONDEFINITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) CollectionDefinition */
    try {
/*@egen*/
    (
      LOOKAHEAD(DefCollectionName() "=" "[")
      DefCollectionName() "=" ArrayInitExpression() [ ";" ] { jjtn000.setIsTable(false); }
    |
      LOOKAHEAD(DefCollectionName() "=" "{")
      DefCollectionName() "=" TableInitExpression() [ ";" ] { jjtn000.setIsTable(true); }
    |
      LOOKAHEAD(DefTypeName() "=" "[")
      DefTypeName() "=" ArrayInitExpression() [ ";" ] { jjtn000.setIsTable(false); }
    |
      LOOKAHEAD(DefTypeName() "=" "{")
      DefTypeName() "=" TableInitExpression() [ ";" ] { jjtn000.setIsTable(true); }
    |
      LOOKAHEAD(DefTypeName() (IndefiniteDim())+ "=")
      DefTypeName() (IndefiniteDim())+ "=" ValueInstanceExpression() [ ";" ]
    |
      DefTypeName() (IndefiniteDim())+ Block()
    )/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        return jjtn000;
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}


Scoped ComplexDefinition() :
{/*@bgen(jjtree) ComplexDefinition */
  ParsedComplexDefinition jjtn000 = new ParsedComplexDefinition(JJTCOMPLEXDEFINITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ComplexDefinition */
    try {
/*@egen*/
    (LOOKAHEAD(2) DefElementName() | DefTypeName()) Block()/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        return jjtn000;
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

Scoped ElementDefinition() :
{/*@bgen(jjtree) ElementDefinition */
  ParsedElementDefinition jjtn000 = new ParsedElementDefinition(JJTELEMENTDEFINITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ElementDefinition */
    try {
/*@egen*/
    (
      LOOKAHEAD( DefElementName() )
      DefElementName()
    |
      DefTypeName()
    )
     "=" ElementExpression() [ ";" ]/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        return jjtn000;
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

Scoped TypedCollectionDefinition()                      :
{/*@bgen(jjtree) CollectionDefinition */
  ParsedCollectionDefinition jjtn000 = new ParsedCollectionDefinition(JJTCOLLECTIONDEFINITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) CollectionDefinition */
    try {
/*@egen*/
    (
      LOOKAHEAD(CollectionType() DefCollectionName() "=" "[")
      CollectionType() DefCollectionName() "=" ArrayInitExpression() { jjtn000.setIsTable(false); }
    |
      LOOKAHEAD(CollectionType() DefCollectionName() "=" "{")
      CollectionType() DefCollectionName() "=" TableInitExpression() { jjtn000.setIsTable(true); }
    |
      LOOKAHEAD(IndefiniteCollectionType() DefTypeName() "=" ValueInstanceExpression())
      IndefiniteCollectionType() DefTypeName() "=" ValueInstanceExpression() [ ";" ]
    |
      LOOKAHEAD(IndefiniteCollectionType() DefTypeName() Block())
      IndefiniteCollectionType() DefTypeName() Block()
    |
      LOOKAHEAD(CollectionType() DefTypeName() "=" "[")
      CollectionType() DefTypeName() "=" ArrayInitExpression() { jjtn000.setIsTable(false); }
    |
      LOOKAHEAD(CollectionType() DefTypeName() "=" "{")
      CollectionType() DefTypeName() "=" TableInitExpression() { jjtn000.setIsTable(true); }
    |
      LOOKAHEAD(SuperType() DefCollectionName() "=" "[")
      SuperType() DefCollectionName() "=" ArrayInitExpression() { jjtn000.setIsTable(false); }
    | 
      LOOKAHEAD(SuperType() DefCollectionName() "=" "{")
      SuperType() DefCollectionName() "=" TableInitExpression() { jjtn000.setIsTable(true); }
    |
      LOOKAHEAD(SuperType() DefTypeName() "=" "[")
      SuperType() DefTypeName() "=" ArrayInitExpression() { jjtn000.setIsTable(false); }
    | 
      LOOKAHEAD(SuperType() DefTypeName() "=" "{")
      SuperType() DefTypeName() "=" TableInitExpression() { jjtn000.setIsTable(true); }
    |
      LOOKAHEAD(SuperType() DefTypeName() (IndefiniteDim())+ "=")
      SuperType() DefTypeName() (IndefiniteDim())+ "=" ValueInstanceExpression() [ ";" ]
    |
      SuperType() DefTypeName() (IndefiniteDim())+ Block()
    )/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        return jjtn000;
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void ArrayInitExpression()               :
{/*@bgen(jjtree) #Arguments(> 0) */
  ParsedArguments jjtn000 = new ParsedArguments(JJTARGUMENTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #Arguments(> 0) */
   try {
/*@egen*/
   (
      "["
      (
        "]"       // empty array
      |
        ( Ellipsis() ( LOOKAHEAD(2) "," ArrayElementExpression() )* [ "," ] "]" )
      |
        ( ArrayElementExpression() ( LOOKAHEAD(2) "," ArrayElementExpression() )* [ LOOKAHEAD(2) "," Ellipsis() ( LOOKAHEAD(2) "," ArrayElementExpression() )* ] [ "," ] "]" )
      )
   )/*@bgen(jjtree)*/
   {
     jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 0);
     jjtc000 = false;
   }
/*@egen*/
   {
       jjtn000.setArray();
   }/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 0);
     }
   }
/*@egen*/
}

/** An ellipsis works like a super statement, except that it refers to a collection 
 *  rather than a definition.  When a collection is extended, by default the additional
 *  elements are added to the end of the collection.  But they can also be added before
 *  collection, or partially before and partially after, by including an ellipsis in 
 *  the definition of the extension.  When the collection is instantiated, the base
 *  collection is spliced into the extended collection at the ellipsis.  
 **/
void Ellipsis() :
{/*@bgen(jjtree) Ellipsis */
  ParsedEllipsis jjtn000 = new ParsedEllipsis(JJTELLIPSIS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Ellipsis */
    try {
/*@egen*/
    (
      "..."
    )/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

AbstractNode AnonymousArray() :
{/*@bgen(jjtree) AnonymousArray */
  ParsedAnonymousArray jjtn000 = new ParsedAnonymousArray(JJTANONYMOUSARRAY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) AnonymousArray */
   try {
/*@egen*/
   (
      "["
      (
        "]"       // empty array
      |
        ( ArrayElementExpression() ( LOOKAHEAD(2) "," ArrayElementExpression() )* [ "," ] "]" )
      )
   )/*@bgen(jjtree)*/
   {
     jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
   }
/*@egen*/
   {       return jjtn000;
   }/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}


void TableInitExpression()               :
{/*@bgen(jjtree) #Arguments(> 0) */
  ParsedArguments jjtn000 = new ParsedArguments(JJTARGUMENTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #Arguments(> 0) */
   try {
/*@egen*/
   (
      "{"
      (
        "}"       // empty table
      |
        ( TableElementExpression() ( LOOKAHEAD(2) "," TableElementExpression() )* [ "," ] "}" )
      )
   )/*@bgen(jjtree)*/
   {
     jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 0);
     jjtc000 = false;
   }
/*@egen*/
   {
       jjtn000.setTable();
   }/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 0);
     }
   }
/*@egen*/
}

AbstractNode AnonymousTable() :
{/*@bgen(jjtree) AnonymousTable */
  ParsedAnonymousTable jjtn000 = new ParsedAnonymousTable(JJTANONYMOUSTABLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) AnonymousTable */
    try {
/*@egen*/
    (
      "{"
      (
        "}"       // empty table
      |
        ( TableElementExpression() ( LOOKAHEAD(2) "," TableElementExpression() )* [ "," ] "}" )
      )
    )/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        return jjtn000;
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

Scoped TypedElementDefinition()                   :
{/*@bgen(jjtree) ElementDefinition */
  ParsedElementDefinition jjtn000 = new ParsedElementDefinition(JJTELEMENTDEFINITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ElementDefinition */
    try {
/*@egen*/
    SuperType()
    (
      LOOKAHEAD( DefElementName() )
      DefElementName()
    |
      DefTypeName()
    )
    "=" ElementExpression() [ ";" ]/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        return jjtn000;
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

Scoped TypedComplexDefinition()                   :
{/*@bgen(jjtree) ComplexDefinition */
  ParsedComplexDefinition jjtn000 = new ParsedComplexDefinition(JJTCOMPLEXDEFINITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ComplexDefinition */
    try {
/*@egen*/
    SuperType() (LOOKAHEAD(2) DefElementName() | DefTypeName()) Block()/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        return jjtn000;
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}


void ArrayElementExpression()      :
{}
{
    (
      LOOKAHEAD("[=" ArrayElementExpression() ("," | "]"))
      ArrayInitBlock()
    |
      LOOKAHEAD(ArrayDynamicInitExpression())
      ArrayDynamicInitExpression()
    | 
      ElementExpression() 
    )
}


void ElementExpression()      :
{}
{
    (
      StaticBlock()
    |
      EmbeddedFunBlock()
    |
      NullBlock()
    |
      ValueExpression()
    |
      AnonymousTable()
    |
      AnonymousArray()
    )
}

AbstractNode generateElementExpression()      :
{ AbstractNode node; }
{    (
      node = StaticBlock()
    |
      node = EmbeddedFunBlock()
    |
      node = NullBlock()
    |
      node = ValueExpression()
    |
      node = AnonymousTable()
    |
      node = AnonymousArray()
    )
    {        return node;
    }
}
  



void TableElementExpression()      :
{}
{
    (
      TableDynamicInitExpression()
    | 
      TableElement()
    )
}

void TableDynamicElementExpression()      :
{}
{
    (
      LOOKAHEAD(TableDynamicInitExpression())
      TableDynamicInitExpression()
    | 
      TableDynamicElement()
    )
}


void TableElement() :
{/*@bgen(jjtree) TableElement */
  ParsedTableElement jjtn000 = new ParsedTableElement(JJTTABLEELEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) TableElement */
    try {
/*@egen*/
    (      PureComplexName()
    |
      CharLiteral()
    | 
      SingleQuoteStringLiteral()
    |
      DoubleQuoteStringLiteral()
    |
      "(" ValueExpression() ")"
    )
    ":" ElementExpression()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/ 
}

void TableDynamicElement()              :
{/*@bgen(jjtree) TableElement */
  ParsedTableElement jjtn000 = new ParsedTableElement(JJTTABLEELEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) TableElement */
    try {
/*@egen*/
    ValueExpression() ":" ElementExpression()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/ 
}


int AccessModifier()      :
{ int modifier = Definition.SITE_ACCESS; }
{
    (
      "local" { modifier = Definition.LOCAL_ACCESS; }
    |
      "public" { modifier = Definition.PUBLIC_ACCESS; }
    )
    {
        return modifier;
    }
}

int DurabilityModifier()      :
{ int modifier; }
{
    (
      "static" { modifier = Definition.STATIC; }
    |
      "global" { modifier = Definition.GLOBAL; }
    |
      "dynamic" { modifier = Definition.DYNAMIC; }
    )
    {
        return modifier;
    }
}

void SimpleType()      :
{}
{
    PrimitiveType() | Type()
}

void StandardType()      :
{}
{
    PrimitiveType() | Type() | CorrespondingSuperType()
}

void SuperType()              :
{/*@bgen(jjtree) #TypeList(> 1) */
  ParsedTypeList jjtn000 = new ParsedTypeList(JJTTYPELIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #TypeList(> 1) */
    try {
/*@egen*/
    ( CorrespondingSuperType() | PrimitiveType() |  LOOKAHEAD(TypeName() "(") TypeWithArguments() | Type() )
    ( "," ( CorrespondingSuperType() | PrimitiveType() |  LOOKAHEAD(TypeName() "(") TypeWithArguments() | Type() ) )*/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
      }
    }
/*@egen*/
}

void CorrespondingSuperType()      :
{/*@bgen(jjtree) Type */
  ParsedType jjtn000 = new ParsedType(JJTTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Type */
    try {
/*@egen*/    CorrespondingSuperName()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void CorrespondingSuperName()      :
{/*@bgen(jjtree) Name */
  ParsedName jjtn000 = new ParsedName(JJTNAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Name */
    try {
/*@egen*/
    (      "this"/*@bgen(jjtree)*/
             {
               jjtree.closeNodeScope(jjtn000, true);
               jjtc000 = false;
             }
/*@egen*/ { jjtn000.setName(Name.THIS); }
    )/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void TypeWithArguments()      :
{/*@bgen(jjtree) Type */
  ParsedType jjtn000 = new ParsedType(JJTTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Type */
    try {
/*@egen*/
    TypeName()
    (
      LOOKAHEAD("(" Any())
      "(" Any() ")"
    |
      Arguments()
    )/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/ 
}

void Type() :
{/*@bgen(jjtree) Type */
  ParsedType jjtn000 = new ParsedType(JJTTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Type */
    try {
/*@egen*/
    TypeName()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void CollectionType()      :
{/*@bgen(jjtree) Type */
  ParsedType jjtn000 = new ParsedType(JJTTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Type */
    try {
/*@egen*/
    (
       PrimitiveType()
    |
       LOOKAHEAD(TypeName() "(")
       TypeWithArguments()
    |
       TypeName()
    )
    ( Dim() )+/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void IndefiniteCollectionType()      :
{/*@bgen(jjtree) Type */
  ParsedType jjtn000 = new ParsedType(JJTTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Type */
    try {
/*@egen*/
    (
       PrimitiveType()
    |
       LOOKAHEAD(TypeName() "(")
       TypeWithArguments()
    |
       TypeName()
    )
    ( IndefiniteDim() )+/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}


void Dim()     :
{/*@bgen(jjtree) Dim */
  ParsedDim jjtn000 = new ParsedDim(JJTDIM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Dim */
    try {
/*@egen*/
    "[" (

          "]"/*@bgen(jjtree)*/
                                 {
                                   jjtree.closeNodeScope(jjtn000, true);
                                   jjtc000 = false;
                                 }
/*@egen*/                    { jjtn000.setDimType(Dim.TYPE.INDEFINITE); }
        |
          LOOKAHEAD("+" "]")
          "+" "]"/*@bgen(jjtree)*/
                                 {
                                   jjtree.closeNodeScope(jjtn000, true);
                                   jjtc000 = false;
                                 }
/*@egen*/                { jjtn000.setDimType(Dim.TYPE.APPEND); }
        |
          LOOKAHEAD("^" "]")
          "^" "]"/*@bgen(jjtree)*/
                                 {
                                   jjtree.closeNodeScope(jjtn000, true);
                                   jjtc000 = false;
                                 }
/*@egen*/                { jjtn000.setDimType(Dim.TYPE.STREAM); }
        |
          ValueExpression() "]"/*@bgen(jjtree)*/
                                 {
                                   jjtree.closeNodeScope(jjtn000, true);
                                   jjtc000 = false;
                                 }
/*@egen*/  { jjtn000.setDimType(Dim.TYPE.DEFINITE); }
        )/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void DefiniteDim()     :
{/*@bgen(jjtree) Dim */
  ParsedDim jjtn000 = new ParsedDim(JJTDIM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Dim */
    try {
/*@egen*/
    { jjtn000.setDimType(Dim.TYPE.DEFINITE); }
    "[" ValueExpression() "]"/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void AppendDim()     :
{/*@bgen(jjtree) Dim */
  ParsedDim jjtn000 = new ParsedDim(JJTDIM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Dim */
    try {
/*@egen*/
    { jjtn000.setDimType(Dim.TYPE.APPEND); }
    "[" "+" "]"/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void StreamDim()     :
{/*@bgen(jjtree) Dim */
  ParsedDim jjtn000 = new ParsedDim(JJTDIM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Dim */
    try {
/*@egen*/
    { jjtn000.setDimType(Dim.TYPE.STREAM); }
    "[" "^" "]"/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void IndefiniteDim()     :
{/*@bgen(jjtree) Dim */
  ParsedDim jjtn000 = new ParsedDim(JJTDIM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Dim */
    try {
/*@egen*/
    { jjtn000.setDimType(Dim.TYPE.INDEFINITE); }
    (
      "[" "]"
    )/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}


//
// Names
//

void TypeName()      :
{}
{
    Name() ( LOOKAHEAD(2) "." Name() )*
}

void DefCollectionName() :
{/*@bgen(jjtree) DefCollectionName */
  ParsedDefCollectionName jjtn000 = new ParsedDefCollectionName(JJTDEFCOLLECTIONNAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; }
{/*@bgen(jjtree) DefCollectionName */
    try {
/*@egen*/
    ( t = <IDENTIFIER> ) { jjtn000.setName(t.image); } [ ParameterList() ( "," ParameterList() )* ] ( Dim() )+/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void DefCollectionParamName()                   :
{/*@bgen(jjtree) DefCollectionName */
  ParsedDefCollectionName jjtn000 = new ParsedDefCollectionName(JJTDEFCOLLECTIONNAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; }
{/*@bgen(jjtree) DefCollectionName */
    try {
/*@egen*/
    ( t = <IDENTIFIER> ) { jjtn000.setName(t.image); } ( IndefiniteDim() )+/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void DefTypeName() :
{/*@bgen(jjtree) DefTypeName */
  ParsedDefTypeName jjtn000 = new ParsedDefTypeName(JJTDEFTYPENAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; }
{/*@bgen(jjtree) DefTypeName */
    try {
/*@egen*/
    t = <IDENTIFIER> { jjtn000.setName(t.image); } [ ParameterList() ( "," ParameterList() )* ]/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void DefElementName() :
{/*@bgen(jjtree) DefElementName */
  ParsedDefElementName jjtn000 = new ParsedDefElementName(JJTDEFELEMENTNAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; }
{/*@bgen(jjtree) DefElementName */
    try {
/*@egen*/
    t = <IDENTIFIER> { jjtn000.setName(t.image); }
    (
      LOOKAHEAD("[" "+")
      AppendDim()
    |
      LOOKAHEAD("[" "^")
      StreamDim()
    |
      LOOKAHEAD("[")
      DefiniteDim()
    )+/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}


void ParameterList() :
{/*@bgen(jjtree) ParameterList */
  ParsedParameterList jjtn000 = new ParsedParameterList(JJTPARAMETERLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ParameterList */
    try {
/*@egen*/
    "(" [ DefParameter() ( "," DefParameter() )* [ Ellipsis() ] ] ")"/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}


void DefParameter() :
{/*@bgen(jjtree) DefParameter */
  ParsedDefParameter jjtn000 = new ParsedDefParameter(JJTDEFPARAMETER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) DefParameter */
    try {
/*@egen*/
    (
      LOOKAHEAD( SimpleType() DefCollectionParamName() )
      SimpleType() DefCollectionParamName()
    |
      LOOKAHEAD( SimpleType() <IDENTIFIER> )
      SimpleType() Name() [ ParameterList() ]
    |
      LOOKAHEAD( IndefiniteCollectionType() Name() )
      IndefiniteCollectionType()  Name() [ ParameterList() ]
    |
      LOOKAHEAD( <IDENTIFIER> ("[" | "{") )
      DefCollectionParamName()
    |
      Name()  [ ParameterList() ]
    |
      "*"
    )/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

//
// Fun Expressions (other than SiteExpresssion, defined above)
//
void FunExpression()      :
{}
{
      ConditionalExpression()
    |
      ForExpression()
    |
      RedirectStatement()
    |
      ContinueStatement()
}

// syntax of names specified in adopt and extern statements
void NameRange()      :
{}
{
    Name() ( LOOKAHEAD(2) "." (Name() | RegExp()) )*  [ "." AnyAny() ]
}


void RegExp()      :
{}
{
    // for now, the only regexp is *
    Any()
}

void Any() :
{/*@bgen(jjtree) Any */
  ParsedAny jjtn000 = new ParsedAny(JJTANY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Any */
    try {
/*@egen*/
    "*"/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void AnyAny() :
{/*@bgen(jjtree) AnyAny */
  ParsedAnyAny jjtn000 = new ParsedAnyAny(JJTANYANY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) AnyAny */
    try {
/*@egen*/
    "**"/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void PrimitiveType() :
{/*@bgen(jjtree) PrimitiveType */
  ParsedPrimitiveType jjtn000 = new ParsedPrimitiveType(JJTPRIMITIVETYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) PrimitiveType */
      try {
/*@egen*/
      "boolean"/*@bgen(jjtree)*/
                 {
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                 }
/*@egen*/  { jjtn000.makeBoolean(); }
    |
      "char"/*@bgen(jjtree)*/
              {
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
              }
/*@egen*/  { jjtn000.makeChar(); }
    |
      "byte"/*@bgen(jjtree)*/
              {
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
              }
/*@egen*/  { jjtn000.makeByte(); }
    |
      "short"/*@bgen(jjtree)*/
               {
                 jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
               }
/*@egen*/  { jjtn000.makeShort(); }
    |
      "int"/*@bgen(jjtree)*/
             {
               jjtree.closeNodeScope(jjtn000, true);
               jjtc000 = false;
             }
/*@egen*/  { jjtn000.makeInt(); }
    |
      "long"/*@bgen(jjtree)*/
              {
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
              }
/*@egen*/  { jjtn000.makeLong(); }
    |
      "float"/*@bgen(jjtree)*/
               {
                 jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
               }
/*@egen*/  { jjtn000.makeFloat(); }
    |
      "double"/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                }
/*@egen*/  { jjtn000.makeDouble(); }
    |
      "string"/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                }
/*@egen*/  { jjtn000.makeString(); }
    |
      "number"/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                }
/*@egen*/  { jjtn000.makeNumber(); }
    |
      "@"/*@bgen(jjtree)*/
           {
             jjtree.closeNodeScope(jjtn000, true);
             jjtc000 = false;
           }
/*@egen*/  { jjtn000.makeContinuation(); }
    |
      "void"/*@bgen(jjtree)*/
              {
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
              }
/*@egen*/  { jjtn000.makeVoid(); }/*@bgen(jjtree)*/
      } finally {
        if (jjtc000) {
          jjtree.closeNodeScope(jjtn000, true);
        }
      }
/*@egen*/}

//
// Constructions
//

void ConditionalExpression() :
{/*@bgen(jjtree) ConditionalExpression */
  ParsedConditionalExpression jjtn000 = new ParsedConditionalExpression(JJTCONDITIONALEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ConditionalExpression */
    try {
/*@egen*/
    ( IfExpression() | WithExpression() )
    (
        LOOKAHEAD(2)
        ElseIfOrWithExpression()
    )*
    [ ElseExpression() ]/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void IfExpression()      :
{}
{
    "if" ValueExpression()
        Block()
}

void WithExpression()      :
{}
{
    (
      "with" WithPredicateExpression()
    |
      "without" WithoutPredicateExpression()
    )
    Block()
}

void WithPredicateExpression()      :
{}
{
    ( "(" WithPredicateExpression() ")" | WithPredicate())
}

void WithPredicate() :
{/*@bgen(jjtree) WithPredicate */
  ParsedWithPredicate jjtn000 = new ParsedWithPredicate(JJTWITHPREDICATE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) WithPredicate */
    try {
/*@egen*/
    LOOKAHEAD(Name() "[") NameWithIndexes()/*@bgen(jjtree)*/
                                            {
                                              jjtree.closeNodeScope(jjtn000, true);
                                              jjtc000 = false;
                                            }
/*@egen*/ { jjtn000.setElementPresent(true); }
  | 
    Name()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/}

void WithoutPredicateExpression()      :
{}
{
    ( "(" WithoutPredicateExpression() ")" | WithoutPredicate())
}

void WithoutPredicate() :
{/*@bgen(jjtree) WithoutPredicate */
  ParsedWithoutPredicate jjtn000 = new ParsedWithoutPredicate(JJTWITHOUTPREDICATE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) WithoutPredicate */
    try {
/*@egen*/
    LOOKAHEAD(Name() "[") NameWithIndexes()/*@bgen(jjtree)*/
                                            {
                                              jjtree.closeNodeScope(jjtn000, true);
                                              jjtc000 = false;
                                            }
/*@egen*/ { jjtn000.setElementPresent(true); }
  | 
    Name()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void ElseIfOrWithExpression()      :
{}
{
    "else" ( "if" ValueExpression() | "with" WithPredicateExpression() ) Block()
}

void ElseExpression()      :
{}
{
    "else"
        Block()
}

void ForExpression() :
{/*@bgen(jjtree) ForExpression */
  ParsedForExpression jjtn000 = new ParsedForExpression(JJTFOREXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ForExpression */
    try {
/*@egen*/
    "for" Iterator(false) ( "and" Iterator(false) | "or" Iterator(true) )* Block()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Iterator(boolean optional)                :
{/*@bgen(jjtree) IteratorValues */
  ParsedIteratorValues jjtn000 = new ParsedIteratorValues(JJTITERATORVALUES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) IteratorValues */
    try {
/*@egen*/
    { jjtn000.setOptional(optional); }
    (      DefExpression()
      (
        ("in" | ":") InstanceExpression()  { jjtn000.setIn(true); }            [ "by" InstanceExpression()  { jjtn000.setBy(true); } ]       
      |
        (
          ("from" | "=") ValueExpression() { jjtn000.setFrom(true); }
            [ ( "to" { jjtn000.setTo(true); } | "through" { jjtn000.setThrough(true); } ) ValueExpression() ]
            [ "by" ValueExpression() { jjtn000.setBy(true); } ]
        )
      )
      [ "where" ValueExpression() { jjtn000.setWhere(true); } ]
      [ "until" ValueExpression() { jjtn000.setUntil(true); } ]
    | 
      "until" { jjtn000.setUntil(true); } ValueExpression()
    )/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void ArrayDynamicInitExpression()      :
{}
{
    (
      ArrayInitConditionalExpression()
    |
      ArrayInitForExpression()
    |
      ArrayInitBlock()
    )
}

void ArrayInitConditionalExpression()                       :
{/*@bgen(jjtree) ConditionalExpression */
  ParsedConditionalExpression jjtn000 = new ParsedConditionalExpression(JJTCONDITIONALEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ConditionalExpression */
    try {
/*@egen*/
    ( ArrayInitIfExpression() | ArrayInitWithExpression() )
    (
        LOOKAHEAD(2)
        ArrayInitElseIfOrWithExpression()
    )*
    [ ArrayInitElseExpression() ]/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void ArrayInitIfExpression()      :
{}
{
    "if" ValueExpression()
        ArrayInitBlock()
}

void ArrayInitWithExpression()      :
{}
{
    "with" WithPredicateExpression()
        ArrayInitBlock()
}


void ArrayInitElseIfOrWithExpression()      :
{}
{
    "else" ( "if" ValueExpression() | "with" WithPredicateExpression() ) ArrayInitBlock()
}

void ArrayInitElseExpression()      :
{}
{
    "else"
        ArrayInitBlock()
}

void ArrayInitForExpression()               :
{/*@bgen(jjtree) ForExpression */
  ParsedForExpression jjtn000 = new ParsedForExpression(JJTFOREXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ForExpression */
    try {
/*@egen*/
    "for" Iterator(false) ( "and" Iterator(false) | "or" Iterator(true) )* ArrayInitBlock()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}


Block ArrayInitBlock()                     :
{/*@bgen(jjtree) DynamicElementBlock */
    ParsedDynamicElementBlock jjtn000 = new ParsedDynamicElementBlock(JJTDYNAMICELEMENTBLOCK);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Block catchBlock;
}
{/*@bgen(jjtree) DynamicElementBlock */
    try {
/*@egen*/
    (
      "{/" [ ArrayElementExpression() ( LOOKAHEAD(2) "," ArrayElementExpression() )* [ "," ] ] "/}"
    )
    [ catchBlock = ArrayInitCatchBlock() { jjtn000.setCatch(catchBlock); } ]/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        return jjtn000;
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}


Block ArrayInitCatchBlock()      :
{
    Block block = null;
}
{
    "catch"  block = ArrayInitBlock()
    {
        return block;
    }
}


void TableDynamicInitExpression()      :
{}
{
    (
      TableInitConditionalExpression()
    |
      TableInitForExpression()
    |
      TableInitBlock()
    )
}

void TableInitConditionalExpression()                       :
{/*@bgen(jjtree) ConditionalExpression */
  ParsedConditionalExpression jjtn000 = new ParsedConditionalExpression(JJTCONDITIONALEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ConditionalExpression */
    try {
/*@egen*/
    ( TableInitIfExpression() | TableInitWithExpression() )
    (
        LOOKAHEAD(2)
        TableInitElseIfOrWithExpression()
    )*
    [ TableInitElseExpression() ]/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void TableInitIfExpression()      :
{}
{
    "if" ValueExpression()
        TableInitBlock()
}

void TableInitWithExpression()      :
{}
{
    "with" WithPredicateExpression()
        TableInitBlock()
}


void TableInitElseIfOrWithExpression()      :
{}
{
    "else" ( "if" ValueExpression() | "with" WithPredicateExpression() ) TableInitBlock()
}

void TableInitElseExpression()      :
{}
{
    "else"
        TableInitBlock()
}

void TableInitForExpression()               :
{/*@bgen(jjtree) ForExpression */
  ParsedForExpression jjtn000 = new ParsedForExpression(JJTFOREXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ForExpression */
    try {
/*@egen*/
    "for" Iterator(false) ( "and" Iterator(false) | "or" Iterator(true) )* TableInitBlock()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

Block TableInitBlock()                     :
{/*@bgen(jjtree) DynamicElementBlock */
    ParsedDynamicElementBlock jjtn000 = new ParsedDynamicElementBlock(JJTDYNAMICELEMENTBLOCK);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Block catchBlock;
}
{/*@bgen(jjtree) DynamicElementBlock */
    try {
/*@egen*/
    (
      "{/" [ TableDynamicElementExpression() ( LOOKAHEAD(2) "," TableDynamicElementExpression() )* [ "," ] ] "/}"
    )
    [ catchBlock = TableInitCatchBlock() { jjtn000.setCatch(catchBlock); } ]/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        return jjtn000;
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}


Block TableInitCatchBlock()      :
{
    Block block = null;
}
{
    "catch"  block = TableInitBlock()
    {
        return block;
    }
}


void DefExpression()      :
{}
{
    "(" DefExpression() ")" | DefParameter()
}

void InstanceExpression()      :
{}
{
    "(" ValueInstanceExpression() ")" | Instance()
}

void ValueInstanceExpression()                     :
{/*@bgen(jjtree) #ValueExpression(> 1) */
  ParsedValueExpression jjtn000 = new ParsedValueExpression(JJTVALUEEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #ValueExpression(> 1) */
    try {
/*@egen*/
    ChoiceInstanceExpression()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
      }
    }
/*@egen*/
}


void ChoiceInstanceExpression()                      :
{/*@bgen(jjtree) #ChoiceExpression(> 1) */
  ParsedChoiceExpression jjtn000 = new ParsedChoiceExpression(JJTCHOICEEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #ChoiceExpression(> 1) */
        try {
/*@egen*/
	(
      LOOKAHEAD( LogicalOrExpression() "?" )
      LogicalOrExpression() "?" ChoiceInstanceExpression() ":" ChoiceInstanceExpression() 
    |
      AdditiveInstanceExpression()
    )/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
          }
        }
/*@egen*/ 
}

void AdditiveInstanceExpression()                      :
{/*@bgen(jjtree) #BinaryExpression(> 1) */
  ParsedBinaryExpression jjtn000 = new ParsedBinaryExpression(JJTBINARYEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #BinaryExpression(> 1) */
  try {
/*@egen*/
  OrInstanceExpression() (AddOperator() OrInstanceExpression())*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
    }
  }
/*@egen*/
}

void OrInstanceExpression()                      :
{/*@bgen(jjtree) #BinaryExpression(> 1) */
  ParsedBinaryExpression jjtn000 = new ParsedBinaryExpression(JJTBINARYEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #BinaryExpression(> 1) */
  try {
/*@egen*/
  XorInstanceExpression() ( OrOperator() XorInstanceExpression() )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
    }
  }
/*@egen*/
}

void XorInstanceExpression()                      :
{/*@bgen(jjtree) #BinaryExpression(> 1) */
  ParsedBinaryExpression jjtn000 = new ParsedBinaryExpression(JJTBINARYEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #BinaryExpression(> 1) */
  try {
/*@egen*/
  AndInstanceExpression() ( XorOperator() AndInstanceExpression() )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
    }
  }
/*@egen*/
}

void AndInstanceExpression()                      :
{/*@bgen(jjtree) #BinaryExpression(> 1) */
  ParsedBinaryExpression jjtn000 = new ParsedBinaryExpression(JJTBINARYEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #BinaryExpression(> 1) */
  try {
/*@egen*/
  UnaryInstanceExpression() ( AndOperator() UnaryInstanceExpression() )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
    }
  }
/*@egen*/
}

void UnaryInstanceExpression()      :
{}
{
  (        BitflipInstanceExpression()
  |
    InstanceExpression()
  )
}

void BitflipInstanceExpression()                 :
{/*@bgen(jjtree) UnaryExpression */
  ParsedUnaryExpression jjtn000 = new ParsedUnaryExpression(JJTUNARYEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) UnaryExpression */
    try {
/*@egen*/
    BitflipOperator() UnaryInstanceExpression()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}


Instantiation parseInstance()              :
{/*@bgen(jjtree) Construction */
  ParsedConstruction jjtn000 = new ParsedConstruction(JJTCONSTRUCTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Construction */
    try {
/*@egen*/
    ComplexName()/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        return jjtn000;
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Instance()              :
{/*@bgen(jjtree) Construction */
  ParsedConstruction jjtn000 = new ParsedConstruction(JJTCONSTRUCTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Construction */
    try {
/*@egen*/
    ComplexName()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void BreakStatement() :
{/*@bgen(jjtree) BreakStatement */
  ParsedBreakStatement jjtn000 = new ParsedBreakStatement(JJTBREAKSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) BreakStatement */
    try {
/*@egen*/
    "break" [";"]/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void NextConstruction() :
{/*@bgen(jjtree) NextConstruction */
  ParsedNextConstruction jjtn000 = new ParsedNextConstruction(JJTNEXTCONSTRUCTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) NextConstruction */
    try {
/*@egen*/
    "next" ";"/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void SubConstruction() :
{/*@bgen(jjtree) SubConstruction */
  ParsedSubConstruction jjtn000 = new ParsedSubConstruction(JJTSUBCONSTRUCTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) SubConstruction */
    try {
/*@egen*/
    "sub" ";"/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void SuperConstruction() :
{/*@bgen(jjtree) SuperConstruction */
  ParsedSuperConstruction jjtn000 = new ParsedSuperConstruction(JJTSUPERCONSTRUCTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) SuperConstruction */
    try {
/*@egen*/
    "super" ";"/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void AnonymousConstruction()              :
{/*@bgen(jjtree) Construction */
  ParsedConstruction jjtn000 = new ParsedConstruction(JJTCONSTRUCTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Construction */
    try {
/*@egen*/
    (
      LOOKAHEAD( "(" ValueExpression() ")" ";" )
      "(" ValueExpression() ")" ";" [ "++" { jjtn000.setConcurrent(); } ]
    |
      AnonymousDefinition() [ ";" [ "++" { jjtn000.setConcurrent(); } ] ]
    |
      Literal() ";"
    )/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    { jjtn000.setAnonymous(); }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/}

void NamedConstruction()              :
{/*@bgen(jjtree) Construction */
  ParsedConstruction jjtn000 = new ParsedConstruction(JJTCONSTRUCTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Construction */
    try {
/*@egen*/
    ComplexName() ";" [ "++" { jjtn000.setConcurrent(); } ]/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void ComplexName()                 :
{/*@bgen(jjtree) #ComplexName(> 1) */
  ParsedComplexName jjtn000 = new ParsedComplexName(JJTCOMPLEXNAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #ComplexName(> 1) */
    try {
/*@egen*/
    (LOOKAHEAD(NameComponent() ".") NameComponent() ".")* NameComponent()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
      }
    }
/*@egen*/
}


void PureComplexName()                 :
{/*@bgen(jjtree) #ComplexName(> 1) */
  ParsedComplexName jjtn000 = new ParsedComplexName(JJTCOMPLEXNAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #ComplexName(> 1) */
    try {
/*@egen*/
    (
      LOOKAHEAD(Name() ".")
      (LOOKAHEAD(NameComponent() ".") Name() ".")+ (Name() | "keep")
    |
      Name()
    )/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
      }
    }
/*@egen*/}

ComplexName parseComplexName()             :
{/*@bgen(jjtree) ComplexName */
  ParsedComplexName jjtn000 = new ParsedComplexName(JJTCOMPLEXNAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ComplexName */
    try {
/*@egen*/
    (LOOKAHEAD(NameComponent() ".") NameComponent() ".")* NameComponent()/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        return jjtn000;
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}


void NameComponent()      :
{}
{
    (
      SpecialName()
    |
      LOOKAHEAD(Name() "[") NameWithIndexes()
    | 
      LOOKAHEAD(Name() Arguments() "[") NameWithIndexes()
    |
      LOOKAHEAD(Name() ("(:" | "(")) NameWithArguments()
    |
      Name()
    )
}

void SpecialName() :
{/*@bgen(jjtree) SpecialName */
  ParsedSpecialName jjtn000 = new ParsedSpecialName(JJTSPECIALNAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) SpecialName */
    try {
/*@egen*/
    (
      "container"/*@bgen(jjtree)*/
                  {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                  }
/*@egen*/ { jjtn000.setName(Name.CONTAINER); }
    |
      "core"/*@bgen(jjtree)*/
                  {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                  }
/*@egen*/      { jjtn000.setName(Name.CORE); }
    |
      "count"/*@bgen(jjtree)*/
                  {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                  }
/*@egen*/     { jjtn000.setName(Name.COUNT); }
    |
      "def"/*@bgen(jjtree)*/
                  {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                  }
/*@egen*/       { jjtn000.setName(Name.DEF); }
    |
      "keys"/*@bgen(jjtree)*/
                  {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                  }
/*@egen*/      { jjtn000.setName(Name.KEYS); }
    |
      "here"/*@bgen(jjtree)*/
                  {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                  }
/*@egen*/      { jjtn000.setName(Name.HERE); }
    |
      "next"/*@bgen(jjtree)*/
                  {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                  }
/*@egen*/      { jjtn000.setName(Name.NEXT); }
    |
      "owner"/*@bgen(jjtree)*/
                  {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                  }
/*@egen*/     { jjtn000.setName(Name.OWNER); }
    |
      "site"/*@bgen(jjtree)*/
                  {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                  }
/*@egen*/      { jjtn000.setName(Name.SITE); }
    |
      "source"/*@bgen(jjtree)*/
                  {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                  }
/*@egen*/    { jjtn000.setName(Name.SOURCE); }
    |
      "sub"/*@bgen(jjtree)*/
                  {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                  }
/*@egen*/       { jjtn000.setName(Name.SUB); }
    |
      "super"/*@bgen(jjtree)*/
                  {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                  }
/*@egen*/     { jjtn000.setName(Name.SUPER); }
    |
      "this"/*@bgen(jjtree)*/
                  {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                  }
/*@egen*/      { jjtn000.setName(Name.THIS); }
    |
      "type" [ LOOKAHEAD("(") Arguments() ]/*@bgen(jjtree)*/
                                            {
                                              jjtree.closeNodeScope(jjtn000, true);
                                              jjtc000 = false;
                                            }
/*@egen*/ { jjtn000.setName(Name.TYPE); }
    )/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}



void NameWithArguments() :
{/*@bgen(jjtree) NameWithArguments */
  ParsedNameWithArguments jjtn000 = new ParsedNameWithArguments(JJTNAMEWITHARGUMENTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; }
{/*@bgen(jjtree) NameWithArguments */
    try {
/*@egen*/
    t = <IDENTIFIER> { jjtn000.setName(t.image); } Arguments()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void NameWithIndexes() :
{/*@bgen(jjtree) NameWithIndexes */
  ParsedNameWithIndexes jjtn000 = new ParsedNameWithIndexes(JJTNAMEWITHINDEXES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; }
{/*@bgen(jjtree) NameWithIndexes */
    try {
/*@egen*/
    t = <IDENTIFIER> { jjtn000.setName(t.image); } [ Arguments() ] ( Index() )+/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Name() :
{/*@bgen(jjtree) Name */
  ParsedName jjtn000 = new ParsedName(JJTNAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; }
{/*@bgen(jjtree) Name */
    try {
/*@egen*/
    t = <IDENTIFIER>/*@bgen(jjtree)*/
                     {
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
                     }
/*@egen*/ { jjtn000.setName(t.image); }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Index() :
{/*@bgen(jjtree) Index */
  ParsedIndex jjtn000 = new ParsedIndex(JJTINDEX);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Index */
    try {
/*@egen*/
    (
      "[" ValueExpression() "]"
    )/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}


void Arguments() :
{/*@bgen(jjtree) Arguments */
  ParsedArguments jjtn000 = new ParsedArguments(JJTARGUMENTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Arguments */
    try {
/*@egen*/
    (
      "(:" [ ElementExpression() ( "," ElementExpression() )* ] ":)"/*@bgen(jjtree)*/
                                                                     {
                                                                       jjtree.closeNodeScope(jjtn000, true);
                                                                       jjtc000 = false;
                                                                     }
/*@egen*/ { jjtn000.setDynamic(); }
    |
      "(" [ ElementExpression() ( "," ElementExpression() )* ] ")"
    )/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

//
// Values and Expressions
//

ValueExpression parseValueExpression()                 :
{/*@bgen(jjtree) ValueExpression */
  ParsedValueExpression jjtn000 = new ParsedValueExpression(JJTVALUEEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ValueExpression */
    try {
/*@egen*/
    ValueExpression()/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        return jjtn000;
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

AbstractNode ValueExpression()                     :
{/*@bgen(jjtree) #ValueExpression(> 1) */
  ParsedValueExpression jjtn000 = new ParsedValueExpression(JJTVALUEEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #ValueExpression(> 1) */
    try {
/*@egen*/
    ChoiceExpression()/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
      jjtc000 = false;
    }
/*@egen*/
    {        return jjtn000;
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
      }
    }
/*@egen*/
}

void ChoiceExpression()                      :
{/*@bgen(jjtree) #ChoiceExpression(> 1) */
  ParsedChoiceExpression jjtn000 = new ParsedChoiceExpression(JJTCHOICEEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #ChoiceExpression(> 1) */
    try {
/*@egen*/
    (
      LOOKAHEAD(WithPredicate() "??")      WithPredicate() "??" ValueExpression() ":" ValueExpression()
    | 
      LogicalOrExpression() [ "?" ValueExpression() ":" ValueExpression() ]
    )/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
      }
    }
/*@egen*/
}

void LogicalOrExpression()                      :
{/*@bgen(jjtree) #BinaryExpression(> 1) */
  ParsedBinaryExpression jjtn000 = new ParsedBinaryExpression(JJTBINARYEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #BinaryExpression(> 1) */
  try {
/*@egen*/
  LogicalAndExpression() ( LogicalOrOperator() LogicalAndExpression() )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
    }
  }
/*@egen*/
}

void LogicalOrOperator() :
{/*@bgen(jjtree) LogicalOrOperator */
  ParsedLogicalOrOperator jjtn000 = new ParsedLogicalOrOperator(JJTLOGICALOROPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) LogicalOrOperator */
    try {
/*@egen*/
    "||"/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void LogicalAndExpression()                      :
{/*@bgen(jjtree) #BinaryExpression(> 1) */
  ParsedBinaryExpression jjtn000 = new ParsedBinaryExpression(JJTBINARYEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #BinaryExpression(> 1) */
  try {
/*@egen*/
  EqualityExpression() ( LogicalAndOperator() EqualityExpression() )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
    }
  }
/*@egen*/
}

void LogicalAndOperator() :
{/*@bgen(jjtree) LogicalAndOperator */
  ParsedLogicalAndOperator jjtn000 = new ParsedLogicalAndOperator(JJTLOGICALANDOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) LogicalAndOperator */
    try {
/*@egen*/
    "&&"/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void EqualityExpression()                      :
{/*@bgen(jjtree) #BinaryExpression(> 1) */
  ParsedBinaryExpression jjtn000 = new ParsedBinaryExpression(JJTBINARYEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #BinaryExpression(> 1) */
  try {
/*@egen*/
  RelationalExpression() ( ( EqualsOperator() | EqualsIgnoreCaseOperator() | NotEqualsOperator() | NotEqualsIgnoreCaseOperator() ) RelationalExpression() )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
    }
  }
/*@egen*/
}

void EqualsOperator() :
{/*@bgen(jjtree) EqualsOperator */
  ParsedEqualsOperator jjtn000 = new ParsedEqualsOperator(JJTEQUALSOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) EqualsOperator */
    try {
/*@egen*/
    "=="/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void EqualsIgnoreCaseOperator()                :
{/*@bgen(jjtree) EqualsOperator */
  ParsedEqualsOperator jjtn000 = new ParsedEqualsOperator(JJTEQUALSOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) EqualsOperator */
    try {
/*@egen*/
    "~=="/*@bgen(jjtree)*/
          {
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
          }
/*@egen*/ { jjtn000.setIgnoreCase(); }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void NotEqualsOperator() :
{/*@bgen(jjtree) NotEqualsOperator */
  ParsedNotEqualsOperator jjtn000 = new ParsedNotEqualsOperator(JJTNOTEQUALSOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) NotEqualsOperator */
    try {
/*@egen*/
    "!="/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void NotEqualsIgnoreCaseOperator()                   :
{/*@bgen(jjtree) NotEqualsOperator */
  ParsedNotEqualsOperator jjtn000 = new ParsedNotEqualsOperator(JJTNOTEQUALSOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) NotEqualsOperator */
    try {
/*@egen*/
    "~!="/*@bgen(jjtree)*/
          {
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
          }
/*@egen*/ { jjtn000.setIgnoreCase(); }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void RelationalExpression()                      :
{/*@bgen(jjtree) #BinaryExpression(> 1) */
  ParsedBinaryExpression jjtn000 = new ParsedBinaryExpression(JJTBINARYEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #BinaryExpression(> 1) */
  try {
/*@egen*/
  InExpression() ( ( LessThanOperator() | LTIgnoreCaseOperator() | GreaterThanOperator() | GTIgnoreCaseOperator() | LessThanOrEqualOperator() | LEIgnoreCaseOperator() | GreaterThanOrEqualOperator() | GEIgnoreCaseOperator() ) InExpression() )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
    }
  }
/*@egen*/
}

void LessThanOperator() :
{/*@bgen(jjtree) LessThanOperator */
  ParsedLessThanOperator jjtn000 = new ParsedLessThanOperator(JJTLESSTHANOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) LessThanOperator */
    try {
/*@egen*/
    "<"/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void LTIgnoreCaseOperator()                  :
{/*@bgen(jjtree) LessThanOperator */
  ParsedLessThanOperator jjtn000 = new ParsedLessThanOperator(JJTLESSTHANOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) LessThanOperator */
    try {
/*@egen*/
    "~<"/*@bgen(jjtree)*/
         {
           jjtree.closeNodeScope(jjtn000, true);
           jjtc000 = false;
         }
/*@egen*/ { jjtn000.setIgnoreCase(); }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void GreaterThanOperator() :
{/*@bgen(jjtree) GreaterThanOperator */
  ParsedGreaterThanOperator jjtn000 = new ParsedGreaterThanOperator(JJTGREATERTHANOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) GreaterThanOperator */
    try {
/*@egen*/
    ">"/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void GTIgnoreCaseOperator()                     :
{/*@bgen(jjtree) GreaterThanOperator */
  ParsedGreaterThanOperator jjtn000 = new ParsedGreaterThanOperator(JJTGREATERTHANOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) GreaterThanOperator */
    try {
/*@egen*/
    "~>"/*@bgen(jjtree)*/
         {
           jjtree.closeNodeScope(jjtn000, true);
           jjtc000 = false;
         }
/*@egen*/ { jjtn000.setIgnoreCase(); }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void LessThanOrEqualOperator() :
{/*@bgen(jjtree) LessThanOrEqualOperator */
  ParsedLessThanOrEqualOperator jjtn000 = new ParsedLessThanOrEqualOperator(JJTLESSTHANOREQUALOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) LessThanOrEqualOperator */
    try {
/*@egen*/
    "<="/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void LEIgnoreCaseOperator()                         :
{/*@bgen(jjtree) LessThanOrEqualOperator */
  ParsedLessThanOrEqualOperator jjtn000 = new ParsedLessThanOrEqualOperator(JJTLESSTHANOREQUALOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) LessThanOrEqualOperator */
    try {
/*@egen*/
    "~<="/*@bgen(jjtree)*/
          {
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
          }
/*@egen*/ { jjtn000.setIgnoreCase(); }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void GreaterThanOrEqualOperator() :
{/*@bgen(jjtree) GreaterThanOrEqualOperator */
  ParsedGreaterThanOrEqualOperator jjtn000 = new ParsedGreaterThanOrEqualOperator(JJTGREATERTHANOREQUALOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) GreaterThanOrEqualOperator */
    try {
/*@egen*/
    ">="/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void GEIgnoreCaseOperator()                            :
{/*@bgen(jjtree) GreaterThanOrEqualOperator */
  ParsedGreaterThanOrEqualOperator jjtn000 = new ParsedGreaterThanOrEqualOperator(JJTGREATERTHANOREQUALOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) GreaterThanOrEqualOperator */
    try {
/*@egen*/
    "~>="/*@bgen(jjtree)*/
          {
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
          }
/*@egen*/ { jjtn000.setIgnoreCase(); }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void InExpression()                      :
{/*@bgen(jjtree) #BinaryExpression(> 1) */
  ParsedBinaryExpression jjtn000 = new ParsedBinaryExpression(JJTBINARYEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #BinaryExpression(> 1) */
  try {
/*@egen*/
  ShiftExpression() ( InOperator() ShiftExpression() )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
    }
  }
/*@egen*/
}

void InOperator() :
{/*@bgen(jjtree) InOperator */
  ParsedInOperator jjtn000 = new ParsedInOperator(JJTINOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) InOperator */
    try {
/*@egen*/
    "in"/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}


void ShiftExpression()                      :
{/*@bgen(jjtree) #BinaryExpression(> 1) */
  ParsedBinaryExpression jjtn000 = new ParsedBinaryExpression(JJTBINARYEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #BinaryExpression(> 1) */
  try {
/*@egen*/
  AdditiveExpression() ( ( LeftShiftOperator() | RightShiftOperator() | RightUnsignedShiftOperator() ) AdditiveExpression() )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
    }
  }
/*@egen*/
}

void LeftShiftOperator() :
{/*@bgen(jjtree) LeftShiftOperator */
  ParsedLeftShiftOperator jjtn000 = new ParsedLeftShiftOperator(JJTLEFTSHIFTOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) LeftShiftOperator */
    try {
/*@egen*/
    "<<"/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void RightShiftOperator() :
{/*@bgen(jjtree) RightShiftOperator */
  ParsedRightShiftOperator jjtn000 = new ParsedRightShiftOperator(JJTRIGHTSHIFTOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) RightShiftOperator */
    try {
/*@egen*/
    ">>"/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void RightUnsignedShiftOperator() :
{/*@bgen(jjtree) RightUnsignedShiftOperator */
  ParsedRightUnsignedShiftOperator jjtn000 = new ParsedRightUnsignedShiftOperator(JJTRIGHTUNSIGNEDSHIFTOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) RightUnsignedShiftOperator */
    try {
/*@egen*/
    ">>>"/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void AdditiveExpression()                      :
{/*@bgen(jjtree) #BinaryExpression(> 1) */
  ParsedBinaryExpression jjtn000 = new ParsedBinaryExpression(JJTBINARYEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #BinaryExpression(> 1) */
  try {
/*@egen*/
  MultiplicativeExpression() ( ( AddOperator() | SubtractOperator() ) MultiplicativeExpression() )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
    }
  }
/*@egen*/
}

void AddOperator() :
{/*@bgen(jjtree) AddOperator */
  ParsedAddOperator jjtn000 = new ParsedAddOperator(JJTADDOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) AddOperator */
    try {
/*@egen*/
    "+"/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void SubtractOperator() :
{/*@bgen(jjtree) SubtractOperator */
  ParsedSubtractOperator jjtn000 = new ParsedSubtractOperator(JJTSUBTRACTOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) SubtractOperator */
    try {
/*@egen*/
    "-"/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void MultiplicativeExpression()                      :
{/*@bgen(jjtree) #BinaryExpression(> 1) */
  ParsedBinaryExpression jjtn000 = new ParsedBinaryExpression(JJTBINARYEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #BinaryExpression(> 1) */
    try {
/*@egen*/
    OrExpression() ( (MultiplyOperator() | DivideByOperator() | ModOperator()) OrExpression() )*/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
      }
    }
/*@egen*/
}

void MultiplyOperator() :
{/*@bgen(jjtree) MultiplyOperator */
  ParsedMultiplyOperator jjtn000 = new ParsedMultiplyOperator(JJTMULTIPLYOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) MultiplyOperator */
    try {
/*@egen*/
    "*"/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void DivideByOperator() :
{/*@bgen(jjtree) DivideByOperator */
  ParsedDivideByOperator jjtn000 = new ParsedDivideByOperator(JJTDIVIDEBYOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) DivideByOperator */
    try {
/*@egen*/
    "/"/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void ModOperator() :
{/*@bgen(jjtree) ModOperator */
  ParsedModOperator jjtn000 = new ParsedModOperator(JJTMODOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ModOperator */
    try {
/*@egen*/
    "%"/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void OrExpression()                      :
{/*@bgen(jjtree) #BinaryExpression(> 1) */
  ParsedBinaryExpression jjtn000 = new ParsedBinaryExpression(JJTBINARYEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #BinaryExpression(> 1) */
  try {
/*@egen*/
  XorExpression() ( OrOperator() XorExpression() )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
    }
  }
/*@egen*/
}

void OrOperator() :
{/*@bgen(jjtree) OrOperator */
  ParsedOrOperator jjtn000 = new ParsedOrOperator(JJTOROPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) OrOperator */
    try {
/*@egen*/
    "|"/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void XorExpression()                      :
{/*@bgen(jjtree) #BinaryExpression(> 1) */
  ParsedBinaryExpression jjtn000 = new ParsedBinaryExpression(JJTBINARYEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #BinaryExpression(> 1) */
  try {
/*@egen*/
  AndExpression() ( XorOperator() AndExpression() )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
    }
  }
/*@egen*/
}

void XorOperator() :
{/*@bgen(jjtree) XorOperator */
  ParsedXorOperator jjtn000 = new ParsedXorOperator(JJTXOROPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) XorOperator */
    try {
/*@egen*/
    "^"/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void AndExpression()                      :
{/*@bgen(jjtree) #BinaryExpression(> 1) */
  ParsedBinaryExpression jjtn000 = new ParsedBinaryExpression(JJTBINARYEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #BinaryExpression(> 1) */
  try {
/*@egen*/
  UnaryExpression() ( AndOperator() UnaryExpression() )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
    }
  }
/*@egen*/
}

void AndOperator() :
{/*@bgen(jjtree) AndOperator */
  ParsedAndOperator jjtn000 = new ParsedAndOperator(JJTANDOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) AndOperator */
    try {
/*@egen*/
    "&"/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void UnaryExpression()      :
{}
{
  (
    PositiveExpression()
  |
    NegativeExpression()
  |
    BitflipExpression()
  |
    LogicalNotExpression()
  |
    LOOKAHEAD( CastLookahead() )
    CastExpression()
  |
    IsaExpression()
  |
    ExpressionComprehension()
  )
}

void ExpressionComprehension()      :
{}
{
  (    ComprehensionForExpression()
  |
    ComprehensionConditionalExpression() 
  )}

void ComprehensionConditionalExpression()                       :
{/*@bgen(jjtree) ConditionalExpression */
  ParsedConditionalExpression jjtn000 = new ParsedConditionalExpression(JJTCONDITIONALEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ConditionalExpression */
    try {
/*@egen*/
    ( ComprehensionIfExpression() | ComprehensionWithExpression() )
    (
        LOOKAHEAD(2)
        ComprehensionElseIfOrWithExpression()
    )*
    [ ComprehensionElseExpression() ]/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void ComprehensionIfExpression()      :
{}
{
    "if" ValueExpression()
        ComprehensionBlock()
}

void ComprehensionWithExpression()      :
{}
{
    "with" WithPredicateExpression()
        ComprehensionBlock()
}


void ComprehensionElseIfOrWithExpression()      :
{}
{
    "else" ( "if" ValueExpression() | "with" WithPredicateExpression() ) ComprehensionBlock()
}

void ComprehensionElseExpression()      :
{}
{
    "else"
        ComprehensionBlock()
}

void ComprehensionForExpression()               :
{/*@bgen(jjtree) ForExpression */
  ParsedForExpression jjtn000 = new ParsedForExpression(JJTFOREXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ForExpression */
    try {
/*@egen*/
    "for" Iterator(false) ( "and" Iterator(false) | "or" Iterator(true) )* ComprehensionBlock()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}


Block ComprehensionBlock()          :
{/*@bgen(jjtree) FunBlock */
    ParsedFunBlock jjtn000 = new ParsedFunBlock(JJTFUNBLOCK);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Block catchBlock;
}
{/*@bgen(jjtree) FunBlock */
    try {
/*@egen*/
    (
      "{/" [ ArrayElementExpression() ( LOOKAHEAD(2) "," ArrayElementExpression() )* [ "," ] ] "/}"
    )
    [ catchBlock = ComprehensionCatchBlock() { jjtn000.setCatch(catchBlock); } ]/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        return jjtn000;
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}


Block ComprehensionCatchBlock()      :
{
    Block block = null;
}
{
    "catch"  block = ComprehensionBlock()
    {
        return block;
    }
}

  
void PositiveExpression()      :
{}
{
    "+" UnaryExpression()
}

void NegativeExpression()                 :
{/*@bgen(jjtree) UnaryExpression */
  ParsedUnaryExpression jjtn000 = new ParsedUnaryExpression(JJTUNARYEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) UnaryExpression */
    try {
/*@egen*/
    NegateOperator() UnaryExpression()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void NegateOperator() :
{/*@bgen(jjtree) NegateOperator */
  ParsedNegateOperator jjtn000 = new ParsedNegateOperator(JJTNEGATEOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) NegateOperator */
    try {
/*@egen*/
    "-"/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void BitflipExpression()                 :
{/*@bgen(jjtree) UnaryExpression */
  ParsedUnaryExpression jjtn000 = new ParsedUnaryExpression(JJTUNARYEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) UnaryExpression */
    try {
/*@egen*/
    BitflipOperator() UnaryExpression()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void BitflipOperator() :
{/*@bgen(jjtree) BitflipOperator */
  ParsedBitflipOperator jjtn000 = new ParsedBitflipOperator(JJTBITFLIPOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) BitflipOperator */
    try {
/*@egen*/
    "~"/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void LogicalNotExpression()                 :
{/*@bgen(jjtree) UnaryExpression */
  ParsedUnaryExpression jjtn000 = new ParsedUnaryExpression(JJTUNARYEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) UnaryExpression */
    try {
/*@egen*/
    LogicalNotOperator() UnaryExpression()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void LogicalNotOperator() :
{/*@bgen(jjtree) LogicalNotOperator */
  ParsedLogicalNotOperator jjtn000 = new ParsedLogicalNotOperator(JJTLOGICALNOTOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) LogicalNotOperator */
    try {
/*@egen*/
    "!"/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

// This production is to determine lookahead only.  The LOOKAHEAD specifications
// below are not used, but they are there just to indicate that we know about
// this.
void CastLookahead()      :
{}
{
    LOOKAHEAD(2)
    "(" PrimitiveType()
  |
    LOOKAHEAD("(" TypeName() "[")
    "(" TypeName() "[" "]"
  |
    // the java grammar file didn't have "+" or "-" below
    "(" TypeName() ")" ( "~" | "!" | "+" | "-" | "(" | Name() | "this" | "super" | Literal() )
}

void CastExpression()                 :
{/*@bgen(jjtree) UnaryExpression */
  ParsedUnaryExpression jjtn000 = new ParsedUnaryExpression(JJTUNARYEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) UnaryExpression */
    try {
/*@egen*/
    TypeOperator() UnaryExpression()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void TypeOperator() :
{/*@bgen(jjtree) TypeOperator */
  ParsedTypeOperator jjtn000 = new ParsedTypeOperator(JJTTYPEOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) TypeOperator */
    try {
/*@egen*/
    "(" SimpleType() ")"/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void IsaExpression()                   :
{/*@bgen(jjtree) #IsaExpression(> 1) */
  ParsedIsaExpression jjtn000 = new ParsedIsaExpression(JJTISAEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #IsaExpression(> 1) */
    try {
/*@egen*/
    PrimaryExpression() [ IsaOperator() ]/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
      }
    }
/*@egen*/
}

void IsaOperator()      :
{}
{
    ( "isa" | "|>" ) SimpleType()
}

void PrimaryExpression()      :
{}
{
    (
      "(" ValueExpression() ")"
    |
      Literal()
    |
      ValueInstance()
    )
}

void ValueInstance()              :
{/*@bgen(jjtree) Construction */
  ParsedConstruction jjtn000 = new ParsedConstruction(JJTCONSTRUCTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Construction */
    try {
/*@egen*/
    ComplexName()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}


void Literal()      :
{}
{
    (
      IntegerLiteral()
    |
      FloatingPointLiteral()
    |
      CharLiteral()
    | 
      SingleQuoteStringLiteral()
    |
      DoubleQuoteStringLiteral()
    |
      BooleanLiteral()
    |
      NullLiteral()
    )
}

void IntegerLiteral() :
{/*@bgen(jjtree) IntegerLiteral */
  ParsedIntegerLiteral jjtn000 = new ParsedIntegerLiteral(JJTINTEGERLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; }
{/*@bgen(jjtree) IntegerLiteral */
    try {
/*@egen*/
    t = <INTEGER_LITERAL>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
      jjtn000.setValue(t.image);
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void FloatingPointLiteral() :
{/*@bgen(jjtree) FloatingPointLiteral */
  ParsedFloatingPointLiteral jjtn000 = new ParsedFloatingPointLiteral(JJTFLOATINGPOINTLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; }
{/*@bgen(jjtree) FloatingPointLiteral */
    try {
/*@egen*/
    t = <FLOATING_POINT_LITERAL>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
      jjtn000.setValue(t.image);
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void CharLiteral()             :
{/*@bgen(jjtree) CharLiteral */
  ParsedCharLiteral jjtn000 = new ParsedCharLiteral(JJTCHARLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; }
{/*@bgen(jjtree) CharLiteral */
    try {
/*@egen*/
    t = <CHAR_LITERAL>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
      // strip off the leading and trailing quotes
      String str = t.image.substring(1, t.image.length() - 1);
      jjtn000.setValue(str);
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void SingleQuoteStringLiteral()               :
{/*@bgen(jjtree) StringLiteral */
  ParsedStringLiteral jjtn000 = new ParsedStringLiteral(JJTSTRINGLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; }
{/*@bgen(jjtree) StringLiteral */
    try {
/*@egen*/
    t = <SQ_STRING_LITERAL>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
      // strip off the leading and trailing quotes
      String str = t.image.substring(1, t.image.length() - 1);
      jjtn000.setValue(str, true);
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void DoubleQuoteStringLiteral()               :
{/*@bgen(jjtree) StringLiteral */
  ParsedStringLiteral jjtn000 = new ParsedStringLiteral(JJTSTRINGLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; }
{/*@bgen(jjtree) StringLiteral */
    try {
/*@egen*/
    t = <DQ_STRING_LITERAL>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
      // strip off the leading and trailing quotes
      String str = t.image.substring(1, t.image.length() - 1);
      jjtn000.setValue(str, false);
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void BooleanLiteral() :
{/*@bgen(jjtree) BooleanLiteral */
  ParsedBooleanLiteral jjtn000 = new ParsedBooleanLiteral(JJTBOOLEANLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) BooleanLiteral */
    try {
/*@egen*/
    (
      "true"/*@bgen(jjtree)*/
             {
               jjtree.closeNodeScope(jjtn000, true);
               jjtc000 = false;
             }
/*@egen*/ { jjtn000.setValue(true); }
    |
      "false"/*@bgen(jjtree)*/
              {
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
              }
/*@egen*/ { jjtn000.setValue(false); }
    )/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void NullLiteral() :
{/*@bgen(jjtree) NullLiteral */
  ParsedNullLiteral jjtn000 = new ParsedNullLiteral(JJTNULLLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) NullLiteral */
   try {
/*@egen*/
   "null"/*@bgen(jjtree)*/
          {
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
          }
/*@egen*/ { jjtn000.setPrimitive(); }/*@bgen(jjtree)*/
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

Block NullBlock()             :
{/*@bgen(jjtree) NullLiteral */
  ParsedNullLiteral jjtn000 = new ParsedNullLiteral(JJTNULLLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) NullLiteral */
    try {
/*@egen*/
    (
      "[/]"  { jjtn000.setStatic(); }
    |
      "[?]"  { jjtn000.setAbstract(); }
    )/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        return jjtn000;
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void ExternalBlock()             :
{/*@bgen(jjtree) NullLiteral */
  ParsedNullLiteral jjtn000 = new ParsedNullLiteral(JJTNULLLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) NullLiteral */
    try {
/*@egen*/
    (
      "[&]"/*@bgen(jjtree)*/
             {
               jjtree.closeNodeScope(jjtn000, true);
               jjtc000 = false;
             }
/*@egen*/  { jjtn000.setExternal(); }
    )/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

